{"meta":{"title":"COFFEECODE","subtitle":"","description":"","author":"John Doe","url":"http://yoursite.com"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2020-05-01T05:55:46.977Z","updated":"2020-05-01T05:55:46.977Z","comments":false,"path":"/404.html","permalink":"http://yoursite.com/404.html","excerpt":"","text":""},{"title":"书单","date":"2020-05-01T09:40:01.965Z","updated":"2020-05-01T09:40:01.965Z","comments":false,"path":"books/index.html","permalink":"http://yoursite.com/books/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-05-01T05:55:46.978Z","updated":"2020-05-01T05:55:46.978Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"分类","date":"2020-05-01T05:55:46.978Z","updated":"2020-05-01T05:55:46.978Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"gallery","date":"2020-05-01T05:40:35.000Z","updated":"2020-05-01T05:40:35.574Z","comments":true,"path":"gallery/index.html","permalink":"http://yoursite.com/gallery/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-05-01T05:55:46.979Z","updated":"2020-05-01T05:55:46.979Z","comments":true,"path":"links/index.html","permalink":"http://yoursite.com/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-05-01T05:55:46.979Z","updated":"2020-05-01T05:55:46.979Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-05-01T05:55:46.979Z","updated":"2020-05-01T05:55:46.979Z","comments":false,"path":"repository/index.html","permalink":"http://yoursite.com/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"Spring - 装配Spring Bean-通过注解（自动装配-@Autowired）","slug":"Spring-装配Spring-Bean-通过注解（自动装配-Autowired）","date":"2020-05-01T15:56:58.000Z","updated":"2020-05-01T15:57:31.276Z","comments":true,"path":"2020/05/01/Spring-装配Spring-Bean-通过注解（自动装配-Autowired）/","link":"","permalink":"http://yoursite.com/2020/05/01/Spring-%E8%A3%85%E9%85%8DSpring-Bean-%E9%80%9A%E8%BF%87%E6%B3%A8%E8%A7%A3%EF%BC%88%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D-Autowired%EF%BC%89/","excerpt":"","text":"自动装配-@Autowired 在上一节中还有一个对象注入问题没有解决，关于这个问题，在大部分情况下建议使用自动装配，可以减小配置的复杂度。 通过学习Spring IOC容器，我们知道Spring是先完成Bean的定义和生成，然后当Spring生成所有的Bean后，如果发现注解@AutoWired，他就会在Bean中查找，然后找到对应的类型，将其注入。 实现自动装配 定义实体类，Role.java 1234567891011121314151617package com.ssm.annotation.pojo;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Component;@Component(value = \"role\")public class Role &#123; @Value(\"1\") private Long idLong; @Value(\"roleName1\") private String roleNameString; @Value(\"note1\") private String noteString; /*省略get和set方法*/&#125; 生成一个Service接口 12345package com.ssm.annotation.service;public interface RoleService &#123; public void printRoleInfo();&#125; 生成Service接口实现类 1234567891011121314151617181920212223package com.ssm.annotation.service.impl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import com.ssm.annotation.pojo.Role;import com.ssm.annotation.service.RoleService;@Componentpublic class RoleServiceImpl implements RoleService&#123; @Autowired private Role role = null; public Role getRole() &#123; return role; &#125; public void setRole(Role role) &#123; this.role = role; &#125; @Override public void printRoleInfo() &#123; System.out.println(\"RoleServiceImpl\"+role.toString()); &#125;&#125; 这里的注解@AutoWired，表示在Spring IOC中定位的所有Bean后，到Sring IOC容器中按照类型查找对应的实例并将其注入。 扫描组件类 12345678package com.ssm.annotation.config;import org.springframework.context.annotation.ComponentScan;import com.ssm.annotation.pojo.Role;import com.ssm.annotation.service.impl.RoleServiceImpl;@ComponentScan(basePackageClasses = &#123;Role.class,RoleServiceImpl.class&#125;,basePackages = &#123;\"com.ssm.annotation.pojo\",\"com.ssm.annotation.service\"&#125;)public class PojoConfig &#123;&#125; 测试类 1234567891011121314151617package com.ssm.annotation.test;import org.springframework.context.ApplicationContext;import org.springframework.context.annotation.AnnotationConfigApplicationContext;import com.ssm.annotation.config.PojoConfig;import com.ssm.annotation.pojo.Role;import com.ssm.annotation.service.RoleService;public class AnnotationTest &#123; public static void main(String[] args) &#123; ApplicationContext context = new AnnotationConfigApplicationContext(PojoConfig.class); Role role = context.getBean(Role.class); RoleService roleService =context.getBean(RoleService.class); roleService.printRoleInfo(); &#125;&#125; 测试结果 1RoleServiceImplRole [idLong=1, roleNameString=roleName1, noteString=note1] 注：@AutoWired注解除了可以配置在属性上之外，还可以配置到方法上 1234567891011121314151617@Componentpublic class RoleServiceImpl implements RoleService&#123; private Role role = null; public Role getRole() &#123; return role; &#125; @Autowired public void setRole(Role role) &#123; this.role = role; &#125; @Override public void printRoleInfo() &#123; System.out.println(\"RoleServiceImpl\"+role.toString()); &#125;&#125;","categories":[{"name":"框架","slug":"框架","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"},{"name":"SSM","slug":"框架/SSM","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/SSM/"},{"name":"Spring","slug":"框架/SSM/Spring","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/SSM/Spring/"}],"tags":[{"name":"SSM","slug":"SSM","permalink":"http://yoursite.com/tags/SSM/"},{"name":"Spring","slug":"Spring","permalink":"http://yoursite.com/tags/Spring/"}],"keywords":[{"name":"框架","slug":"框架","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"},{"name":"SSM","slug":"框架/SSM","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/SSM/"},{"name":"Spring","slug":"框架/SSM/Spring","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/SSM/Spring/"}]},{"title":"Spring - 装配Spring Bean-通过注解（组件扫描）","slug":"Spring-装配Spring-Bean-通过注解（组件扫描）","date":"2020-05-01T15:54:58.000Z","updated":"2020-05-01T16:01:50.916Z","comments":true,"path":"2020/05/01/Spring-装配Spring-Bean-通过注解（组件扫描）/","link":"","permalink":"http://yoursite.com/2020/05/01/Spring-%E8%A3%85%E9%85%8DSpring-Bean-%E9%80%9A%E8%BF%87%E6%B3%A8%E8%A7%A3%EF%BC%88%E7%BB%84%E4%BB%B6%E6%89%AB%E6%8F%8F%EF%BC%89/","excerpt":"","text":"Annotation 通过注解（Annotation）去装配Soring Bean，可以减少对XML文件的配置，注解功能更为强大，他既能实现XML的功能，也能提供自动装配的功能。 方式 方式 作用 组件扫描(@Component与@ComponentScan) 通过定义资源的方式，让Spring IOC容器扫描对应的包，从而把Bean装配出来 自动装配（@Autowired） 通过注解定义，使得一些依赖关系可以通过注解完成 组件扫描 使用@Component装配Bean 首先定义一个POJO类，Role.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445package com.ssm.annotation.pojo;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Component;@Component(value = \"role\")public class Role &#123; @Value(\"1\") private Long idLong; @Value(\"roleName1\") private String roleNameString; @Value(\"note1\") private String noteString; public Long getIdLong() &#123; return idLong; &#125; public void setIdLong(Long idLong) &#123; this.idLong = idLong; &#125; public String getRoleNameString() &#123; return roleNameString; &#125; public void setRoleNameString(String roleNameString) &#123; this.roleNameString = roleNameString; &#125; public String getNoteString() &#123; return noteString; &#125; public void setNoteString(String noteString) &#123; this.noteString = noteString; &#125; @Override public String toString() &#123; return \"Role [idLong=\" + idLong + \", roleNameString=\" + roleNameString + \", noteString=\" + noteString + \"]\"; &#125;&#125; 1.注解@Component代表Spring IoC会把这个类扫描生成Bean实例， 其中value代表这个类在Spring中的ID,value可以省略不写@Component（&quot;role&quot;）,也可以直接写成@Component，Spring IOC会默认为类名，但是id会变成首字母小写的类名（”role“）。 2.注解@Value代表是值的注入。 定义一个Java Config类，好让Spring IOC知道要去哪里扫描对象 123456package com.ssm.pojo;import org.springframework.context.annotation.ComponentScan;@ComponentScanpublic class PojoConfig &#123;&#125; 1.包名要和POJO保持一致（就是Java Conofig类要和POJO类在同一个包下）。 2.@ComponentScan代表进行扫描，默认是扫描当前包的路径。 测试类 123456789101112131415package com.ssm.pojo.test;import org.springframework.context.ApplicationContext;import org.springframework.context.annotation.AnnotationConfigApplicationContext;import com.ssm.pojo.PojoConfig;import com.ssm.pojo.Role;public class test &#123; public static void main(String[] args) &#123; ApplicationContext context = new AnnotationConfigApplicationContext(PojoConfig.class); Role role = context.getBean(Role.class); System.out.print(role.toString()); &#125;&#125; 这里使用AnnotationConfigApplicationContext生成IOC容器，并获取PojoConfig.java类中扫描的对象。 运行结果 1Role [idLong=1, roleNameString=roleName1, noteString=note1] 通过上面的简单编写你会发现两个弊端： 对于@ComponentScan注解，你会发现他只是扫描所在java类的包，不能扫描指定的包 上面的注入只有值的注入，但是大部分需要的是对象的注入 所以为了解决这第一个问题（包的扫描），我们可以在@ComponentScan中引用两个配置项 basePackages basePackageClasses 配置项 作用 basePackages 可以配置一个Java包的数组，Spring会根据配置去扫描对应的包和子包，把配置好的Bean装配进来 basePackageClasses 可以配置多个Java类，会根据类所在的包，为该包和子包进行扫描装配对应配置的Bean @ComponentScan的使用 实体类POJO还是上面的Role.java 然后定义一个service接口 1234567package com.ssm.annotation.service;import com.ssm.annotation.pojo.Role;public interface RoleService &#123; public void printRoleInfo(Role role);&#125; 实现RoleService接口 1234567891011121314package com.ssm.annotation.service.impl;import org.springframework.stereotype.Component;import com.ssm.annotation.pojo.Role;import com.ssm.annotation.service.RoleService;@Componentpublic class RoleServiceImpl implements RoleService&#123; @Override public void printRoleInfo(Role role) &#123; System.out.println(role.toString()); &#125;&#125; 对Java Config类配置@ComponentScan 12345678910111213141516package com.ssm.annotation.config;import org.springframework.context.annotation.ComponentScan;import com.ssm.annotation.pojo.Role;import com.ssm.annotation.service.impl.RoleServiceImpl;//通过@ComponentScan中的basePackageClasses配置项，可以获取配置的类所在的包，为包和子包进行扫描装配对应配置的Bean//@ComponentScan(basePackageClasses = &#123;Role.class,RoleServiceImpl.class&#125;)//通过@ComponentS阿产能中的basePackages配置项，可以配置一个java包的数组，Spring会根据他的配置扫描对应的包和子包//@ComponentScan(basePackages = &#123;\"com.ssm.annotation.pojo\",\"com.ssm.annotation.service\"&#125;)//组合使用@ComponentScan(basePackageClasses = &#123;Role.class,RoleServiceImpl.class&#125;,basePackages = &#123;\"com.ssm.annotation.pojo\",\"com.ssm.annotation.service\"&#125;)public class PojoConfig &#123;&#125; 上面通过三种方式进行了配置： 1.basePackageClassess采用的是对包的扫描，他会扫描该包和子包，将配置好的Bean装配进来 2.basePackages 会对java包的数组进行扫描，并扫描对应的包和子包 注意： 对于扫描包的定义，可以采用任意一个@ComponentScan去定义，但是最好只定义一个@ComponentScan， 因为每定义一个@ComponentScan，Spring就会为所定义的类去生成一个新的对象，也就是所配置的Bean将会生成多个实例。 对于同一个@ComponentScan中部的basePackageClasses和basePackages，Spring会进行专门的区分， 也就是说在同一个@ComponentScan中即使你重复定义相同的包或者子包，也不会造成因同一个Bean的多次扫描，而导致一次配置会生成多个对象的情况。 测试类 1234567891011121314151617package com.ssm.annotation.test;import org.springframework.context.ApplicationContext;import org.springframework.context.annotation.AnnotationConfigApplicationContext;import com.ssm.annotation.config.PojoConfig;import com.ssm.annotation.pojo.Role;import com.ssm.annotation.service.RoleService;public class AnnotationTest &#123; public static void main(String[] args) &#123; ApplicationContext context = new AnnotationConfigApplicationContext(PojoConfig.class); Role role = context.getBean(Role.class); RoleService roleService =context.getBean(RoleService.class); roleService.printRoleInfo(role); &#125;&#125; 运行结果 1Role [idLong=1, roleNameString=roleName1, noteString=note1] 但是还没有解决对象注入的问题，下一节使用自动装配（@AutoWired）解对象注入问题。 自动装配-@AutoWired-下一节","categories":[{"name":"框架","slug":"框架","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"},{"name":"SSM","slug":"框架/SSM","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/SSM/"},{"name":"Spring","slug":"框架/SSM/Spring","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/SSM/Spring/"}],"tags":[{"name":"SSM","slug":"SSM","permalink":"http://yoursite.com/tags/SSM/"},{"name":"Spring","slug":"Spring","permalink":"http://yoursite.com/tags/Spring/"}],"keywords":[{"name":"框架","slug":"框架","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"},{"name":"SSM","slug":"框架/SSM","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/SSM/"},{"name":"Spring","slug":"框架/SSM/Spring","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/SSM/Spring/"}]},{"title":"Mybatis中的3种级联方式","slug":"Mybatis中的3种级联方式","date":"2020-05-01T15:50:16.000Z","updated":"2020-05-01T16:09:24.789Z","comments":true,"path":"2020/05/01/Mybatis中的3种级联方式/","link":"","permalink":"http://yoursite.com/2020/05/01/Mybatis%E4%B8%AD%E7%9A%843%E7%A7%8D%E7%BA%A7%E8%81%94%E6%96%B9%E5%BC%8F/","excerpt":"","text":"Mybatis中的级联 Mybatis的3种级联 鉴别器（discriminator）： 他是一个根据某些条件决定采用具体实现类的级联的方案，比如体检要根据性别区分。 一对一（association）： 比如你的省份证和你就是一种一对一的级联。 一对多（collection）： 比如班主任和学生就是一种一对多的级联。 值得注意的是，Mybatis中没有多对多的级联，因为多对多级联比较复杂。使用困难，而且可以通过两个一对多级联进行替换，所以Mybatis不支持多对多级联。 示例 确定一个雇员级联模型 分析雇员级联模型 1. 该模型是以雇员表为中心的。 2. 雇员表和工牌表示 “一对一” 的级联关系。 3. 雇员表和员工任务表示 “ 一对多” 的级联关系。 4. 员工任务表和任务表是 “一对一” 的级联关系。 5. 每个员工都会有一个体检表，它是根据性别的不同，得到不同的关联表，所以是 “鉴别器” 的级联关系。 表的设计 SQL语句 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156DROP TABLE IF EXISTS t_female_health_form;DROP TABLE IF EXISTS t_male_health_form;DROP TABLE IF EXISTS t_task;DROP TABLE IF EXISTS t_work_card;DROP TABLE IF EXISTS t_employee_task;DROP TABLE IF EXISTS t_employee;/*==============================================================*//* Table: t_employee 雇员表 *//*==============================================================*/CREATE TABLE t_employee( id INT(12) NOT NULL AUTO_INCREMENT, real_name VARCHAR(60) NOT NULL, sex INT(2) NOT NULL COMMENT '1 - 男 0 -女', birthday DATE NOT NULL, mobile VARCHAR(20) NOT NULL, email VARCHAR(60) NOT NULL, POSITION VARCHAR(20) NOT NULL, note VARCHAR(256), PRIMARY KEY (id));/*==============================================================*//* Table: t_employee_task 员工任务表 *//*==============================================================*/CREATE TABLE t_employee_task( id INT(12) NOT NULL auto_increment, emp_id INT(12) NOT NULL, task_id INT(12) NOT NULL, task_name VARCHAR(60) NOT NULL, note VARCHAR(256), PRIMARY KEY (id));/*==============================================================*//* Table: t_female_health_form 女性体检表 *//*==============================================================*/CREATE TABLE t_female_health_form( id INT(12) NOT NULL AUTO_INCREMENT, emp_id INT(12) NOT NULL, heart VARCHAR(64) NOT NULL, liver VARCHAR(64) NOT NULL, spleen VARCHAR(64) NOT NULL, lung VARCHAR(64) NOT NULL, kidney VARCHAR(64) NOT NULL, uterus VARCHAR(64) NOT NULL, note VARCHAR(256), PRIMARY KEY (id));/*==============================================================*//* Table: t_male_health_form 男性体检表 *//*==============================================================*/CREATE TABLE t_male_health_form( id INT(12) NOT NULL AUTO_INCREMENT, emp_id INT(12) NOT NULL, heart VARCHAR(64) NOT NULL, liver VARCHAR(64) NOT NULL, spleen VARCHAR(64) NOT NULL, lung VARCHAR(64) NOT NULL, kidney VARCHAR(64) NOT NULL, prostate VARCHAR(64) NOT NULL, note VARCHAR(256), PRIMARY KEY (id));/*==============================================================*//* Table: t_task 任务表 *//*==============================================================*/CREATE TABLE t_task( id INT(12) NOT NULL auto_increment, title VARCHAR(60) NOT NULL, context VARCHAR(256) NOT NULL, note VARCHAR(256), PRIMARY KEY (id));/*==============================================================*//* Table: t_work_card 工牌表 *//*==============================================================*/CREATE TABLE t_work_card( id INT(12) NOT NULL AUTO_INCREMENT, emp_id INT(12) NOT NULL, real_name VARCHAR(60) NOT NULL, department VARCHAR(20) NOT NULL, mobile VARCHAR(20) NOT NULL, POSITION VARCHAR(30) NOT NULL, note VARCHAR(256), PRIMARY KEY (id));/*==============================================================*//* 外键约束 *//*==============================================================*/ALTER TABLE t_employee_task ADD CONSTRAINT FK_Reference_4 FOREIGN KEY (emp_id) REFERENCES t_employee (id) ON DELETE RESTRICT ON UPDATE RESTRICT;ALTER TABLE t_employee_task ADD CONSTRAINT FK_Reference_8 FOREIGN KEY (task_id) REFERENCES t_task (id) ON DELETE RESTRICT ON UPDATE RESTRICT;ALTER TABLE t_female_health_form ADD CONSTRAINT FK_Reference_5 FOREIGN KEY (emp_id) REFERENCES t_employee (id) ON DELETE RESTRICT ON UPDATE RESTRICT;ALTER TABLE t_male_health_form ADD CONSTRAINT FK_Reference_6 FOREIGN KEY (emp_id) REFERENCES t_employee (id) ON DELETE RESTRICT ON UPDATE RESTRICT;ALTER TABLE t_work_card ADD CONSTRAINT FK_Reference_7 FOREIGN KEY (emp_id) REFERENCES t_employee (id) ON DELETE RESTRICT ON UPDATE RESTRICT;/*==============================================================*//* 插入测试数据 *//*==============================================================*//*雇员表*/INSERT INTO t_employee(id,real_name,sex,birthday,mobile,email,POSITION,note) VALUES (DEFAULT,'employee_1',1,'2000-04-23','18773459883','employee_1@.com','Programmer','小刘');INSERT INTO t_employee(id,real_name,sex,birthday,mobile,email,POSITION,note) VALUES (DEFAULT,'employee_2',1,'2000-01-03','18773324883','employee_2@.com','Programmer','小王');INSERT INTO t_employee(id,real_name,sex,birthday,mobile,email,POSITION,note) VALUES (DEFAULT,'employee_3',0,'2000-02-20','18773443555','employee_3@.com','Programmer','小徐');INSERT INTO t_employee(id,real_name,sex,birthday,mobile,email,POSITION,note) VALUES (DEFAULT,'employee_4',0,'2000-04-29','18773464467','employee_4@.com','Programmer','小陆');/*男性体检表*/INSERT INTO t_male_health_form(id,emp_id,heart,liver,spleen,lung,kidney,prostate,note) VALUES(DEFAULT,1,'normal','normal','normal','normal','normal','normal','***医院');INSERT INTO t_male_health_form(id,emp_id,heart,liver,spleen,lung,kidney,prostate,note) VALUES(DEFAULT,2,'normal','normal','normal','normal','normal','normal','***医院');/*女性体检表*/INSERT INTO t_female_health_form(id,emp_id,heart,liver,spleen,lung,kidney,uterus,note) VALUES(DEFAULT,3,'normal','normal','normal','normal','normal','normal','***医院');INSERT INTO t_female_health_form(id,emp_id,heart,liver,spleen,lung,kidney,uterus,note) VALUES(DEFAULT,4,'normal','normal','normal','normal','normal','normal','***医院');/*工牌表*/INSERT INTO t_work_card(id,emp_id,real_name,department,mobile,POSITION,note) VALUES (DEFAULT,1,'employee_1','Tech-Dept','employee_1@.com','Programmer','小刘');INSERT INTO t_work_card(id,emp_id,real_name,department,mobile,POSITION,note) VALUES (DEFAULT,2,'employee_2','Tech-Dept','employee_2@.com','Programmer','小王');INSERT INTO t_work_card(id,emp_id,real_name,department,mobile,POSITION,note) VALUES (DEFAULT,3,'employee_3','Tech-Dept','employee_3@.com','Programmer','小徐');INSERT INTO t_work_card(id,emp_id,real_name,department,mobile,POSITION,note) VALUES (DEFAULT,4,'employee_4','Tech-Dept','employee_4@.com','Programmer','小陆');/*任务表*/INSERT INTO t_task(id,title,context,note) VALUE(DEFAULT,'前端','HTML+CSS+JS+JQuery+Bootstrap+Ajax','前端开发');INSERT INTO t_task(id,title,context,note) VALUE(DEFAULT,'后端','Spring+SpringMVC+Mybatis+Redis','后端开发');/*员工任务表*/INSERT INTO t_employee_task(id,emp_id,task_id,task_name,note) VALUES(DEFAULT,1,2,'后端开发','后端');INSERT INTO t_employee_task(id,emp_id,task_id,task_name,note) VALUES(DEFAULT,2,2,'后端开发','后端');INSERT INTO t_employee_task(id,emp_id,task_id,task_name,note) VALUES(DEFAULT,3,1,'前端开发','前端');INSERT INTO t_employee_task(id,emp_id,task_id,task_name,note) VALUES(DEFAULT,4,1,'前端开发','前端'); 示例项目主体结构 示例代码 建立POJO 建立POJO之前先建立一个性别枚举类和一个自定义TypeHandler类 1. SexEnum.java 1234567891011121314151617181920212223242526272829303132333435363738394041package com.ssm.enumeration;/** * 性别枚举 */public enum SexEnum &#123; MALE(1,\"男\"), FEMALE(0,\"女\"); private int id; private String name; public void setId(int id) &#123; this.id = id; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getId() &#123; return id; &#125; public String getName() &#123; return name; &#125; SexEnum(int id, String name) &#123; this.id = id; this.name = name; &#125; public static SexEnum getSexById(int id)&#123; for (SexEnum sex : SexEnum.values())&#123; if (sex.getId() == id)&#123; return sex; &#125; &#125; return null; &#125;&#125; SexTypeHandler.java 1234567891011121314151617181920212223242526272829303132333435package com.ssm.typeHandler;import com.ssm.enumeration.SexEnum;import org.apache.ibatis.type.BaseTypeHandler;import org.apache.ibatis.type.JdbcType;import java.sql.CallableStatement;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;public class SexTypeHandler extends BaseTypeHandler&lt;SexEnum&gt; &#123; @Override public SexEnum getNullableResult(ResultSet rs, String name) throws SQLException &#123; int sex = rs.getInt(name); return SexEnum.getSexById(sex); &#125; @Override public SexEnum getNullableResult(ResultSet rs, int index) throws SQLException &#123; int sex = rs.getInt(index); return SexEnum.getSexById(sex); &#125; @Override public SexEnum getNullableResult(CallableStatement cs, int index) throws SQLException &#123; int sex = cs.getInt(index); return SexEnum.getSexById(sex); &#125; @Override public void setNonNullParameter(PreparedStatement ps, int index, SexEnum sex, JdbcType jdbcType) throws SQLException &#123; ps.setInt(index, sex.getId()); &#125;&#125; 主要实体类 HealthFoem.java 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394package com.ssm.pojo;/** * 体检实体类 */public class HealthForm &#123; private Long id; private Long empId; private String heart; private String liver; private String spleen; private String lung; private String kidney; private String note; public Long getId() &#123; return id; &#125; public void setId(Long id) &#123; this.id = id; &#125; public Long getEmpId() &#123; return empId; &#125; public void setEmpId(Long empId) &#123; this.empId = empId; &#125; public String getHeart() &#123; return heart; &#125; public void setHeart(String heart) &#123; this.heart = heart; &#125; public String getLiver() &#123; return liver; &#125; public void setLiver(String liver) &#123; this.liver = liver; &#125; public String getSpleen() &#123; return spleen; &#125; public void setSpleen(String spleen) &#123; this.spleen = spleen; &#125; public String getLung() &#123; return lung; &#125; public void setLung(String lung) &#123; this.lung = lung; &#125; public String getKidney() &#123; return kidney; &#125; public void setKidney(String kidney) &#123; this.kidney = kidney; &#125; public String getNote() &#123; return note; &#125; public void setNote(String note) &#123; this.note = note; &#125; @Override public String toString() &#123; return \"HealthForm&#123;\" + \"id=\" + id + \", empId=\" + empId + \", heart='\" + heart + '\\'' + \", liver='\" + liver + '\\'' + \", spleen='\" + spleen + '\\'' + \", lung='\" + lung + '\\'' + \", kidney='\" + kidney + '\\'' + \", note='\" + note + '\\'' + '&#125;'; &#125;&#125; MaleHealthForm.java 1234567891011121314151617package com.ssm.pojo;/** * 男性体检实体类 */public class MaleHealthForm extends HealthForm &#123; private String prostate; public String getProstate() &#123; return prostate; &#125; public void setProstate(String prostate) &#123; this.prostate = prostate; &#125;&#125; FemaleHealthForm.java 1234567891011121314151617package com.ssm.pojo;/** * 女性体检实体类 */public class FemaleHealthForm extends HealthForm &#123; private String uterus; public String getUterus() &#123; return uterus; &#125; public void setUterus(String uterus) &#123; this.uterus = uterus; &#125;&#125; WorkCard.java 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283package com.ssm.pojo;/** * 工牌卡实体类 */public class WorkCard &#123; private Long id; private Long empId; private String realName; private String department; private String mobile; private String position; private String note; public Long getId() &#123; return id; &#125; public void setId(Long id) &#123; this.id = id; &#125; public Long getEmpId() &#123; return empId; &#125; public void setEmpId(Long empId) &#123; this.empId = empId; &#125; public String getRealName() &#123; return realName; &#125; public void setRealName(String realName) &#123; this.realName = realName; &#125; public String getDepartment() &#123; return department; &#125; public void setDepartment(String department) &#123; this.department = department; &#125; public String getMobile() &#123; return mobile; &#125; public void setMobile(String mobile) &#123; this.mobile = mobile; &#125; public String getPosition() &#123; return position; &#125; public void setPosition(String position) &#123; this.position = position; &#125; public String getNote() &#123; return note; &#125; public void setNote(String note) &#123; this.note = note; &#125; @Override public String toString() &#123; return \"WorkCard&#123;\" + \"id=\" + id + \", empId=\" + empId + \", realName='\" + realName + '\\'' + \", department='\" + department + '\\'' + \", mobile='\" + mobile + '\\'' + \", position='\" + position + '\\'' + \", note='\" + note + '\\'' + '&#125;'; &#125;&#125; Task.java 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253package com.ssm.pojo;/** * 任务实体类 */public class Task &#123; private Long id; private String title; private String context; private String note; public Long getId() &#123; return id; &#125; public void setId(Long id) &#123; this.id = id; &#125; public String getTitle() &#123; return title; &#125; public void setTitle(String title) &#123; this.title = title; &#125; public String getContext() &#123; return context; &#125; public void setContext(String context) &#123; this.context = context; &#125; public String getNote() &#123; return note; &#125; public void setNote(String note) &#123; this.note = note; &#125; @Override public String toString() &#123; return \"Task&#123;\" + \"id=\" + id + \", title='\" + title + '\\'' + \", context='\" + context + '\\'' + \", note='\" + note + '\\'' + '&#125;'; &#125;&#125; EmployeeTask.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263package com.ssm.pojo;/** * 雇员任务实体类 */public class EmployeeTask &#123; private Long id; private Long empId; private Task task = null; private String taskName; private String note; public Long getId() &#123; return id; &#125; public void setId(Long id) &#123; this.id = id; &#125; public Long getEmpId() &#123; return empId; &#125; public void setEmpId(Long empId) &#123; this.empId = empId; &#125; public Task getTask() &#123; return task; &#125; public void setTask(Task task) &#123; this.task = task; &#125; public String getTaskName() &#123; return taskName; &#125; public void setTaskName(String taskName) &#123; this.taskName = taskName; &#125; public String getNote() &#123; return note; &#125; public void setNote(String note) &#123; this.note = note; &#125; @Override public String toString() &#123; return \"EmployeeTask&#123;\" + \"id=\" + id + \", empId=\" + empId + \", task=\" + task + \", taskName='\" + taskName + '\\'' + \", note='\" + note + '\\'' + '&#125;'; &#125;&#125; Employee.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102package com.ssm.pojo;import java.util.Date;import java.util.List;import com.ssm.enumeration.SexEnum;/** * 雇员实体类 */public class Employee &#123; private Long id; private String realName; private SexEnum sex = null; private Date birthday; private String mobile; private String email; private String position; private String note; //工牌按一对一级联 private WorkCard workCard; //雇员任务，一对多级联 private List&lt;EmployeeTask&gt; employeeTaskList = null; public Long getId() &#123; return id; &#125; public void setId(Long id) &#123; this.id = id; &#125; public String getRealName() &#123; return realName; &#125; public void setRealName(String realName) &#123; this.realName = realName; &#125; public SexEnum getSex() &#123; return sex; &#125; public void setSex(SexEnum sex) &#123; this.sex = sex; &#125; public Date getBirthday() &#123; return birthday; &#125; public void setBirthday(Date birthday) &#123; this.birthday = birthday; &#125; public String getMobile() &#123; return mobile; &#125; public void setMobile(String mobile) &#123; this.mobile = mobile; &#125; public String getEmail() &#123; return email; &#125; public void setEmail(String email) &#123; this.email = email; &#125; public String getPosition() &#123; return position; &#125; public void setPosition(String position) &#123; this.position = position; &#125; public String getNote() &#123; return note; &#125; public void setNote(String note) &#123; this.note = note; &#125; public WorkCard getWorkCard() &#123; return workCard; &#125; public void setWorkCard(WorkCard workCard) &#123; this.workCard = workCard; &#125; public List&lt;EmployeeTask&gt; getEmployeeTaskList() &#123; return employeeTaskList; &#125; public void setEmployeeTaskList(List&lt;EmployeeTask&gt; employeeTaskList) &#123; this.employeeTaskList = employeeTaskList; &#125; @Override public String toString() &#123; return \"Employee&#123;\" + \"id=\" + id + \", realName='\" + realName + '\\'' + \", sex=\" + sex + \", birthday=\" + birthday + \", mobile='\" + mobile + '\\'' + \", email='\" + email + '\\'' + \", position='\" + position + '\\'' + \", note='\" + note + '\\'' + \", workCard=\" + workCard + \", employeeTaskList=\" + employeeTaskList + '&#125;'; &#125;&#125; MaleEmployee.java 123456789101112131415161718package com.ssm.pojo;/** * 男雇员实体类 */public class MaleEmployee extends Employee &#123; private MaleHealthForm maleHealthForm = null; public MaleHealthForm getMaleHealthForm() &#123; return maleHealthForm; &#125; public void setMaleHealthForm(MaleHealthForm maleHealthForm) &#123; this.maleHealthForm = maleHealthForm; &#125;&#125; FemaleEmployee.java 123456789101112131415161718package com.ssm.pojo;/** * 女雇员实体类 */public class FemaleEmployee extends Employee &#123; private FemaleHealthForm femaleHealthForm = null; public FemaleHealthForm getFemaleHealthForm() &#123; return femaleHealthForm; &#125; public void setFemaleHealthForm(FemaleHealthForm femaleHealthForm) &#123; this.femaleHealthForm = femaleHealthForm; &#125;&#125; 配置映射文件Mapper * 数据库文件和日志文件 jdbc.properties 1234database.driver=com.mysql.jdbc.Driverdatabase.url=jdbc:mysql://localhost:3306/employeedatabase.username=rootdatabase.password=123456 log4j.properties 12345log4j.rootLogger=DEBUG , stdoutlog4j.logger.org.mybatis=DEBUGlog4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=%5p %d %C: %m%n mybatis_config.xml 123456789101112131415161718192021222324252627&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;&lt;configuration&gt; &lt;properties resource=\"jdbc.properties\" /&gt; &lt;typeAliases&gt; &lt;package name=\"com.ssm.pojo\"/&gt; &lt;/typeAliases&gt; &lt;environments default=\"development\"&gt; &lt;environment id=\"development\"&gt; &lt;transactionManager type=\"JDBC\"&gt;&lt;/transactionManager&gt; &lt;dataSource type=\"POOLED\"&gt; &lt;property name=\"driver\" value=\"$&#123;database.driver&#125;\"/&gt; &lt;property name=\"url\" value=\"$&#123;database.url&#125;\"/&gt; &lt;property name=\"username\" value=\"$&#123;database.username&#125;\"/&gt; &lt;property name=\"password\" value=\"$&#123;database.password&#125;\"/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;package name=\"com.ssm.mapper\"/&gt; &lt;/mappers&gt;&lt;/configuration&gt; 实体类映射文件和接口 TaskMapper.java 123456789package com.ssm.mapper;import com.ssm.pojo.Task;import java.util.List;public interface TaskMapper &#123; public Task selTask(Long id);&#125; TaskMapper.xml 12345678910&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"com.ssm.mapper.TaskMapper\"&gt; &lt;select id=\"selTask\" parameterType=\"long\" resultType=\"task\"&gt; select id,title,context,note from t_task where id = #&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt; WorkCardMapper.java 123456789package com.ssm.mapper;import com.ssm.pojo.WorkCard;import java.util.List;public interface WorkCardMapper &#123; public WorkCard selWorkCardByEmpId(Long empid);&#125; WorkCardMapper.xml 12345678910&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"com.ssm.mapper.WorkCardMapper\"&gt; &lt;select id=\"selWorkCardByEmpId\" parameterType=\"long\" resultType=\"workCard\"&gt; select id,emp_id as empid,real_name as realName,department,mobile,position,note from t_work_card where emp_id = #&#123;empid&#125; &lt;/select&gt;&lt;/mapper&gt; EmployeeTaskMapper.java 123456789package com.ssm.mapper;import com.ssm.pojo.EmployeeTask;import java.util.List;public interface EmployeeTaskMapper &#123; public EmployeeTask selEmployeeTaskByEmpId(Long empId);&#125; EmployeeTaskMapper.xml 123456789101112131415161718&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"com.ssm.mapper.EmployeeTaskMapper\"&gt; &lt;resultMap id=\"EmployeeTaskMap\" type=\"com.ssm.pojo.EmployeeTask\"&gt; &lt;id property=\"empId\" column=\"emp_id\"&gt;&lt;/id&gt; &lt;result property=\"taskName\" column=\"task_name\"&gt;&lt;/result&gt; &lt;result property=\"note\" column=\"note\"&gt;&lt;/result&gt; &lt;!--雇员任务表一对一级联--&gt; &lt;association property=\"task\" column=\"task_id\" select=\"com.ssm.mapper.TaskMapper.selTask\"/&gt; &lt;/resultMap&gt; &lt;select id=\"selEmployeeTaskByEmpId\" parameterType=\"long\" resultMap=\"EmployeeTaskMap\"&gt; select id,emp_id,task_name,note,task_id from t_employee_task where emp_id = #&#123;empId&#125; &lt;/select&gt;&lt;/mapper&gt; MaleHealthFormMapper.java 123456789package com.ssm.mapper;import com.ssm.pojo.MaleHealthForm;import java.util.List;public interface MaleHealthFormMapper &#123; public MaleHealthForm selMaleHealthForm(Long id);&#125; MaleHealthFormMapper.xml 12345678910&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"com.ssm.mapper.MaleHealthFormMapper\"&gt; &lt;select id=\"selMaleHealthForm\" parameterType=\"long\" resultType=\"maleHealthForm\"&gt; select id,emp_id as empId,heart,liver,spleen,lung,kidney,prostate,note from t_male_health_form where emp_id = #&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt; FemaleHealthFormMapper.java 12345678package com.ssm.mapper;import com.ssm.pojo.FemaleHealthForm;public interface FemaleHealthFormMapper &#123; public FemaleHealthForm selFemaleHealthForm(Long id);&#125; FemaleHealthFormMapper.xml 12345678910&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"com.ssm.mapper.FemaleHealthFormMapper\"&gt; &lt;select id=\"selFemaleHealthForm\" parameterType=\"long\" resultType=\"femaleHealthForm\"&gt; select id,emp_id as empId,heart,liver,spleen,lung,kidney,uterus,note from t_female_health_form where emp_id = #&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt; EmployeeMapper.java 12345678package com.ssm.mapper;import com.ssm.pojo.Employee;public interface EmployeeMapper &#123; public Employee selEmployee(Long id);&#125; EmployeeMapper.xml 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"com.ssm.mapper.EmployeeMapper\"&gt; &lt;resultMap id=\"employee\" type=\"com.ssm.pojo.Employee\"&gt; &lt;id property=\"id\" column=\"id\"/&gt; &lt;result property=\"realName\" column=\"real_name\"/&gt; &lt;result property=\"sex\" column=\"sex\" typeHandler=\"com.ssm.typeHandler.SexTypeHandler\"/&gt; &lt;result property=\"birthday\" column=\"birthday\"/&gt; &lt;result property=\"mobile\" column=\"mobile\"/&gt; &lt;result property=\"email\" column=\"email\"/&gt; &lt;result property=\"position\" column=\"position\"/&gt; &lt;result property=\"note\" column=\"note\"/&gt; &lt;!--工牌表一对一级联--&gt; &lt;association property=\"workCard\" column=\"id\" select=\"com.ssm.mapper.WorkCardMapper.selWorkCardByEmpId\"/&gt; &lt;!--雇员任务，一对多级联--&gt; &lt;collection property=\"employeeTaskList\" column=\"id\" select=\"com.ssm.mapper.EmployeeTaskMapper.selEmployeeTaskByEmpId\"/&gt; &lt;!--鉴别器--&gt; &lt;discriminator javaType=\"long\" column=\"sex\"&gt; &lt;case value=\"1\" resultMap=\"maleHealthFormMapper\"/&gt; &lt;case value=\"0\" resultMap=\"femaleHealthFormMapper\"/&gt; &lt;/discriminator&gt; &lt;/resultMap&gt; &lt;resultMap id=\"maleHealthFormMapper\" type=\"com.ssm.pojo.MaleEmployee\" extends=\"employee\"&gt; &lt;association property=\"maleHealthForm\" column=\"id\" select=\"com.ssm.mapper.MaleHealthFormMapper.selMaleHealthForm\"/&gt; &lt;/resultMap&gt; &lt;resultMap id=\"femaleHealthFormMapper\" type=\"com.ssm.pojo.FemaleEmployee\" extends=\"employee\"&gt; &lt;association property=\"femaleHealthForm\" column=\"id\" select=\"com.ssm.mapper.FemaleHealthFormMapper.selFemaleHealthForm\"/&gt; &lt;/resultMap&gt; &lt;select id=\"selEmployee\" parameterType=\"long\" resultMap=\"employee\"&gt; select id, real_name as realName, sex, birthday, mobile, email, position,note from t_employee where id = #&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt; 测试类 EmployeeTest.java 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package com.ssm.test;import com.ssm.mapper.EmployeeMapper;import com.ssm.mapper.FemaleHealthFormMapper;import com.ssm.mapper.MaleHealthFormMapper;import com.ssm.pojo.*;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.apache.log4j.Logger;import java.io.InputStream;public class EmployeeTest &#123; public static void main(String[] args) &#123; selEmployee(); &#125; public static void selEmployee()&#123; SqlSession session = null; Logger logger = Logger.getLogger(EmployeeTask.class); try&#123; InputStream is = Resources.getResourceAsStream(\"mybatis-config.xml\"); SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(is); session = factory.openSession(); EmployeeMapper employeeMapper = session.getMapper(EmployeeMapper.class); Employee employee = employeeMapper.selEmployee(3L); System.out.println(\"员工基本信息：\"+employee.toString()); if ((employee.getSex().toString()).equals(\"MALE\"))&#123; MaleHealthFormMapper maleHealthFormMapper = session.getMapper(MaleHealthFormMapper.class); MaleHealthForm maleHealthForm = maleHealthFormMapper.selMaleHealthForm(employee.getId()); System.out.println(\"员工体检：\"+maleHealthForm.toString()); &#125;else if ((employee.getSex().toString()).equals(\"FEMALE\"))&#123; FemaleHealthFormMapper femaleHealthFormMapper = session.getMapper(FemaleHealthFormMapper.class); FemaleHealthForm femaleHealthForm = femaleHealthFormMapper.selFemaleHealthForm(employee.getId()); System.out.println(\"员工体检：\"+femaleHealthForm.toString()); &#125; session.commit(); &#125;catch (Exception e)&#123; e.printStackTrace(); &#125;finally &#123; if(session != null)&#123; session.close(); &#125; &#125; &#125;&#125; 测试结果 12员工基本信息：Employee&#123;id=3, realName='employee_3', sex=FEMALE, birthday=Sun Feb 20 00:00:00 CST 2000, mobile='18773443555', email='employee_3@.com', position='Programmer', note='小徐', workCard=WorkCard&#123;id=3, empId=3, realName='employee_3', department='Tech-Dept', mobile='employee_3@.com', position='Programmer', note='小徐'&#125;, employeeTaskList=[EmployeeTask&#123;id=3, empId=3, task=Task&#123;id=1, title='前端', context='HTML+CSS+JS+JQuery+Bootstrap+Ajax', note='前端开发'&#125;, taskName='前端开发', note='前端'&#125;]&#125;员工体检：HealthForm&#123;id=1, empId=3, heart='normal', liver='normal', spleen='normal', lung='normal', kidney='normal', note='***医院'&#125; 注意 特别注意 EmployeeMapper.xml 的映射文件 association元素：对工牌进行一对一级联，其select元素指向SQL，将通过column的id作为参数进行传递，然后将结果返回给雇员POJO的属性workCard。 collection元素：一对多级联，其select元素指向SQL，将通过column的id作为参数进行传递，然后将结果返回给雇员POJO的属性employeeTaskList。 discrimination元素：鉴别器，它的属性column的值代表使用哪个字段进行鉴别，这里的是sex，而它的子元素case，则用于进行区分，类似于java中的switch…case…语句。而resultMap属性表示采用哪个ResultMap去映射，比如sex=1，则使用maleHealthFormMap进行映射。","categories":[{"name":"框架","slug":"框架","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"},{"name":"SSM","slug":"框架/SSM","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/SSM/"},{"name":"Mybatis","slug":"框架/SSM/Mybatis","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/SSM/Mybatis/"}],"tags":[{"name":"Mybatis","slug":"Mybatis","permalink":"http://yoursite.com/tags/Mybatis/"},{"name":"SSM","slug":"SSM","permalink":"http://yoursite.com/tags/SSM/"}],"keywords":[{"name":"框架","slug":"框架","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"},{"name":"SSM","slug":"框架/SSM","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/SSM/"},{"name":"Mybatis","slug":"框架/SSM/Mybatis","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/SSM/Mybatis/"}]},{"title":"Linux文件与目录结构","slug":"Linux文件与目录结构","date":"2020-05-01T15:40:06.000Z","updated":"2020-05-01T15:40:49.200Z","comments":true,"path":"2020/05/01/Linux文件与目录结构/","link":"","permalink":"http://yoursite.com/2020/05/01/Linux%E6%96%87%E4%BB%B6%E4%B8%8E%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/","excerpt":"","text":"Linux文件与目录结构 Linux文件 Linux系统中一切皆文件。 Linux目录结构 1.安装tree命令 系统中默认没有tree这个命令的，需要安装 安装命令： 1yum install tree Ubuntu系统安装命令： 1sudo apt-get install tree 2.tree命令 输入命令： 1tree --help 查看命令使用方式： 3.使用命令tree查看 1.使用cd /进入&quot;/“目录 输入tree命令 将会显示”/&quot;下所有的目录和文件（文件太多了 不好截图） 2.使用 1tree -L 数字 显示你想要的目录层次结构 例如：tree -L 1 1tree -L 2 或者使用ls /命令查看： OK 进入正题 Linux的目录结构 树状结构： Linux目录结构简介 在 Linux 系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。 /etc： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。 /bin, /sbin, /usr/bin, /usr/sbin: 这是系统预设的执行文件的放置目录，比如 ls 就是在/bin/ls 目录下的。 值得提出的是，/bin, /usr/bin 是给系统用户使用的指令（除root外的通用户），而/sbin, /usr/sbin 则是给root使用的指令。 /var： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在/var/log 目录下，另外mail的预设放置也是在这里。 这里介绍的更加详细–&gt;&gt;","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}],"keywords":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}]},{"title":"vi和vim的基本介绍","slug":"vi和vim的基本介绍","date":"2020-05-01T15:27:06.000Z","updated":"2020-05-01T15:33:05.571Z","comments":true,"path":"2020/05/01/vi和vim的基本介绍/","link":"","permalink":"http://yoursite.com/2020/05/01/vi%E5%92%8Cvim%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/","excerpt":"","text":"vi和vim的基本介绍 是什么 VI 是Unix操作系统和类Unix操作系统中最通用的文本编译器。 VIM 编译器是从VI 编译器发展出来一个性能更强大的文本编译器，可以主动的以字体颜色辨别语法的正确性，方便程序设计。 Vim的安装 centos系统： 普通用户下输入命令：yum -y install vim* ubuntu系统： 普通用户下输入命令：sudo apt-get install vim-gtk 之后输入y，即可等待安装完成。 输入： 1[root@localhost ~]# vim 显示 安装成功！！ VIM Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。 vim键盘图： VI/Vim常用的三种模式 基本上 vi/vim 共分为三种模式，分别是命令模式（Command mode），编辑模式（Edit mode）和指令模式（Instruction mode）。 这三种模式的作用分别是： 命令模式： 以 VI/Vim 打开一个文件就直接进入一般模式 了（默认的模式），在该模式中可以使用『上下左右』按键来移动光标，也可以使用『删除字符（x/X)』和『删除整行（dd）』处理文本内容，同样也可以『复制（yy）』『粘贴（p）』『撤销上一步（u）』来处理你的文件数据。 在命令模式中，输入『 : / ?』3个中的任何一个按钮，就可以将光标移动到最底下那一行。 语法 功能描述 yy 复制光标当前一行 y数字y 复制一段（从第几行到第几行） p 箭头移动到目的行粘贴 u 撤销上一步 dd 删除光标当前行 d数字d 删除光标（含）后多少行 x 删除一个字母，相当于del，向后删 X 删除一个字母，相当于Backspace，向前删 yw 复制一个词 dw 删除一个词 shift+^ 移动到行头 shift+$ 移动到行尾 gg或者1+G 移动到页头 G 移动到页尾 数字+G （先输入数字，在按G） 移动到目标行 编辑模式： 在一般模式中可以进行删除、复制、粘贴等的动作，但是无法编辑文件内容！要等到你按下『i, I, o, O, a, A, r, R』等任何一个字母之后才会进入编辑模式。 注意了！通常在Linux中，按下这些按键时，在画面的左下方会出现『INSERT或 REPLACE』的字样，此时才可以进行编辑。而如果要回到一般模式时， 则必须要按下『Esc』这个按键即可退出编辑模式。 进入编辑模式： 按键 功能 i 当前光标前 a 当前光标后 o 当前光标行的下一行 I 光标所在行最前 A 光标所在行最后 O 当前光标行的上一行 退出编辑模式： 按『Esc』键 指令模式： 在这个模式当中， 可以提供你『搜寻资料』的动作，而读取、存盘、大量取代字符、离开 vi 、显示行号等动作是在此模式中达成的！ 命令 功能 :w 保存文件 :q 退出执行 :! 强制执行 / 要查找的词 n 查找下一个，N 往上查找 ? 要查找的词 n是查找上一个，N是往下查找 :set nu 显示行号 :set nonu 关闭行号 ZZ（shift+zz） 没有修改文件直接退出，如果修改了文件保存后退出 强制保存并退出： ：wq! 模式之间的转换","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"},{"name":"编辑器","slug":"Linux/编辑器","permalink":"http://yoursite.com/categories/Linux/%E7%BC%96%E8%BE%91%E5%99%A8/"},{"name":"Vim","slug":"Linux/编辑器/Vim","permalink":"http://yoursite.com/categories/Linux/%E7%BC%96%E8%BE%91%E5%99%A8/Vim/"}],"tags":[{"name":"Liunx","slug":"Liunx","permalink":"http://yoursite.com/tags/Liunx/"},{"name":"编辑器","slug":"编辑器","permalink":"http://yoursite.com/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"},{"name":"Vim","slug":"Vim","permalink":"http://yoursite.com/tags/Vim/"}],"keywords":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"},{"name":"编辑器","slug":"Linux/编辑器","permalink":"http://yoursite.com/categories/Linux/%E7%BC%96%E8%BE%91%E5%99%A8/"},{"name":"Vim","slug":"Linux/编辑器/Vim","permalink":"http://yoursite.com/categories/Linux/%E7%BC%96%E8%BE%91%E5%99%A8/Vim/"}]},{"title":"虚拟机克隆","slug":"虚拟机克隆","date":"2020-05-01T15:20:24.000Z","updated":"2020-05-01T15:24:37.062Z","comments":true,"path":"2020/05/01/虚拟机克隆/","link":"","permalink":"http://yoursite.com/2020/05/01/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%85%8B%E9%9A%86/","excerpt":"","text":"虚拟机克隆 1.关闭要被克隆的虚拟机 12[root@localhost ~]# sync[root@localhost ~]# shutdown -h now 2.右击找到克隆选项 3.欢迎界面 4.选择当前状态 5.注意选择创建完整克隆(F) 6.命名虚拟机名称/自定义目录 7.正在克隆 8.创建成功/点击关闭 9.修改克隆后虚拟机的IP 1[root@localhost ~]# vim /etc/udev/rules.d/70-persistent-net.rules 进入如下界面，删除eth0行（删除整行命令：d）； 将eth1修改为eth0.同时复制物理IP地址，如下图所示： 查看是否修改成功： 1[root@localhost ~]# cat /etc/udev/rules.d/70-persistent-net.rules 修改成功！ 10.修改 IP 地址 1[root@localhost ~]# vim /etc/sysconfig/network-scripts/ifcfg-eth0 （1）把复制的物理ip地址更新 HWADDR=00:0c:29:4e:cf:72 #MAC地址 （2）修改成你想要的ip IPADDR=192.168.26.131 #IP地址 11.修改主机名称（可不修改） （1）查看当前服务器主机名称： 1[root@localhost ~]# hostname （2）如果感觉此主机名不合适，我们可以进行修改。通过编辑/etc/sysconfig/network文件 1[root@localhost ~]# vim /etc/sysconfig/network 注意：主机名称不要有“_”下划线 （3）打开此文件后，可以看到主机名。 （4）保存退出。 12.重新启动服务器 1[root@localhost etc]# service network restart 重启成功 重启失败 错误：激活连接失败：The connection is not for this device. 如果报错，reboot，重启虚拟机","categories":[{"name":"虚拟机","slug":"虚拟机","permalink":"http://yoursite.com/categories/%E8%99%9A%E6%8B%9F%E6%9C%BA/"}],"tags":[{"name":"虚拟机","slug":"虚拟机","permalink":"http://yoursite.com/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"}],"keywords":[{"name":"虚拟机","slug":"虚拟机","permalink":"http://yoursite.com/categories/%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"Ubuntu--配置静态IP","slug":"Ubuntu-配置静态IP","date":"2020-05-01T15:16:52.000Z","updated":"2020-05-01T15:18:28.060Z","comments":true,"path":"2020/05/01/Ubuntu-配置静态IP/","link":"","permalink":"http://yoursite.com/2020/05/01/Ubuntu-%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81IP/","excerpt":"","text":"Ubuntu–配置静态IP 1.进入root 1coffeecode@hadoop135:~$ su - 输入密码–进入root用户 2.先停止Network-manager的服务 1sudo service network-manager stop 3.修改/etc/network/interfaces配置文件 1sudo vi &#x2F;etc&#x2F;network&#x2F;interfaces 在文件中加入下面内容： 12345678910auto ens33iface ens33 inet static# IP地址--根据你自己定义address 192.168.26.135# 子网掩码netmask 255.255.255.0# 网关gateway 192.168.26.2# DNS--和网关一样dns-nameservers 192.168.26.2 怎么查看该虚拟机的网关 1.编辑–虚拟网络编辑器（N） 2.打开NAT设置 3.查看网关 4.修改完成 5. 重启网络： 1&#x2F;etc&#x2F;init.d&#x2F;networking restart 重启网络失败： 重启系统： 1reboot 6.测试配置是否成功 查看cat /etc/resolv.conf文件中是否已经添加DNS 7.测试网络连接情况 1ifconfig 1ping www.baidu.com 配置成功！","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"},{"name":"网络配置","slug":"Linux/网络配置","permalink":"http://yoursite.com/categories/Linux/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"},{"name":"网络配置","slug":"网络配置","permalink":"http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"}],"keywords":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"},{"name":"网络配置","slug":"Linux/网络配置","permalink":"http://yoursite.com/categories/Linux/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"}]},{"title":"Rational Rose Enterprise","slug":"Rational-Rose-Enterprise","date":"2020-05-01T15:09:44.000Z","updated":"2020-05-01T15:11:39.236Z","comments":true,"path":"2020/05/01/Rational-Rose-Enterprise/","link":"","permalink":"http://yoursite.com/2020/05/01/Rational-Rose-Enterprise/","excerpt":"","text":"下载Rational Rose Enterprise 下载链接: https://pan.baidu.com/s/152l2OMioSsh7QqcIXVI7Lg 提取码: pkj1 复制这段内容后打开百度网盘手机App，操作更方便哦 安装 1. 解压压缩包 2. 找到解压文件 双击EXE文件进行安装 3. 选择安装程序对应的系统 我这里是windows系统 4. 点击 next 进行安装 5. 点击 下一步 6. 选择安装类型 RationalRoseEnterpriseEdition 是ROSE编辑器 7. 选择第二个 8. 点击 next -&gt; next 9. 选择 I accept 10. next - &gt; next 默认第一个： 11. Install 12. 点击第二个 Import a Rational License File 14. 选择目录 找到： Rational Rose Enterprise 8.5.0506\\Crack\\license.upd文件 import： import： 15. 激活成功 发现激活有点问题：激活截止日期为 06-jan-2020 16. 确认是否激活 双击 激活失败： 解决办法 ---- 修改系统时间 右击任务栏时间部位 修改日期 激活成功 双击 激活成功","categories":[{"name":"项目工具","slug":"项目工具","permalink":"http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"}],"keywords":[{"name":"项目工具","slug":"项目工具","permalink":"http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/"}]},{"title":"Shell编程","slug":"Shell编程","date":"2020-05-01T10:20:37.000Z","updated":"2020-05-01T10:23:11.270Z","comments":true,"path":"2020/05/01/Shell编程/","link":"","permalink":"http://yoursite.com/2020/05/01/Shell%E7%BC%96%E7%A8%8B/","excerpt":"","text":"1. 统计根分区使用率使用if 12345678910111213#!/bin/bash#统计根分区使用率rate=$(df -h | grep sda1 | awk '&#123;print $5&#125;' | cut -d \"%\" -f1)if [ $rate -ge 80 ] #判断rate的值，如果大于等于80,则执行then程序 then echo \"使用率达到80%！！！\" #打印警告信息 else echo \"使用率：$rate.\"fi 2.使用多分支把输出内容分别输出1号文件和2号文件 12345678910111213#!/bin/bash#统计根分区使用率rate=$(df -h | grep sda1 | awk '&#123;print $5&#125;' | cut -d \"%\" -f1)if [ $rate -ge 80 ] #判断rate的值，如果大于等于80,则执行then程序 then echo \"使用率达到80%！！！\" &gt;&gt; caveat.txt #打印警告信息 else echo \"使用率：$rate.\" &gt;&gt; normal.txtfi 4.判断用户输入的是什么文件？ 123456789101112131415161718192021222324#!/bin/bash#判断文件类型read -p \"请你输入文件名：\" file#判断file变量是否为空if [ -z \"file\" ] then echo \"错误，请重新输入。\" exit 1#判断文件是否存在elif [ ! -e \"$file\" ] then echo \"没有找到该文件！\" exit 2elif [ -f \"$file\" ] then echo \"$file 是文件。\"elif [ -d \"$file\" ] then echo \"$file 是目录。\"else echo \"$file 是其他类型的文件。\"fi 5.全局命令 地址：/usr/local/bin/xcall.sh 12345678#!/bin/bashparams=$@i=141for (( i=141; i &lt;= 143 ; i = $i + 1 )) ; do echo ============= hadoop$i $params ============= ssh hadoop$i \"$params\"done 实例： 12345678[root@hadoop142 bin]# xcall.sh jps============= hadoop141 jps =============5388 Jps============= hadoop142 jps =============12996 Jps============= hadoop143 jps =============14881 JpsYou have new mail in /var/spool/mail/root 6.全局分发 地址：/opt/module/xrsync.sh 12345678910111213141516171819202122232425#!/bin/bash#1 获取输入参数个数，如果没有参数，直接退出pcount=$#if ((pcount==0)); thenecho no args;exit;fi#2 获取文件名称p1=$1fname=`basename $p1`echo fname=$fname#3 获取上级目录的对路径pdir=`cd -P $(dirname $p1); pwd`echo pdir=$pdir#4 获取当前用户名称user=`whoami`#5 循环for((host=141; host&lt;143; host++)); do echo ------------------- hadoop$host -------------- rsync -av $pdir/$fname $user@hadoop$host:$pdirdone 7.启动zookeeper 12345678910111213141516171819202122232425262728#!/bin/basharg=$#if((arg==0));thenecho no args;exit;ficase $1 in\"start\")&#123; for i in hadoop141 hadoop142 hadoop143 do ssh $i \"$ZOOKEEPER_HOME/bin/zkServer.sh start\" done&#125;;;\"stop\")&#123; for i in hadoop141 hadoop142 hadoop143 do ssh $i \"$ZOOKEEPER_HOME/bin/zkServer.sh stop\" done&#125;;;\"status\")&#123; for i in hadoop141 hadoop142 hadoop143 do ssh $i \"$ZOOKEEPER_HOME/bin/zkServer.sh status\" done&#125;;; esac","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}],"keywords":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}]},{"title":"Python3 标准数据类型","slug":"Python3 标准数据类型","date":"2020-05-01T07:58:31.774Z","updated":"2020-05-01T08:40:49.393Z","comments":true,"path":"2020/05/01/Python3 标准数据类型/","link":"","permalink":"http://yoursite.com/2020/05/01/Python3%20%E6%A0%87%E5%87%86%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","excerpt":"","text":"Python3 标准数据类型 五种标准数据类型： 数字 – Numbers 字符串 – String 列表 – List 元组 – Tuple 集合 – Sets 字典 – Dictionary 数字–Numbers 数字包括：整数、长整数、浮点数、复数外加Boolean（true、false）型。 整数（int）：1、2、3、4 … 长整数（ 2.2以前）：能够表示很长的整数，根据整数的长度分配大小。 — 长整型也可以使用小写 l，但是还是建议您使用大写 L，避免与数字 1 混淆。Python使用 L 来显示长整型。 浮点数（float）：1.23、3E-2 复数（complex）：1 + 2j、1.1 + 2.2j 123&gt;&gt;&gt; a, b, c, d = 20, 5.5, True, 4+3j&gt;&gt;&gt; print(type(a), type(b), type(c), type(d))&lt;class 'int'&gt; &lt;class 'float'&gt; &lt;class 'bool'&gt; &lt;class 'complex'&gt; 数值运算： 1234567891011121314&gt;&gt;&gt; 5 + 4 # 加法9&gt;&gt;&gt; 4.3 - 2 # 减法2.3&gt;&gt;&gt; 3 * 7 # 乘法21&gt;&gt;&gt; 2 / 4 # 除法，得到一个浮点数0.5&gt;&gt;&gt; 2 // 4 # 除法，得到一个整数0&gt;&gt;&gt; 17 % 3 # 取余 2&gt;&gt;&gt; 2 ** 5 # 乘方32 注意： 1、Python 可以同时为多过变量赋值： a, b, c, d = 20, 5.5, True, 4+3j； 2、一个变量可以赋值指向不同的数据类型的对象； 3、数值的除法（/）总是返回一个浮点数，要获取整数的话需使用（//）操作符： 12&gt;&gt;&gt; 7//23 4、在混合计算时，Pyhton会把整型转换成为浮点数。 5、long 类型只存在于 Python2.X 版本中，在 2.2 以后的版本中，int 类型数据溢出后会自动转为long类型。在 Python3.X 版本中 long 类型被移除，使用 int 替代。 字符串–String python中单引号和双引号使用完全相同。 使用三引号(’’'或&quot;&quot;&quot;)可以指定一个多行字符串。 转义符 ‘’ 自然字符串， 通过在字符串前加r或R。 如 r&quot;this is a line with \\n&quot; 则\\n会显示，并不是换行。 python允许处理unicode字符串，加前缀u或U， 如 u&quot;this is an unicode string&quot;。 字符串是不可变的。 按字面意义级联字符串，如&quot;this &quot; &quot;is &quot; &quot;string&quot;会被自动转换为this is string。 Python中的字符串str用单引号(’ ')或双引号(&quot; &quot;)括起来，同时使用反斜杠()转义特殊字符。 123&gt;&gt;&gt; s = 'Yes,he doesn\\'t'&gt;&gt;&gt; print(s, type(s), len(s))Yes,he doesn't 14 如果你不想让反斜杠发生转义，可以在字符串前面添加一个r，表示原始字符串： 12345&gt;&gt;&gt; print('C:\\some\\name')C:\\someame&gt;&gt;&gt; print(r'C:\\some\\name')C:\\some\\name 另外，反斜杠可以作为续行符，表示下一行是上一行的延续。还可以使用&quot;&quot;&quot;…&quot;&quot;&quot;或者’’’…’’'跨越多行。 字符串可以使用 + 运算符串连接在一起，或者用 * 运算符重复： 12&gt;&gt;&gt; print('str'+'ing', 'my'*3)string mymymy Python中的字符串有两种索引方式，第一种是从左往右，从0开始依次增加；第二种是从右往左，从-1开始依次减少。 注意，没有单独的字符类型，一个字符就是长度为1的字符串。 12345&gt;&gt;&gt; word = 'Python'&gt;&gt;&gt; print(word[0], word[5])P n&gt;&gt;&gt; print(word[-1], word[-6])n P 还可以对字符串进行切片，获取一段子串。用冒号分隔两个索引，形式为变量**[头下标:尾下标]**。 截取的范围是左闭右开的，并且两个索引都可以省略： 123456789&gt;&gt;&gt; word = 'ilovepython'&gt;&gt;&gt; word[1:5]'love'&gt;&gt;&gt; word[:]'ilovepython'&gt;&gt;&gt; word[5:]'python'&gt;&gt;&gt; word[-10:-6]'love' 与C字符串不同的是，Python字符串不能被改变。向一个索引位置赋值，比如word[0] = 'm’会导致错误。 注意： 1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。 2、字符串可以用+运算符连接在一起，用*运算符重复。 3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。 4、Python中的字符串不能改变。 列表 – List List（列表） 是 Python 中使用最频繁的数据类型 列表是写在方括号之间、用逗号分隔开的元素列表。列表中元素的类型可以不相同： 123&gt;&gt;&gt; a = [\"hello\",2,5980,\"world\"]&gt;&gt;&gt; print(a)['hello', 2, 5980, 'world'] 和字符串一样，列表同样可以被索引和切片，列表被切片后返回一个包含所需元素的新列表。 12345678&gt;&gt;&gt; a = [\"hello\",2,5980,\"world\"]&gt;&gt;&gt; print(a)['hello', 2, 5980, 'world']&gt;&gt;&gt; print(a[3])world&gt;&gt;&gt; print(a[1:3])[2, 5980]&gt;&gt;&gt; 列表还支持串联操作，使用+操作符： 123&gt;&gt;&gt; a = [\"hello\",2,5980,\"world\"]&gt;&gt;&gt; a + [3,5,6,6,34,'fdsf']['hello', 2, 5980, 'world', 3, 5, 6, 6, 34, 'fdsf'] 与Python字符串不一样的是，列表中的元素是可以改变的： 12345678&gt;&gt;&gt; a = [1, 2, 3, 4, 5, 6]&gt;&gt;&gt; a[0] = 9&gt;&gt;&gt; a[2:5] = [13, 14, 15]&gt;&gt;&gt; a[9, 2, 13, 14, 15, 6]&gt;&gt;&gt; a[2:5] = [] # 删除&gt;&gt;&gt; a[9, 2, 6] List内置了有很多方法，例如append()、pop()等等，这在后面会讲到。 注意： 1、List写在方括号之间，元素用逗号隔开。 2、和字符串一样，list可以被索引和切片。 3、List可以使用+操作符进行拼接。 4、List中的元素是可以改变的。 元组 – Tuple 元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号里，元素之间用逗号隔开。 元组中的元素类型也可以不相同： 123&gt;&gt;&gt; tu = (2020,2030,'python')&gt;&gt;&gt; print(tu,type(tu),len(tu))(2020, 2030, 'python') &lt;class 'tuple'&gt; 3 元组与字符串类似，可以被索引且下标索引从0开始，也可以进行截取/切片。 12345&gt;&gt;&gt; tu = (2020,2030,'python')&gt;&gt;&gt; tu[2]'python'&gt;&gt;&gt; tu[0:2](2020, 2030) 其实，可以把字符串看作一种特殊的元组。 1234567&gt;&gt;&gt; tup = (1, 2, 3, 4, 5, 6)&gt;&gt;&gt; print(tup[0], tup[1:5])1 (2, 3, 4, 5)&gt;&gt;&gt; tup[0] = 11 # 修改元组元素的操作是非法的Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;TypeError: 'tuple' object does not support item assignment 虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。 构造包含0个或1个元素的tuple是个特殊的问题，所以有一些额外的语法规则： 123456&gt;&gt;&gt; tu_null = () # 空元组&gt;&gt;&gt; print(tu_null)()&gt;&gt;&gt; tu_one = (20,) # 一个元素，需要在元素后添加逗号&gt;&gt;&gt; tu_one(20,) 另外，元组也支持用+操作符： 123&gt;&gt;&gt; tup1, tup2 = (1, 2, 3), (4, 5, 6)&gt;&gt;&gt; print(tup1+tup2)(1, 2, 3, 4, 5, 6) string、list和tuple都属于sequence（序列）。 注意： 1、与字符串一样，元组的元素不能修改。 2、元组也可以被索引和切片，方法一样。 3、注意构造包含0或1个元素的元组的特殊语法规则。 4、元组也可以使用+操作符进行拼接。 集合 – Sets 集合（set）是一个无序不重复元素的集。 基本功能是进行成员关系测试和消除重复元素。 可以使用大括号 或者 set()函数创建set集合，注意： 创建一个空集合必须用 set() 而不是 { }，因为{ }是用来创建一个空字典。 123456789101112131415161718192021&gt;&gt;&gt; student = &#123;'Tom', 'Jim', 'Mary', 'Tom', 'Jack', 'Rose'&#125;&gt;&gt;&gt; print(student) # 重复的元素被自动去掉&#123;'Mary', 'Rose', 'Jim', 'Tom', 'Jack'&#125;&gt;&gt;&gt; 'Rose' in student # membership testing（成员测试）True&gt;&gt;&gt; # set可以进行集合运算...&gt;&gt;&gt; a = set('abracadabra')&gt;&gt;&gt; a&#123;'r', 'a', 'c', 'd', 'b'&#125;&gt;&gt;&gt; b = set('alacazam')&gt;&gt;&gt; b&#123;'a', 'l', 'm', 'c', 'z'&#125;&gt;&gt;&gt; a - b # a和b的差集&#123;'d', 'r', 'b'&#125;&gt;&gt;&gt; a | b # a和b的并集&#123;'r', 'a', 'l', 'm', 'c', 'd', 'b', 'z'&#125;&gt;&gt;&gt; a &amp; b # a和b的交集&#123;'c', 'a'&#125;&gt;&gt;&gt; a ^ b # a和b的补集-- a和b中不同时存在的元素&#123;'d', 'r', 'b', 'z', 'l', 'm'&#125; 字典 --Dictionary 字典（dictionary）是Python中另一个非常有用的内置数据类型。 字典是一种映射类型（mapping type），它是一个无序的键 : 值对集合。 关键字必须使用不可变类型，也就是说list和包含可变类型的tuple不能做关键字。 在同一个字典中，关键字还必须互不相同 – ** 不重复**。 123456789101112131415161718&gt;&gt;&gt; dic = &#123;&#125; # 创建空字典&gt;&gt;&gt; tel = &#123;'Jack':1557, 'Tom':1320, 'Rose':1886&#125;&gt;&gt;&gt; tel&#123;'Tom': 1320, 'Jack': 1557, 'Rose': 1886&#125;&gt;&gt;&gt; tel['Jack'] # 主要的操作：通过key查询1557&gt;&gt;&gt; del tel['Rose'] # 删除一个键值对&gt;&gt;&gt; tel['Mary'] = 4127 # 添加一个键值对&gt;&gt;&gt; tel&#123;'Tom': 1320, 'Jack': 1557, 'Mary': 4127&#125;&gt;&gt;&gt; list(tel.keys()) # 返回所有key组成的list['Tom', 'Jack', 'Mary']&gt;&gt;&gt; sorted(tel.keys()) # 按key排序['Jack', 'Mary', 'Tom']&gt;&gt;&gt; 'Tom' in tel # 成员测试True&gt;&gt;&gt; 'Mary' not in tel # 成员测试False 构造函数 dict() 直接从键值对sequence中构建字典，当然也可以进行推导，如下： 12345678&gt;&gt;&gt; dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])&#123;'jack': 4098, 'sape': 4139, 'guido': 4127&#125;&gt;&gt;&gt; &#123;x: x**2 for x in (2, 4, 6)&#125;&#123;2: 4, 4: 16, 6: 36&#125;&gt;&gt;&gt; dict(sape=4139, guido=4127, jack=4098)&#123;'jack': 4098, 'sape': 4139, 'guido': 4127&#125; 另外，字典类型也有一些内置的函数，例如clear()、keys()、values()等。 注意： 1、字典是一种映射类型，它的元素是键值对。 2、字典的关键字必须为不可变类型，且不能重复。 3、创建空字典使用{ }。","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}]},{"title":"Python3 基础语法","slug":"Python3 基础语法","date":"2020-05-01T07:57:38.464Z","updated":"2020-05-01T08:40:49.412Z","comments":true,"path":"2020/05/01/Python3 基础语法/","link":"","permalink":"http://yoursite.com/2020/05/01/Python3%20%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/","excerpt":"","text":"Python3 基础语法 Python3 基础语法 编码 默认情况下，Python 3 源码文件以 UTF-8 编码，所有字符串但是 nuicode 字符串。 你也可以为源码文件指定不同的编码： 1# -*- coding: cp-1252 -*- 标识符 标识符由字母、数字、下划线 ’_‘ 组成； 不能以数字开头，第一个字符必须是字母或者下划线 ‘_’； 标识符区分大小写。 在Python3中，非-ASCII （* [^\\x00-\\x7f] *）标识符也是允许的。 Python 可以同一行显示多条语句，方法是用分号* ;* 分开，如： 123&gt;&gt;&gt; print ('hello');print ('runoob');hellorunoob Python保留字 保留字即关键字，不能用于标识符名称。 Python 的标止库提供了一个 keyword module，可以输出当前版本所有的关键字。 123&gt;&gt;&gt; import keyword&gt;&gt;&gt; keyword.kwlist['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'] 注释 单行注释： 12#单行注释print(\"hello world\") 多行注释-三个单引号（’’’）： 123456'''多行注释多行注释多行注释'''print(\"hello world\") 多行注释-三个双引号（”“”）： 123456\"\"\"多行注释多行注释多行注释\"\"\"print(\"hello world\") 行与缩进 python最具特色的就是使用缩进来表示代码块。缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。 实例: 1234if True: print (\"True\")else: print (\"False\")","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}]},{"title":"Python安装","slug":"Python3 安装","date":"2020-05-01T06:59:32.256Z","updated":"2020-05-01T08:40:49.419Z","comments":true,"path":"2020/05/01/Python3 安装/","link":"","permalink":"http://yoursite.com/2020/05/01/Python3%20%E5%AE%89%E8%A3%85/","excerpt":"","text":"Python安装 Python下载 Python最新源码，二进制文档，新闻资讯等可以在Python的官网查看到： Python官网：https://www.python.org/ 你可以在以下链接中下载 Python 的文档，你可以下载 HTML、PDF 和 PostScript 等格式的文档。 Python文档下载地址：https://www.python.org/doc/ Python安装 ython已经被移植在许多平台上（经过改动使它能够工作在不同平台上）。 您需要下载适用于您使用平台的二进制代码，然后安装Python。 如果您平台的二进制代码是不可用的，你需要使用C编译器手动编译源代码。 编译的源代码，功能上有更多的选择性， 为python安装提供了更多的灵活性。 以下是使用Window访问官网的下载地址：https://www.python.org/downloads/ 以下为不同平台上安装 Python 的方法： Unix &amp; Linux 平台安装 Python: 以下为在 Unix &amp; Linux 平台上安装 Python 的简单步骤： 打开 WEB 浏览器访问https://www.python.org/downloads/source/ 选择适用 于Unix/Linux 的源码压缩包。(例如: 下载 Python 3.7.7版源码包) Python-3.7.7.tgz 下载及解压压缩包。(tar -xzvf 包名 解压地址) 如果你需要自定义一些选项修改Modules/Setup 执行 ./configure 脚本 make make install 执行以上操作后，Python 会安装在 /usr/local/bin 目录中，Python 库安装在 /usr/local/lib/pythonXX，XX 为你使用的 Python 的版本号。 Window 平台安装 Python: 以下为在 Window 平台上安装 Python 的简单步骤： 打开 WEB 浏览器访问https://www.python.org/downloads/windows/ 在下载列表中选择Window平台安装包，包格式为：python-XYZ.exe 文件 ， XYZ 为你要安装的版本号。 下载后，双击下载包，进入 Python 安装向导，安装非常简单，你只需要使用默认的设置一直点击&quot;下一步&quot;直到安装完成即可。 MAC 平台安装 Python: MAC 系统一般都自带有 Python2.x版本 的环境，你也可以在链接 https://www.python.org/downloads/mac-osx/ 上下载最新版安装。","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}]},{"title":"python3教程","slug":"Python3 教程","date":"2020-05-01T03:16:02.765Z","updated":"2020-05-01T08:40:49.415Z","comments":true,"path":"2020/05/01/Python3 教程/","link":"","permalink":"http://yoursite.com/2020/05/01/Python3%20%E6%95%99%E7%A8%8B/","excerpt":"","text":"python3教程 Python的3.0版本，常被称为Python 3000，或简称Py3k。相对于Python的早期版本，这是一个较大的升级。为了不带入过多的累赘，Python 3.0在设计的时候没有考虑向下兼容。 查看python3版本 1python --version 显示版本： 1Python 3.7.5 第一个python程序 1print(\"Hlello,World!\") 输出： 1Hlello,World! 脚本式编程 通过脚本参数调用解释器开始执行脚本，直到脚本执行完毕。当脚本执行完成后，解释器不再有效。 让我们写一个简单的 Python 脚本程序。所有 Python 文件将以 .py 为扩展名。将以下的源代码拷贝至 test.py 文件中。 1print(\"Hlello,World!\") 这里，假设你已经设置了 Python 解释器 PATH 变量。使用以下命令运行程序： 1$ python test.py 输出结果： 1Hlello,World! Linux系统下 让我们尝试另一种方式来执行 Python 脚本。修改 test.py 文件，如下所示： 123#!/usr/bin/pythonprint (\"Hlello,World!\") 这里，假定您的Python解释器在/usr/bin目录中，使用以下命令执行脚本： 12chmod +x test.py # 脚本文件添加可执行权限./test.py #运行脚本 输出结果： 1Hello,World!","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}]}]}