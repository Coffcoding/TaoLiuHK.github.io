{"meta":{"title":"COFFEECODE","subtitle":"","description":"","author":"John Doe","url":"http://yoursite.com"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2020-05-01T05:55:46.977Z","updated":"2020-05-01T05:55:46.977Z","comments":false,"path":"/404.html","permalink":"http://yoursite.com/404.html","excerpt":"","text":""},{"title":"书单","date":"2020-05-01T09:40:01.965Z","updated":"2020-05-01T09:40:01.965Z","comments":false,"path":"books/index.html","permalink":"http://yoursite.com/books/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-05-01T05:55:46.978Z","updated":"2020-05-01T05:55:46.978Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"分类","date":"2020-05-01T05:55:46.978Z","updated":"2020-05-01T05:55:46.978Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"gallery","date":"2020-05-01T05:40:35.000Z","updated":"2020-05-01T05:40:35.574Z","comments":true,"path":"gallery/index.html","permalink":"http://yoursite.com/gallery/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-05-01T05:55:46.979Z","updated":"2020-05-01T05:55:46.979Z","comments":true,"path":"links/index.html","permalink":"http://yoursite.com/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-05-01T05:55:46.979Z","updated":"2020-05-01T05:55:46.979Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-05-01T05:55:46.979Z","updated":"2020-05-01T05:55:46.979Z","comments":false,"path":"repository/index.html","permalink":"http://yoursite.com/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"Shell编程","slug":"Shell编程","date":"2020-05-01T10:20:37.000Z","updated":"2020-05-01T10:23:11.270Z","comments":true,"path":"2020/05/01/Shell编程/","link":"","permalink":"http://yoursite.com/2020/05/01/Shell%E7%BC%96%E7%A8%8B/","excerpt":"","text":"1. 统计根分区使用率使用if 12345678910111213#!/bin/bash#统计根分区使用率rate=$(df -h | grep sda1 | awk '&#123;print $5&#125;' | cut -d \"%\" -f1)if [ $rate -ge 80 ] #判断rate的值，如果大于等于80,则执行then程序 then echo \"使用率达到80%！！！\" #打印警告信息 else echo \"使用率：$rate.\"fi 2.使用多分支把输出内容分别输出1号文件和2号文件 12345678910111213#!/bin/bash#统计根分区使用率rate=$(df -h | grep sda1 | awk '&#123;print $5&#125;' | cut -d \"%\" -f1)if [ $rate -ge 80 ] #判断rate的值，如果大于等于80,则执行then程序 then echo \"使用率达到80%！！！\" &gt;&gt; caveat.txt #打印警告信息 else echo \"使用率：$rate.\" &gt;&gt; normal.txtfi 4.判断用户输入的是什么文件？ 123456789101112131415161718192021222324#!/bin/bash#判断文件类型read -p \"请你输入文件名：\" file#判断file变量是否为空if [ -z \"file\" ] then echo \"错误，请重新输入。\" exit 1#判断文件是否存在elif [ ! -e \"$file\" ] then echo \"没有找到该文件！\" exit 2elif [ -f \"$file\" ] then echo \"$file 是文件。\"elif [ -d \"$file\" ] then echo \"$file 是目录。\"else echo \"$file 是其他类型的文件。\"fi 5.全局命令 地址：/usr/local/bin/xcall.sh 12345678#!/bin/bashparams=$@i=141for (( i=141; i &lt;= 143 ; i = $i + 1 )) ; do echo ============= hadoop$i $params ============= ssh hadoop$i \"$params\"done 实例： 12345678[root@hadoop142 bin]# xcall.sh jps============= hadoop141 jps =============5388 Jps============= hadoop142 jps =============12996 Jps============= hadoop143 jps =============14881 JpsYou have new mail in /var/spool/mail/root 6.全局分发 地址：/opt/module/xrsync.sh 12345678910111213141516171819202122232425#!/bin/bash#1 获取输入参数个数，如果没有参数，直接退出pcount=$#if ((pcount==0)); thenecho no args;exit;fi#2 获取文件名称p1=$1fname=`basename $p1`echo fname=$fname#3 获取上级目录的对路径pdir=`cd -P $(dirname $p1); pwd`echo pdir=$pdir#4 获取当前用户名称user=`whoami`#5 循环for((host=141; host&lt;143; host++)); do echo ------------------- hadoop$host -------------- rsync -av $pdir/$fname $user@hadoop$host:$pdirdone 7.启动zookeeper 12345678910111213141516171819202122232425262728#!/bin/basharg=$#if((arg==0));thenecho no args;exit;ficase $1 in\"start\")&#123; for i in hadoop141 hadoop142 hadoop143 do ssh $i \"$ZOOKEEPER_HOME/bin/zkServer.sh start\" done&#125;;;\"stop\")&#123; for i in hadoop141 hadoop142 hadoop143 do ssh $i \"$ZOOKEEPER_HOME/bin/zkServer.sh stop\" done&#125;;;\"status\")&#123; for i in hadoop141 hadoop142 hadoop143 do ssh $i \"$ZOOKEEPER_HOME/bin/zkServer.sh status\" done&#125;;; esac","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}],"keywords":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}]},{"title":"Python3 标准数据类型","slug":"Python3 标准数据类型","date":"2020-05-01T07:58:31.774Z","updated":"2020-05-01T08:40:49.393Z","comments":true,"path":"2020/05/01/Python3 标准数据类型/","link":"","permalink":"http://yoursite.com/2020/05/01/Python3%20%E6%A0%87%E5%87%86%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","excerpt":"","text":"Python3 标准数据类型 五种标准数据类型： 数字 – Numbers 字符串 – String 列表 – List 元组 – Tuple 集合 – Sets 字典 – Dictionary 数字–Numbers 数字包括：整数、长整数、浮点数、复数外加Boolean（true、false）型。 整数（int）：1、2、3、4 … 长整数（ 2.2以前）：能够表示很长的整数，根据整数的长度分配大小。 — 长整型也可以使用小写 l，但是还是建议您使用大写 L，避免与数字 1 混淆。Python使用 L 来显示长整型。 浮点数（float）：1.23、3E-2 复数（complex）：1 + 2j、1.1 + 2.2j 123&gt;&gt;&gt; a, b, c, d = 20, 5.5, True, 4+3j&gt;&gt;&gt; print(type(a), type(b), type(c), type(d))&lt;class 'int'&gt; &lt;class 'float'&gt; &lt;class 'bool'&gt; &lt;class 'complex'&gt; 数值运算： 1234567891011121314&gt;&gt;&gt; 5 + 4 # 加法9&gt;&gt;&gt; 4.3 - 2 # 减法2.3&gt;&gt;&gt; 3 * 7 # 乘法21&gt;&gt;&gt; 2 / 4 # 除法，得到一个浮点数0.5&gt;&gt;&gt; 2 // 4 # 除法，得到一个整数0&gt;&gt;&gt; 17 % 3 # 取余 2&gt;&gt;&gt; 2 ** 5 # 乘方32 注意： 1、Python 可以同时为多过变量赋值： a, b, c, d = 20, 5.5, True, 4+3j； 2、一个变量可以赋值指向不同的数据类型的对象； 3、数值的除法（/）总是返回一个浮点数，要获取整数的话需使用（//）操作符： 12&gt;&gt;&gt; 7//23 4、在混合计算时，Pyhton会把整型转换成为浮点数。 5、long 类型只存在于 Python2.X 版本中，在 2.2 以后的版本中，int 类型数据溢出后会自动转为long类型。在 Python3.X 版本中 long 类型被移除，使用 int 替代。 字符串–String python中单引号和双引号使用完全相同。 使用三引号(’’'或&quot;&quot;&quot;)可以指定一个多行字符串。 转义符 ‘’ 自然字符串， 通过在字符串前加r或R。 如 r&quot;this is a line with \\n&quot; 则\\n会显示，并不是换行。 python允许处理unicode字符串，加前缀u或U， 如 u&quot;this is an unicode string&quot;。 字符串是不可变的。 按字面意义级联字符串，如&quot;this &quot; &quot;is &quot; &quot;string&quot;会被自动转换为this is string。 Python中的字符串str用单引号(’ ')或双引号(&quot; &quot;)括起来，同时使用反斜杠()转义特殊字符。 123&gt;&gt;&gt; s = 'Yes,he doesn\\'t'&gt;&gt;&gt; print(s, type(s), len(s))Yes,he doesn't 14 如果你不想让反斜杠发生转义，可以在字符串前面添加一个r，表示原始字符串： 12345&gt;&gt;&gt; print('C:\\some\\name')C:\\someame&gt;&gt;&gt; print(r'C:\\some\\name')C:\\some\\name 另外，反斜杠可以作为续行符，表示下一行是上一行的延续。还可以使用&quot;&quot;&quot;…&quot;&quot;&quot;或者’’’…’’'跨越多行。 字符串可以使用 + 运算符串连接在一起，或者用 * 运算符重复： 12&gt;&gt;&gt; print('str'+'ing', 'my'*3)string mymymy Python中的字符串有两种索引方式，第一种是从左往右，从0开始依次增加；第二种是从右往左，从-1开始依次减少。 注意，没有单独的字符类型，一个字符就是长度为1的字符串。 12345&gt;&gt;&gt; word = 'Python'&gt;&gt;&gt; print(word[0], word[5])P n&gt;&gt;&gt; print(word[-1], word[-6])n P 还可以对字符串进行切片，获取一段子串。用冒号分隔两个索引，形式为变量**[头下标:尾下标]**。 截取的范围是左闭右开的，并且两个索引都可以省略： 123456789&gt;&gt;&gt; word = 'ilovepython'&gt;&gt;&gt; word[1:5]'love'&gt;&gt;&gt; word[:]'ilovepython'&gt;&gt;&gt; word[5:]'python'&gt;&gt;&gt; word[-10:-6]'love' 与C字符串不同的是，Python字符串不能被改变。向一个索引位置赋值，比如word[0] = 'm’会导致错误。 注意： 1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。 2、字符串可以用+运算符连接在一起，用*运算符重复。 3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。 4、Python中的字符串不能改变。 列表 – List List（列表） 是 Python 中使用最频繁的数据类型 列表是写在方括号之间、用逗号分隔开的元素列表。列表中元素的类型可以不相同： 123&gt;&gt;&gt; a = [\"hello\",2,5980,\"world\"]&gt;&gt;&gt; print(a)['hello', 2, 5980, 'world'] 和字符串一样，列表同样可以被索引和切片，列表被切片后返回一个包含所需元素的新列表。 12345678&gt;&gt;&gt; a = [\"hello\",2,5980,\"world\"]&gt;&gt;&gt; print(a)['hello', 2, 5980, 'world']&gt;&gt;&gt; print(a[3])world&gt;&gt;&gt; print(a[1:3])[2, 5980]&gt;&gt;&gt; 列表还支持串联操作，使用+操作符： 123&gt;&gt;&gt; a = [\"hello\",2,5980,\"world\"]&gt;&gt;&gt; a + [3,5,6,6,34,'fdsf']['hello', 2, 5980, 'world', 3, 5, 6, 6, 34, 'fdsf'] 与Python字符串不一样的是，列表中的元素是可以改变的： 12345678&gt;&gt;&gt; a = [1, 2, 3, 4, 5, 6]&gt;&gt;&gt; a[0] = 9&gt;&gt;&gt; a[2:5] = [13, 14, 15]&gt;&gt;&gt; a[9, 2, 13, 14, 15, 6]&gt;&gt;&gt; a[2:5] = [] # 删除&gt;&gt;&gt; a[9, 2, 6] List内置了有很多方法，例如append()、pop()等等，这在后面会讲到。 注意： 1、List写在方括号之间，元素用逗号隔开。 2、和字符串一样，list可以被索引和切片。 3、List可以使用+操作符进行拼接。 4、List中的元素是可以改变的。 元组 – Tuple 元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号里，元素之间用逗号隔开。 元组中的元素类型也可以不相同： 123&gt;&gt;&gt; tu = (2020,2030,'python')&gt;&gt;&gt; print(tu,type(tu),len(tu))(2020, 2030, 'python') &lt;class 'tuple'&gt; 3 元组与字符串类似，可以被索引且下标索引从0开始，也可以进行截取/切片。 12345&gt;&gt;&gt; tu = (2020,2030,'python')&gt;&gt;&gt; tu[2]'python'&gt;&gt;&gt; tu[0:2](2020, 2030) 其实，可以把字符串看作一种特殊的元组。 1234567&gt;&gt;&gt; tup = (1, 2, 3, 4, 5, 6)&gt;&gt;&gt; print(tup[0], tup[1:5])1 (2, 3, 4, 5)&gt;&gt;&gt; tup[0] = 11 # 修改元组元素的操作是非法的Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;TypeError: 'tuple' object does not support item assignment 虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。 构造包含0个或1个元素的tuple是个特殊的问题，所以有一些额外的语法规则： 123456&gt;&gt;&gt; tu_null = () # 空元组&gt;&gt;&gt; print(tu_null)()&gt;&gt;&gt; tu_one = (20,) # 一个元素，需要在元素后添加逗号&gt;&gt;&gt; tu_one(20,) 另外，元组也支持用+操作符： 123&gt;&gt;&gt; tup1, tup2 = (1, 2, 3), (4, 5, 6)&gt;&gt;&gt; print(tup1+tup2)(1, 2, 3, 4, 5, 6) string、list和tuple都属于sequence（序列）。 注意： 1、与字符串一样，元组的元素不能修改。 2、元组也可以被索引和切片，方法一样。 3、注意构造包含0或1个元素的元组的特殊语法规则。 4、元组也可以使用+操作符进行拼接。 集合 – Sets 集合（set）是一个无序不重复元素的集。 基本功能是进行成员关系测试和消除重复元素。 可以使用大括号 或者 set()函数创建set集合，注意： 创建一个空集合必须用 set() 而不是 { }，因为{ }是用来创建一个空字典。 123456789101112131415161718192021&gt;&gt;&gt; student = &#123;'Tom', 'Jim', 'Mary', 'Tom', 'Jack', 'Rose'&#125;&gt;&gt;&gt; print(student) # 重复的元素被自动去掉&#123;'Mary', 'Rose', 'Jim', 'Tom', 'Jack'&#125;&gt;&gt;&gt; 'Rose' in student # membership testing（成员测试）True&gt;&gt;&gt; # set可以进行集合运算...&gt;&gt;&gt; a = set('abracadabra')&gt;&gt;&gt; a&#123;'r', 'a', 'c', 'd', 'b'&#125;&gt;&gt;&gt; b = set('alacazam')&gt;&gt;&gt; b&#123;'a', 'l', 'm', 'c', 'z'&#125;&gt;&gt;&gt; a - b # a和b的差集&#123;'d', 'r', 'b'&#125;&gt;&gt;&gt; a | b # a和b的并集&#123;'r', 'a', 'l', 'm', 'c', 'd', 'b', 'z'&#125;&gt;&gt;&gt; a &amp; b # a和b的交集&#123;'c', 'a'&#125;&gt;&gt;&gt; a ^ b # a和b的补集-- a和b中不同时存在的元素&#123;'d', 'r', 'b', 'z', 'l', 'm'&#125; 字典 --Dictionary 字典（dictionary）是Python中另一个非常有用的内置数据类型。 字典是一种映射类型（mapping type），它是一个无序的键 : 值对集合。 关键字必须使用不可变类型，也就是说list和包含可变类型的tuple不能做关键字。 在同一个字典中，关键字还必须互不相同 – ** 不重复**。 123456789101112131415161718&gt;&gt;&gt; dic = &#123;&#125; # 创建空字典&gt;&gt;&gt; tel = &#123;'Jack':1557, 'Tom':1320, 'Rose':1886&#125;&gt;&gt;&gt; tel&#123;'Tom': 1320, 'Jack': 1557, 'Rose': 1886&#125;&gt;&gt;&gt; tel['Jack'] # 主要的操作：通过key查询1557&gt;&gt;&gt; del tel['Rose'] # 删除一个键值对&gt;&gt;&gt; tel['Mary'] = 4127 # 添加一个键值对&gt;&gt;&gt; tel&#123;'Tom': 1320, 'Jack': 1557, 'Mary': 4127&#125;&gt;&gt;&gt; list(tel.keys()) # 返回所有key组成的list['Tom', 'Jack', 'Mary']&gt;&gt;&gt; sorted(tel.keys()) # 按key排序['Jack', 'Mary', 'Tom']&gt;&gt;&gt; 'Tom' in tel # 成员测试True&gt;&gt;&gt; 'Mary' not in tel # 成员测试False 构造函数 dict() 直接从键值对sequence中构建字典，当然也可以进行推导，如下： 12345678&gt;&gt;&gt; dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])&#123;'jack': 4098, 'sape': 4139, 'guido': 4127&#125;&gt;&gt;&gt; &#123;x: x**2 for x in (2, 4, 6)&#125;&#123;2: 4, 4: 16, 6: 36&#125;&gt;&gt;&gt; dict(sape=4139, guido=4127, jack=4098)&#123;'jack': 4098, 'sape': 4139, 'guido': 4127&#125; 另外，字典类型也有一些内置的函数，例如clear()、keys()、values()等。 注意： 1、字典是一种映射类型，它的元素是键值对。 2、字典的关键字必须为不可变类型，且不能重复。 3、创建空字典使用{ }。","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}]},{"title":"Python3 基础语法","slug":"Python3 基础语法","date":"2020-05-01T07:57:38.464Z","updated":"2020-05-01T08:40:49.412Z","comments":true,"path":"2020/05/01/Python3 基础语法/","link":"","permalink":"http://yoursite.com/2020/05/01/Python3%20%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/","excerpt":"","text":"Python3 基础语法 Python3 基础语法 编码 默认情况下，Python 3 源码文件以 UTF-8 编码，所有字符串但是 nuicode 字符串。 你也可以为源码文件指定不同的编码： 1# -*- coding: cp-1252 -*- 标识符 标识符由字母、数字、下划线 ’_‘ 组成； 不能以数字开头，第一个字符必须是字母或者下划线 ‘_’； 标识符区分大小写。 在Python3中，非-ASCII （* [^\\x00-\\x7f] *）标识符也是允许的。 Python 可以同一行显示多条语句，方法是用分号* ;* 分开，如： 123&gt;&gt;&gt; print ('hello');print ('runoob');hellorunoob Python保留字 保留字即关键字，不能用于标识符名称。 Python 的标止库提供了一个 keyword module，可以输出当前版本所有的关键字。 123&gt;&gt;&gt; import keyword&gt;&gt;&gt; keyword.kwlist['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'] 注释 单行注释： 12#单行注释print(\"hello world\") 多行注释-三个单引号（’’’）： 123456'''多行注释多行注释多行注释'''print(\"hello world\") 多行注释-三个双引号（”“”）： 123456\"\"\"多行注释多行注释多行注释\"\"\"print(\"hello world\") 行与缩进 python最具特色的就是使用缩进来表示代码块。缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。 实例: 1234if True: print (\"True\")else: print (\"False\")","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}]},{"title":"Python安装","slug":"Python3 安装","date":"2020-05-01T06:59:32.256Z","updated":"2020-05-01T08:40:49.419Z","comments":true,"path":"2020/05/01/Python3 安装/","link":"","permalink":"http://yoursite.com/2020/05/01/Python3%20%E5%AE%89%E8%A3%85/","excerpt":"","text":"Python安装 Python下载 Python最新源码，二进制文档，新闻资讯等可以在Python的官网查看到： Python官网：https://www.python.org/ 你可以在以下链接中下载 Python 的文档，你可以下载 HTML、PDF 和 PostScript 等格式的文档。 Python文档下载地址：https://www.python.org/doc/ Python安装 ython已经被移植在许多平台上（经过改动使它能够工作在不同平台上）。 您需要下载适用于您使用平台的二进制代码，然后安装Python。 如果您平台的二进制代码是不可用的，你需要使用C编译器手动编译源代码。 编译的源代码，功能上有更多的选择性， 为python安装提供了更多的灵活性。 以下是使用Window访问官网的下载地址：https://www.python.org/downloads/ 以下为不同平台上安装 Python 的方法： Unix &amp; Linux 平台安装 Python: 以下为在 Unix &amp; Linux 平台上安装 Python 的简单步骤： 打开 WEB 浏览器访问https://www.python.org/downloads/source/ 选择适用 于Unix/Linux 的源码压缩包。(例如: 下载 Python 3.7.7版源码包) Python-3.7.7.tgz 下载及解压压缩包。(tar -xzvf 包名 解压地址) 如果你需要自定义一些选项修改Modules/Setup 执行 ./configure 脚本 make make install 执行以上操作后，Python 会安装在 /usr/local/bin 目录中，Python 库安装在 /usr/local/lib/pythonXX，XX 为你使用的 Python 的版本号。 Window 平台安装 Python: 以下为在 Window 平台上安装 Python 的简单步骤： 打开 WEB 浏览器访问https://www.python.org/downloads/windows/ 在下载列表中选择Window平台安装包，包格式为：python-XYZ.exe 文件 ， XYZ 为你要安装的版本号。 下载后，双击下载包，进入 Python 安装向导，安装非常简单，你只需要使用默认的设置一直点击&quot;下一步&quot;直到安装完成即可。 MAC 平台安装 Python: MAC 系统一般都自带有 Python2.x版本 的环境，你也可以在链接 https://www.python.org/downloads/mac-osx/ 上下载最新版安装。","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}]},{"title":"python3教程","slug":"Python3 教程","date":"2020-05-01T03:16:02.765Z","updated":"2020-05-01T08:40:49.415Z","comments":true,"path":"2020/05/01/Python3 教程/","link":"","permalink":"http://yoursite.com/2020/05/01/Python3%20%E6%95%99%E7%A8%8B/","excerpt":"","text":"python3教程 Python的3.0版本，常被称为Python 3000，或简称Py3k。相对于Python的早期版本，这是一个较大的升级。为了不带入过多的累赘，Python 3.0在设计的时候没有考虑向下兼容。 查看python3版本 1python --version 显示版本： 1Python 3.7.5 第一个python程序 1print(\"Hlello,World!\") 输出： 1Hlello,World! 脚本式编程 通过脚本参数调用解释器开始执行脚本，直到脚本执行完毕。当脚本执行完成后，解释器不再有效。 让我们写一个简单的 Python 脚本程序。所有 Python 文件将以 .py 为扩展名。将以下的源代码拷贝至 test.py 文件中。 1print(\"Hlello,World!\") 这里，假设你已经设置了 Python 解释器 PATH 变量。使用以下命令运行程序： 1$ python test.py 输出结果： 1Hlello,World! Linux系统下 让我们尝试另一种方式来执行 Python 脚本。修改 test.py 文件，如下所示： 123#!/usr/bin/pythonprint (\"Hlello,World!\") 这里，假定您的Python解释器在/usr/bin目录中，使用以下命令执行脚本： 12chmod +x test.py # 脚本文件添加可执行权限./test.py #运行脚本 输出结果： 1Hello,World!","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}]}]}