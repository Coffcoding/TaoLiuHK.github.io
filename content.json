{"meta":{"title":"COFFEECODE","subtitle":"","description":"","author":"John Doe","url":"http://yoursite.com"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2020-05-01T05:55:46.977Z","updated":"2020-05-01T05:55:46.977Z","comments":false,"path":"/404.html","permalink":"http://yoursite.com/404.html","excerpt":"","text":""},{"title":"书单","date":"2020-05-01T09:40:01.965Z","updated":"2020-05-01T09:40:01.965Z","comments":false,"path":"books/index.html","permalink":"http://yoursite.com/books/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-05-01T05:55:46.978Z","updated":"2020-05-01T05:55:46.978Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"分类","date":"2020-05-01T05:55:46.978Z","updated":"2020-05-01T05:55:46.978Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"gallery","date":"2020-05-01T05:40:35.000Z","updated":"2020-05-01T05:40:35.574Z","comments":true,"path":"gallery/index.html","permalink":"http://yoursite.com/gallery/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-05-01T05:55:46.979Z","updated":"2020-05-01T05:55:46.979Z","comments":true,"path":"links/index.html","permalink":"http://yoursite.com/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-05-01T05:55:46.979Z","updated":"2020-05-01T05:55:46.979Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-05-01T05:55:46.979Z","updated":"2020-05-01T05:55:46.979Z","comments":false,"path":"repository/index.html","permalink":"http://yoursite.com/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"电影-奇幻","slug":"电影-奇幻","date":"2020-05-02T12:53:56.000Z","updated":"2020-05-02T15:16:20.499Z","comments":true,"path":"2020/05/02/电影-奇幻/","link":"","permalink":"http://yoursite.com/2020/05/02/%E7%94%B5%E5%BD%B1-%E5%A5%87%E5%B9%BB/","excerpt":"","text":"&lt;/td&gt; &lt;td&gt; &lt;!--右侧内容--&gt; &lt;b style=&quot;font-size:150%&quot;&gt; 霍比特人1：意外之旅 The Hobbit: An Unexpected Journey (2012) 豆瓣评分 8.1 又名:哈比人：不思议之旅(港),哈比人：意外旅程(台),The Hobbit: Part 1,指环王前传：霍比特人(上) 地区:美国,新西兰 类型:动作,奇幻,冒险 导演:彼得·杰克逊 编剧:弗兰·威尔士菲利帕·鲍恩斯彼得·杰克逊吉尔莫·德尔·托罗J·R·R·托尔金 主演:伊恩·麦克莱恩马丁·弗瑞曼理查德·阿米蒂奇肯·斯托特格拉汉姆·麦克泰维什詹姆斯·内斯比特迪恩·奥戈曼艾丹·特纳雨果·维文凯特·布兰切特安迪·瑟金斯西尔维斯特·迈可伊克里斯托弗·李伊利亚·伍德伊安·霍姆李·佩斯 imdb:tt0903624 中土最后一座矮人王国埃尔波尔，巍峨壮丽，庄严雄伟。老国王索尔积聚大量财富，却引来恶龙史茅革的觊觎和荼毒，最终导致这座城池陷落。许多年后，灰袍巫师甘道夫（伊恩·麦凯伦 Ian McKellen 饰）找到弗罗多的舅舅——霍比特人比尔博·巴金斯（马丁·弗里曼 Martin John C. Freeman 饰），邀请他加入由13名矮人组成的远征队伍。原来史茅革已多年不见声息，背负家国仇恨的矮人王子索林（理查德·阿米蒂奇 Richard Armitage 饰）希望借此机会收复故土。经过一番考虑，巴金斯决定加入。令他想不到的是，远征旅途多灾多难，与索林结下深仇大恨的苍白半兽人及其爪牙阴魂不散，更有食人鬼和石人制造的无数艰险。而在旅途中，巴金斯也意外得到了日后影响整个中土的重要宝物…… 本片根据J.R.R·托尔金的同名原著改编。 资源地址：http://www.pianyuan.la/m_DMb40.html 2.霍比特人2：史矛革之战 The Hobbit: The Desolation of Smaug (2013) 豆瓣评分 8.3 又名:霍比特人2：史矛革荒漠,哈比人：荒谷魔龙(港),哈比人：荒谷恶龙(台),霍比特人2：斯毛戈荒漠,指环王前传：霍比特人(中),The Hobbit: Part 2 地区:美国,新西兰 类型:动作,奇幻,冒险 导演:彼得·杰克逊 编剧:J·R·R·托尔金弗兰·威尔士菲利帕·鲍恩斯彼得·杰克逊吉尔莫·德尔·托罗 主演:伊恩·麦克莱恩马丁·弗瑞曼理查德·阿米蒂奇本尼迪克特·康伯巴奇奥兰多·布鲁姆伊万杰琳·莉莉李·佩斯卢克·伊万斯斯蒂芬·弗雷肯·斯托特詹姆斯·内斯比特约翰·贝尔马努·贝内特杰德·布罗菲亚当·布朗约翰·凯伦瑞安·盖奇马克·哈德洛彼得·汉布尔顿斯蒂芬·亨特威廉·基尔舍西尔维斯特·迈可伊格拉汉姆·麦克泰维什迪恩·奥戈曼米卡埃尔·佩斯布兰特艾丹·特纳 imdb:tt1170358 距离孤山越来越近，矮人远征军的道路却变得异常艰险。他们躲过了苍白半兽人的不懈追杀，在幽暗密林前和甘道夫（伊恩·麦凯伦 Ian McKellen 饰）兵分两路，后者前往多尔哥多探寻索伦的动向，而霍比特人比尔博·巴金斯（马丁·弗里曼 Martin John C. Freeman 饰）和矮人们先是遭到巨大蜘蛛的袭击，随后又被精灵王子莱戈拉斯（奥兰多·布鲁姆 Orlando Bloom 饰）及其木精灵同伴捕获。比尔博急中生智，利用魔戒救出伙伴，继而引发了木精灵、半兽人和矮人远征军之间精彩纷呈的三方会战。借助巴德（卢克·伊万斯 Luke Evans 饰）的帮助，疲惫的矮人们暂时落脚长湖镇。近在咫尺的孤山城堡，沉睡在财宝中的巨龙即将醒来…… 本片根据J.R.R·托尔金的同名原著改编。 资源地址：http://www.pianyuan.la/m_DmtxWLbc0.html 3. 霍比特人3：五军之战 The Hobbit: The Battle of the Five Armies (2014) 豆瓣评分 8.2 又名:哈比人：五军之战(港台),哈比人：奇境再返(台),哈比人：汗血回归,指环王前传：霍比特人(下),霍比特人3：去而复返,There and Back Again 地区:美国,新西兰 类型:动作,奇幻,冒险 导演:彼得·杰克逊 编剧:弗兰·威尔士菲利帕·鲍恩斯彼得·杰克逊吉尔莫·德尔·托罗J·R·R·托尔金 主演:马丁·弗瑞曼伊恩·麦克莱恩理查德·阿米蒂奇伊万杰琳·莉莉李·佩斯卢克·伊万斯本尼迪克特·康伯巴奇肯·斯托特詹姆斯·内斯比特比利·康诺利凯特·布兰切特伊安·霍姆克里斯托弗·李雨果·维文奥兰多·布鲁姆马努·贝内特艾丹·特纳迪恩·奥戈曼格拉汉姆·麦克泰维什斯蒂芬·弗雷米卡埃尔·佩斯布兰特 imdb:tt2310332 最先与灭霸军团遭遇的雷神索尔一行遭遇惨烈打击，洛基遇害，空间宝石落入灭霸之手。未几，灭霸的先锋部队杀至地球，一番缠斗后掳走奇异博士。为阻止时间宝石落入敌手，斯塔克和蜘蛛侠闯入了敌人的飞船。与此同时，拥有心灵宝石的幻视也遭到外星侵略者的袭击，为此美国队长、黑寡妇等人将其带到瓦坎达王国，向黑豹求助。幸免于难的索尔与星爵一行相逢，随后他们兵分两路。索尔与火箭、格鲁特踏上再铸雷神之锤的旅程，星爵则与卡魔拉等人试图阻止灭霸的恶行。而知晓灵魂宝石下落的卡魔拉，同样是其义父灭霸追踪的对象。 攸关整个宇宙命运的史诗战役全面展开，超级英雄们为了平凡而自由的生命奋不顾身…… 资源地址：http://www.pianyuan.la/m_DwbXEHuc0.html 4. 指环王1：魔戒再现 The Lord of the Rings: The Fellowship of the Ring (2001) 豆瓣评分 8.9 又名:魔戒首部曲：魔戒现身,指环王I：护戒使者,魔戒1：护戒联盟 地区:新西兰,美国 类型:剧情,动作,奇幻,冒险 导演:彼得·杰克逊 编剧:弗兰·威尔士菲利帕·鲍恩斯彼得·杰克逊J·R·R·托尔金 主演:伊利亚·伍德西恩·奥斯汀伊恩·麦克莱恩维果·莫腾森奥兰多·布鲁姆凯特·布兰切特肖恩·宾克里斯托弗·李雨果·维文丽芙·泰勒安迪·瑟金斯伊安·霍姆多米尼克·莫纳汉萨拉·贝克约翰·瑞斯-戴维斯 imdb:tt01207374 比尔博•巴金斯是100多岁的哈比人，住在故乡夏尔，生性喜欢冒险，在年轻时的一次探险经历中，他从怪物咕噜手中得到了至尊魔戒，这枚戒指是黑暗魔君索伦打造的至尊魔戒，拥有奴役世界的邪恶力量，能够统领其他几枚力量之戒，在3000年前的人类联盟和半兽人大军的战役中，联盟取得了胜利 ，并得到了至尊魔戒，数千年的辗转后，魔戒落到咕噜手中，被比尔博碰巧得到。 因为和魔戒的朝夕相处，比尔博的心性也受到了影响，在他111岁的生日宴会上，他决定把一切都留给侄子佛罗多(伊莱贾‧伍德 饰)，继续冒险。 比尔博的好朋友灰袍巫师甘道夫（伊恩‧麦凯伦 饰）知道至尊魔戒的秘密，同时，黑暗魔君索伦已经知道他的魔戒落在哈比族的手中。索伦正在重新建造要塞巴拉多，集结无数的半兽人，准备以大军 夺取魔戒，并且征服全世界。 甘道夫说服佛罗多将魔戒护送到精灵王国瑞文希尔，佛罗多在好朋友山姆、皮平和梅利的陪同下，在跃马旅店得到了刚铎王子阿拉贡的帮助，历经艰难，终于到达了精灵王国。 然而，精灵族并不愿意保管这个邪恶的至尊魔戒，中土各国代表开会讨论，达成意见，准备将至尊魔戒送到末日山脉的烈焰中彻底销毁，佛罗多挺身而出接受了这个任务，这次，陪伴他的除了三个好朋友，还有甘道夫、阿拉贡、精灵莱戈拉斯（奥兰多‧布鲁姆 饰）、人类博罗米尔、侏儒金利。 一路上，魔戒远征军除了要逃避索伦爪牙黑骑士和半兽人的追杀之外，更要抵抗至尊魔戒本身的邪恶诱惑，前途困难重重。 资源地址：http://www.pianyuan.la/m_Dt5b0.html 5.指环王2：双塔奇兵 The Lord of the Rings: The Two Towers (2002) 豆瓣评分 8.9 又名:魔戒二部曲：双城奇谋,指环王II：双塔,魔戒2：双塔奇谋 地区:美国,新西兰 类型:剧情,动作,奇幻,冒险 导演:彼得·杰克逊 编剧:弗兰·威尔士菲利帕·鲍恩斯Stephen Sinclair彼得·杰克逊J·R·R·托尔金 主演:伊利亚·伍德西恩·奥斯汀伊恩·麦克莱恩维果·莫腾森奥兰多·布鲁姆克里斯托弗·李丽芙·泰勒安迪·瑟金斯雨果·维文卡尔·厄本凯特·布兰切特多米尼克·莫纳汉大卫·文翰比利·博伊德布拉德·道里夫伯纳德·希尔约翰·瑞斯-戴维斯米兰达·奥图 imdb:tt0167261 第二部在延续第一部风格的同时，故事呈现出多线发展的格局，情节有了更高的观赏性。 第一部结尾，博罗米尔被强兽人杀死之后，两个哈比族人皮平和梅利也被强兽人绑架，阿拉贡、精灵莱戈拉斯（奥兰多•布鲁姆 饰）、侏儒金利一路追踪强兽人，营救皮平和梅利，遇到了“复活”的白袍巫师甘道夫（伊恩•麦凯伦 饰）。此时，投降索伦的白袍巫师萨鲁曼控制了人类洛汉王国的国王，并派出大量的强兽人军队，准备消灭人类。阿拉贡、莱戈拉斯和金利在甘道夫的带领下，帮助洛汉王国对抗邪恶力量的入侵。 幸运的皮平和梅利被会说话的树精救了出来，并且遇到“复活”的甘道夫，在甘道夫的授意下，树精保护了两人的安全，并且带他们参加树精大会，大会上，树精们讨论对待中土大战的态度：是继续当中立者，逆来顺受，还是奋起反抗？ 身负重任的佛罗多(伊莱贾•伍德 饰)和山姆继续向末日山脉前进，一路上被咕噜跟踪，弗罗多依靠至尊魔戒的力量，成为了咕噜的主人，在咕噜的带领下，他们到了末日山脉的入口，黑门。就在他们准备进入之时，博罗米尔的弟弟法莫尔出现，将他们带回了刚铎。弗罗多又遇上了新的危机：法莫尔想利用至尊魔戒的力量对抗萨鲁曼的攻击…… 资源地址：http://www.pianyuan.la/m_Dt430.html &lt;/td&gt; &lt;td&gt; &lt;!--右侧内容--&gt; &lt;b style=&quot;font-size:150%&quot;&gt; 指环王3：王者无敌 The Lord of the Rings: The Return of the King (2003) 豆瓣评分 9.1 又名:魔戒三部曲：王者再临,指环王III：王者无敌,魔戒3：王者归来,指环王3：国王归来 地区:美国,新西兰 类型:剧情,动作,奇幻,冒险 导演:彼得·杰克逊 编剧:弗兰·威尔士菲利帕·鲍恩斯彼得·杰克逊J·R·R·托尔金 主演:维果·莫腾森伊利亚·伍德西恩·奥斯汀丽芙·泰勒伊恩·麦克莱恩奥兰多·布鲁姆凯特·布兰切特米兰达·奥图安迪·瑟金斯雨果·维文多米尼克·莫纳汉比利·博伊德马尔顿·索克斯卡尔·厄本克里斯托弗·李约翰·瑞斯-戴维斯 imdb:tt0167260 魔幻战争逐渐进入高潮阶段。霍比特人弗拉多（伊利亚·伍德 Elijah Wood 饰）携带着魔戒，与伙伴山姆（Sean Astin 饰）以及狡猾阴暗的咕噜等前往末日山，一路上艰难险阻不断，魔君索伦为阻止魔戒被销毁用尽全力阻挠。另一方面，白袍巫师甘道夫（伊安·麦克莱恩 Ian McKellen 饰）率中土勇士们镇守刚铎首都——白城米那斯提里斯。魔兽大军压境，黑暗与光明的决战即将来临…… 本片是“指环王三部曲”的终结篇，根据英国作家J.R.R.托尔金（J.R.R. Tolkien）同名魔幻巨著《指环王》（The Lord of the Rings）改编，并荣获2004年第76届奥斯卡最佳影片、最佳导演、最佳改编剧本、最佳剪辑、最佳艺术指导、最佳服装设计、最佳化妆、最佳视觉效果、最佳音效、最佳配乐和最佳歌曲等11项大奖。 资源地址：http://www.pianyuan.la/m_Dt4z0.html &lt;/td&gt; &lt;td&gt; &lt;!--右侧内容--&gt; &lt;b style=&quot;font-size:150%&quot;&gt; 波西·杰克逊与神火之盗 Percy Jackson &amp; the Olympians: The Lightning Thief (2010) (2003) 豆瓣评分 5.9 又名:珀西·杰克逊和闪电窃贼,波西杰克森：神火之贼,波西·杰克逊与闪电贼,Percy Jackson and the Lightning Thief 地区:美国,加拿大 类型:奇幻,冒险 导演:克里斯·哥伦布 编剧:Craig TitleyRick Riordan 主演:罗根·勒曼布兰登·T·杰克逊亚历珊德拉·达达里奥凯瑟琳·基纳皮尔斯·布鲁斯南乌玛·瑟曼杰克·阿贝尔肖恩·宾罗莎里奥·道森凯文·麦克基德 imdb:tt0814255 黑夜，天神宙斯召见海神波塞冬，称其子偷了闪电火，要挟他若不尽快找回，必将开战。现实中，波塞冬与人妻萨利之子波西杰克逊（罗根•勒曼 Logan Lerman 饰）是个大学生，17岁的他可以在水下呆7分钟，但对老师关于莎翁的提问不感兴趣。参观博物馆时，他遇到了摇着轮椅的人马老师（皮尔斯•布鲁斯南 Pierce Brosnan 饰）。而文学老师却变身成了复仇女神，向他逼问闪电火的下落。幸好人马教授和羊男朋友及时赶到，化险为夷。他们带波西来到营地，训练波西，他们找来了一个女战士安娜贝斯（亚历山德拉•达达里奥 Alexandra Daddario饰）与之比武。落败后，触水的波西被激活了潜能，成为奋勇无敌的战士，并开始踏上了追寻闪电火的英雄之旅。面对蛇女美杜莎等神怪的攻击，冥王冥后珀尔赛弗涅的刁难，他的自我救赎只剩下10天…… 资源地址：http://www.pianyuan.la/m_Dt4NWFcc0.html 8. 波西·杰克逊与魔兽之海 Percy Jackson: Sea of Monsters (2013) 豆瓣评分 5.5 又名:波西杰克森：妖魔之海(港/台),波西杰克逊2,波西·杰克逊与海怪,Percy Jackson & the Olympians: The Sea of Monsters 地区:美国 类型:剧情,动作,奇幻,冒险 导演:托尔·弗洛伊德桑尔 编剧:马克·古根海姆里克·赖尔登 主演:罗根·勒曼亚历珊德拉·达达里奥布兰登·T·杰克逊道格拉斯·史密斯莱文·兰宾杰克·阿贝尔安东尼·海德斯坦利·图齐 imdb:tt1854564 电影《波西·杰克逊与魔兽之海》由《小屁孩日记》导演托尔·弗洛伊德桑尔执导，讲述波西·杰克逊在混血人集中营平静的度过七年级后，忽然日子就变的纷乱了起来，原本和同学间的躲避球竞赛，阴错阳差的变成了一场死亡游戏，丑陋的食人族巨无霸也跟着搅和其中，波西无意中发现，他们的家园和族人正遭遇空前的灾难，必须找到“金羊毛”，才能拯救众人，为了解除灾难，波西奋不顾身带着伙伴们共同踏上冒险的旅程，他们要到魔兽之海完成任务，才能取得金羊毛并拯救面临毁灭的混血人集中营，在这趟危机重重的冒险之旅中，他们将会遇到哪些惊人的意外难关?他们真的能够顺利的突破困难，并且让所有族人和希腊众神们幸免于难吗? 资源地址：http://www.pianyuan.la/m_Sm5XWzcc0.html &lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; 哈利·波特与魔法石 Harry Potter and the Sorcerer's Stone (2001) 豆瓣评分 8.5 又名:哈利波特1：神秘的魔法石(港/台),哈1,Harry Potter and the Philosopher's Stone 地区:美国,英国 类型:奇幻,冒险 导演:克里斯·哥伦布 编剧:斯蒂芬·科洛弗J·K·罗琳 主演:丹尼尔·雷德克里夫艾玛·沃森鲁伯特·格林特艾伦·瑞克曼玛吉·史密斯汤姆·费尔顿伊恩·哈特理查德·哈里斯约翰·赫特罗彼·考特拉尼朱丽·沃特斯邦妮·怀特约翰·克立斯肖恩·比格斯代夫 imdb:tt0241527 哈利波特是一个孤儿，从小寄养在姨妈家，受尽欺凌。但就在哈利11岁生日的时候，他意外收到了霍格沃茨学院的入学通知书。哈利从该学院派来接他的巨人海格口中得知，这是一间魔法学院，并得知了自己的身世，原来哈利的父母都是伟大的魔法师，在对付伏地魔的战斗中双双献身，唯有哈利幸免于难。 哈利进入霍格沃茨后，表现出了超乎想象的飞行天赋，得到麦格教授的推荐进入了格兰芬多的魁地奇球队。另一方面，哈利发现霍格沃茨学院内有一股黑暗势力似乎在暗暗滋长，揭开谜团的关键就在有凶恶的三头犬守护的房间内。 哈利、罗恩和赫敏三个好朋友决定探个究竟。 资源地址：http://www.pianyuan.la/m_DwbzEQcc0.html 哈利·波特与密室 Harry Potter and the Chamber of Secrets (2002) 豆瓣评分 8.0 又名:哈利波特2：消失的密室(港/台),哈2 地区:美国,英国,德国 类型:奇幻,冒险 导演:克里斯·哥伦布 编剧:斯蒂芬·科洛弗J·K·罗琳 主演:丹尼尔·雷德克里夫艾玛·沃森鲁伯特·格林特汤姆·费尔顿理查德·格雷弗斯费奥纳·肖托比·琼斯朱丽·沃特斯邦妮·怀特詹森·艾萨克肯尼思·布拉纳艾伦·瑞克曼理查德·哈里斯玛吉·史密斯约翰·克立斯肖恩·比格斯代夫克里斯·兰金克里斯蒂安·库尔森 imdb:tt02952970 哈利波特（丹尼尔•雷德克里夫 Daniel Radcliffe 饰）结束了假期，即将回到霍格沃兹继续学习魔法。一个叫多比的家养小精灵警告哈利不要回到霍格沃兹，否则会陷入极大的危险。哈利没有听从多比的劝告，回到了霍格沃兹。很快，霍格沃兹发生了一连窜怪事:接二连三出现学生被石化，一直找不出原因。而哈利总能听到一种奇怪的声音，从墙壁里传出来。 传说，霍格沃兹有一个密室，里面记录着伏地魔年轻时的秘密，只有斯莱特林的人才能打开密室。哈利偶然发现自己能听懂蛇说话，一时传闻是哈利打开了密室。难道多比所指的危险就隐藏在密室？ 资源地址：http://www.pianyuan.la/m_68bXEpcc0.html 哈利·波特与阿兹卡班的囚徒 Harry Potter and the Prisoner of Azkaban (2004) 豆瓣评分 8.0 又名:哈利波特3：阿兹卡班的逃犯(港/台),哈利·波特与阿兹卡班的逃犯,哈3 地区:英国,美国 类型:剧情,奇幻,冒险 导演:阿方索·卡隆 编剧:斯蒂芬·科洛弗J·K·罗琳 主演:丹尼尔·雷德克里夫艾玛·沃森鲁伯特·格林特加里·奥德曼朱丽·沃特斯邦妮·怀特大卫·休里斯迈克尔·刚本艾伦·瑞克曼玛吉·史密斯汤姆·费尔顿艾玛·汤普森朱莉·克里斯蒂蒂莫西·斯波 imdb:tt0304141 哈利（丹尼尔·雷德克里夫）即将在霍格沃兹渡过第三个年头，此时在阿兹塔班却传出恶棍小天狼星（加里·奥德曼）越狱的消息。据说小天狼星正是背叛哈利父母的好友，他的教父，而这次小天狼星越狱似乎正是为了找他。哈利的心里悄悄的滋生了为父母报仇的想法，期待着小天狼星的出现。 新来的魔法老师卢平（大卫·休里斯）有着桀骜不驯的个性，与哈利关系很好，教了哈利许多实用的黑魔法防御知识。而此时在他的魔法地图上却出现了一个神秘人物，虫尾巴。偶然的机会下，在尖叫棚屋里集齐了哈利父亲当年的所有好友，卢平、虫尾巴、小天狼星，哈利的魔杖直指向小天狼星，但他发现那罪犯看他的眼神里充满了疼爱…… 资源地址：http://www.pianyuan.la/m_Dm5fELcc0.html 哈利·波特与火焰杯 Harry Potter and the Goblet of Fire (2005) 豆瓣评分 7.9 > 又名:哈利波特4：火杯的考验(港/台),哈4 地区:英国,美国 类型:奇幻,冒险 导演:迈克·内威尔 编剧:斯蒂芬·科洛弗J·K·罗琳 主演:丹尼尔·雷德克里夫艾玛·沃森鲁伯特·格林特蒂莫西·斯波邦妮·怀特罗伯特·帕丁森汤姆·费尔顿梁佩诗迈克尔·刚本玛吉·史密斯艾伦·瑞克曼加里·奥德曼拉尔夫·费因斯 imdb:tt0330373 这是一个不同寻常的学期，魔法学校的盛事：三强争霸赛在霍格沃茨举行。学生们争先报名，希翼获得永恒无上的荣誉。火焰杯在选出三所学校的三名勇士后，竟将未足年龄的哈利也挑选出来。 哈利（Daniel Radcliffe饰）的当选引起其他学生的嫉妒连连，就连铁哥们罗恩（Rupert Grint饰）也首次和他闹起了别扭，哈利感到孤立无援，还好有教父小天狼星和赫敏一直支持他。可总有些好事者如记者丽塔等着看他的好戏。天知道这场比赛是何等艰辛危险，在龙的眼皮下偷蛋，潜入湖底救人，在迷宫中探险……一不小心，甚至可能付出生命的代价。 黑魔王伏地魔的威胁渐渐显现，每一天都险象环生，动人心弦。 资源地址：http://www.pianyuan.la/m_Dwtdcpcc0.html 哈利·波特与凤凰社 Harry Potter and the Order of the Phoenix (2007) 豆瓣评分 7.6 又名:哈利波特5：凤凰会的密令(港/台),哈5 地区:英国,美国 类型:奇幻,冒险 导演:大卫·叶茨 编剧:迈克尔·戈登伯格J·K·罗琳 主演:丹尼尔·雷德克里夫艾玛·沃森鲁伯特·格林特加里·奥德曼拉尔夫·费因斯玛吉·史密斯迈克尔·刚本艾伦·瑞克曼艾玛·汤普森艾美达·斯丹顿詹森·艾萨克汤姆·费尔顿海伦娜·伯翰·卡特邦妮·怀特朱丽·沃特斯梁佩诗布莱丹·格里森罗彼·考特拉尼伊文娜·林奇 imdb:tt0373889 逃过摄魂怪的追杀，通过魔法部的审查，哈利（丹尼尔·雷德克里夫）终于回到美丽的霍格沃兹。然而这个学期并不轻松，他不仅要完成魔法等级考试，还要应对夜晚的噩梦和黑魔法防御课老师乌姆里奇的打压。在好友的支持下，哈利秘密组建了邓不利多军团，与大家一起练习黑魔法防御术。 噩梦中，哈利总是以伏地魔的视角出现，似乎他们之间有着某种神秘的联系。在邓不利多（迈克尔·刚本）的指示下，哈利向斯内普教授（阿伦·瑞克曼）学习封闭术，却鲜有成效。终于在一次噩梦的诱使下，哈利偏执的赶往魔法部营救小天狼星，却不想陷入伏地魔的圈套，引发凤凰社与食死徒之间的正面冲突。在混战中，小天狼星（加里·奥德曼）不幸遇难。 究竟哈利与伏地魔（拉尔夫·费因斯）之间有着怎样的联系？在悲恸中，邓不利多为哈利揭开谜底，哈利还有更长、更艰难的路要走…… 资源地址：http://www.pianyuan.la/m_Sm83WQcc0.html 哈利·波特与混血王子 Harry Potter and the Half-Blood Prince (2009) 豆瓣评分 7.2 又名:哈利波特6：混血王子的背叛(港/台),哈6,HP and the HBP 地区:英国,美国 类型:剧情,奇幻,冒险 导演:大卫·叶茨 编剧:斯蒂芬·科洛弗J·K·罗琳 主演:丹尼尔·雷德克里夫艾玛·沃森鲁伯特·格林特汤姆·费尔顿迈克尔·刚本艾伦·瑞克曼邦妮·怀特朱丽·沃特斯海伦娜·伯翰·卡特吉姆·布劳德本特玛吉·史密斯伊文娜·林奇 imdb:tt0417741 这一集中，食死徒开始肆无忌惮横行于麻瓜和魔法两个世界中，霍格沃茨内忧外患，危机重重。邓不利多（迈克尔·甘本 Michael Gambon 饰）带着哈利（丹尼尔·雷德克里夫 Daniel Radcliffe 饰）辗转找到隐居多年的霍拉斯·斯拉格霍恩，请他出山接替斯内普（艾伦 ·里克曼 Alan Rickman 饰）担任魔药学的老师。霍拉斯曾经教授过无数优秀的学生，而汤姆·里德尔——伏地魔——正是他最出色的一名弟子。邓不利多深信霍拉斯保有伏地魔不死身的秘密，他希望哈利能够说服霍拉斯。 另一方面，德拉科·马尔福（汤姆·费尔顿 Tom Felton 饰）宣誓效忠伏地魔，他想方设法将食死徒引入霍格沃茨。而此时，罗恩（鲁伯特·格林特 Rupert Grint 饰）、赫敏（艾玛·沃特森 Emma Watson 饰）他们却还沉浸在青春的躁动中，全然不知黑暗正渐渐逼近…… 资源地址：http://www.pianyuan.la/m_Sm5X0.html 哈利·波特与死亡圣器(上) Harry Potter and the Deathly Hallows: Part 1 (2010) 豆瓣评分 7.7 又名:哈利波特7：死神的圣物1(港/台),哈利·波特与死圣(上),哈7(上) 地区:英国,美国 类型:剧情,奇幻,冒险 导演:大卫·叶茨 编剧:斯蒂芬·科洛弗 主演:丹尼尔·雷德克里夫艾玛·沃森鲁伯特·格林特海伦娜·伯翰·卡特拉尔夫·费因斯比尔·奈伊约翰·赫特艾伦·瑞克曼艾美达·斯丹顿费奥纳·肖邦妮·怀特朱丽·沃特斯米歇尔·费尔利杰米·坎贝尔·鲍尔 imdb:tt0926084 《哈利·波特与死亡圣器》小站 http://site.douban.com/108361/ 邓不利多死后，伏地魔（Ralph Fiennes 饰）与食死徒入侵魔法学校，魔法部也被伏地魔的爪牙操控，邪恶的阴云笼罩魔法世界上空。在哈利·波特（丹尼尔·雷德克里夫 Daniel Radcliffe 饰）17岁生日之际，凤凰社成员及一众好友护送他回到了凤凰社的据点陋居，然而这立即遭到食死徒毁灭性地打击。哈利和罗恩（鲁伯特·格林特 Rupert Grint 饰）、赫敏（爱玛·沃特森 Emma Watson 饰）侥幸逃亡，并且按照邓不利多的嘱托继续寻找伏地魔的魂器。死亡的威胁时刻逡巡左右，他们还要面对友情的考验。在寻找摧毁魂器方法的过程中，死亡圣器的面纱也渐渐揭开。 与此同时，为了置哈利于死地，伏地魔也在寻找最后一件死亡圣器。最后的决战即将到来…… 资源地址：http://www.pianyuan.la/m_S883Wzcc0.html 哈利·波特与死亡圣器(下) Harry Potter and the Deathly Hallows: Part 2 (2011) 豆瓣评分 8.6 又名:哈利波特7：死神的圣物2(港/台),哈利·波特与死圣(下),哈7(下),哈利·波特大结局 地区:美国,英国 类型:剧情,悬疑,奇幻,冒险 导演:大卫·叶茨 编剧:斯蒂芬·科洛弗 主演:丹尼尔·雷德克里夫艾玛·沃森鲁伯特·格林特海伦娜·伯翰·卡特拉尔夫·费因斯艾伦·瑞克曼玛吉·史密斯汤姆·费尔顿邦妮·怀特朱丽·沃特斯迈克尔·刚本伊文娜·林奇多姆纳尔·格利森克蕾曼丝·波西詹森·艾萨克海伦·麦克洛瑞马修·刘易斯梁佩诗 imdb:tt1201607 当又一次和伏地魔（拉尔夫·费因斯 Ralph Fiennes 饰）的意识连通，哈利·波特（丹尼尔·雷德克里夫 Daniel Radcliffe 饰）断定最后一件魂器藏在霍格沃茨，于是和罗恩（鲁伯特·格林特 Rupert Grint 饰）、赫敏（艾玛·沃森 Emma Watson 饰）一同返回阴云密布的学校。在好友们的帮助下，他们成功驱逐了斯内普（艾伦·瑞克曼 Alan Rickman 饰），然而觉察到哈利目的的伏地魔则率领徒众向霍格沃茨逼近。食死徒、摄魂怪、巨人疯狂涌入这所有着悠久历史的魔法学校，正邪决战旋即爆发，一时间血雨腥风，死伤无数。从斯内普的眼泪中，哈利不仅了解到父辈的故事，也证实了藏缅于他体内最后的秘密。在此之后，他也和伏地魔迎来了最后的对决…… 本片根据英国作家J.K.罗琳的同名原著改编，也是“哈利·波特”系列影片的完结篇。 资源地址：http://www.pianyuan.la/m_Dwb3czcc0.html ----","categories":[{"name":"电影","slug":"电影","permalink":"http://yoursite.com/categories/%E7%94%B5%E5%BD%B1/"}],"tags":[{"name":"电影","slug":"电影","permalink":"http://yoursite.com/tags/%E7%94%B5%E5%BD%B1/"},{"name":"奇幻","slug":"奇幻","permalink":"http://yoursite.com/tags/%E5%A5%87%E5%B9%BB/"}],"keywords":[{"name":"电影","slug":"电影","permalink":"http://yoursite.com/categories/%E7%94%B5%E5%BD%B1/"}]},{"title":"电影-科幻","slug":"电影-科幻","date":"2020-05-02T12:51:46.000Z","updated":"2020-05-02T12:54:03.242Z","comments":true,"path":"2020/05/02/电影-科幻/","link":"","permalink":"http://yoursite.com/2020/05/02/%E7%94%B5%E5%BD%B1-%E7%A7%91%E5%B9%BB/","excerpt":"","text":"1. 复仇者联盟 The Avengers (2012) 豆瓣评分 8.0 地区:美国 类型:动作,科幻,奇幻,冒险 导演:乔斯·韦登 编剧:乔斯·韦登扎克·佩恩 主演:小罗伯特·唐尼克里斯·埃文斯斯嘉丽·约翰逊克里斯·海姆斯沃斯杰瑞米·雷纳马克·鲁弗洛塞缪尔·杰克逊汤姆·希德勒斯顿斯特兰·斯卡斯加德寇碧·史莫德斯克拉克·格雷格保罗·贝坦尼格温妮斯·帕特洛 imdb:tt0848228 一股突如其来的强大邪恶势力对地球造成致命威胁，没有任何一个超级英雄能够单独抵挡。长期致力于保护全球安危的神盾局（SHIELD）感到措手不及，其指挥官“独眼侠”尼克·弗瑞（塞缪尔·杰克逊 Samuel L. Jackson 饰）意识到他必须创建一个“史上最强”的联盟组织， 云集各方超级英雄一起发威，才能拯救世界于水深火热，抵御黑暗势力的侵袭。于是由六大超级英雄——“钢铁侠”（小罗伯特·唐尼 Robert Downey Jr. 饰）、“雷神” （克里斯·海姆斯沃斯 Chris Hemsworth 饰）、“美国队长”（克里斯·埃文斯 Chris Evans 饰）、“绿巨人” （马克·鲁弗洛 Mark Ruffalo 饰）、“黑寡妇”（斯嘉丽·约翰逊 Scarlett Johansson 饰）和“鹰眼”（杰瑞米·雷纳 Jeremy Renner 饰）组成的 “复仇者联盟”应运而生。他们各显神通，团结一心，终于战胜了邪恶势力，保证了地球的安全。 资源地址：http://www.pianyuan.la/m_Dm5bWQcc0.html 2. 复仇者联盟2：奥创纪元 Avengers: Age of Ultron (2015) 豆瓣评分 7.1 地区:美国 类型:动作,科幻,奇幻,冒险 导演:乔斯·韦登 编剧:乔斯·韦登斯坦·李杰克·科比 主演:小罗伯特·唐尼克里斯·海姆斯沃斯马克·鲁弗洛克里斯·埃文斯斯嘉丽·约翰逊杰瑞米·雷纳詹姆斯·斯派德塞缪尔·杰克逊唐·钱德尔亚伦·泰勒-约翰逊伊丽莎白·奥尔森保罗·贝坦尼寇碧·史莫德斯安东尼·麦凯海莉·阿特维尔伊德里斯·艾尔巴斯特兰·斯卡斯加德金秀贤托马斯·克莱舒曼安迪·瑟金斯朱莉·德尔佩斯坦·李亨利·古德曼多米尼克·普罗沃斯特-切克利艾萨克·安德鲁斯 imdb:tt2395427 一股突如其来的强大邪恶势力对地球造成致命威胁，没有任何一个超级英雄能够单独抵挡。长期致力于保护全球安危的神盾局（SHIELD）感到措手不及，其指挥官“独眼侠”尼克·弗瑞（塞缪尔·杰克逊 Samuel L. Jackson 饰）意识到他必须创建一个“史上最强”的联盟组织， 云集各方超级英雄一起发威，才能拯救世界于水深火热，抵御黑暗势力的侵袭。于是由六大超级英雄——“钢铁侠”（小罗伯特·唐尼 Robert Downey Jr. 饰）、“雷神” （克里斯·海姆斯沃斯 Chris Hemsworth 饰）、“美国队长”（克里斯·埃文斯 Chris Evans 饰）、“绿巨人” （马克·鲁弗洛 Mark Ruffalo 饰）、“黑寡妇”（斯嘉丽·约翰逊 Scarlett Johansson 饰）和“鹰眼”（杰瑞米·雷纳 Jeremy Renner 饰）组成的 “复仇者联盟”应运而生。他们各显神通，团结一心，终于战胜了邪恶势力，保证了地球的安全。 资源地址：http://www.pianyuan.la/m_Dw4Xcfcc0.html 3. 复仇者联盟3：无限战争 Avengers: Infinity War (2018)豆瓣评分 8.5 地区:美国 类型:动作,科幻,奇幻,冒险 导演:安东尼·罗素乔·罗素 编剧:杰克·科比克里斯托弗·马库斯斯蒂芬·麦克菲利吉姆·斯特林 主演:小罗伯特·唐尼克里斯·海姆斯沃斯克里斯·埃文斯马克·鲁弗洛乔什·布洛林斯嘉丽·约翰逊汤姆·赫兰德伊丽莎白·奥尔森保罗·贝坦尼汤姆·希德勒斯顿克里斯·普拉特佐伊·索尔达娜本尼迪克特·康伯巴奇查德维克·博斯曼塞巴斯蒂安·斯坦唐·钱德尔本尼迪克特·王安东尼·麦凯戴夫·巴蒂斯塔布莱德利·库珀范·迪塞尔凯伦·吉兰利蒂希娅·赖特庞·克莱门捷夫凯莉·库恩汤姆-沃 imdb:tt4154756 最先与灭霸军团遭遇的雷神索尔一行遭遇惨烈打击，洛基遇害，空间宝石落入灭霸之手。未几，灭霸的先锋部队杀至地球，一番缠斗后掳走奇异博士。为阻止时间宝石落入敌手，斯塔克和蜘蛛侠闯入了敌人的飞船。与此同时，拥有心灵宝石的幻视也遭到外星侵略者的袭击，为此美国队长、黑寡妇等人将其带到瓦坎达王国，向黑豹求助。幸免于难的索尔与星爵一行相逢，随后他们兵分两路。索尔与火箭、格鲁特踏上再铸雷神之锤的旅程，星爵则与卡魔拉等人试图阻止灭霸的恶行。而知晓灵魂宝石下落的卡魔拉，同样是其义父灭霸追踪的对象。 攸关整个宇宙命运的史诗战役全面展开，超级英雄们为了平凡而自由的生命奋不顾身…… 资源地址：http://www.pianyuan.la/m_DtwfWcuc0.html 钢铁侠 Iron Man (2008) 豆瓣评分 7.7 地区:美国 类型:动作,科幻,惊悚,冒险 导演:乔恩·费儒 编剧:特·马库姆马特·霍洛维马克·弗格斯霍克·奥斯比 主演:小罗伯特·唐尼泰伦斯·霍华德格温妮斯·帕特洛杰夫·布里吉斯莱丝莉·比伯肖恩·托布保罗·贝坦尼乔恩·费儒克拉克·格雷格 imdb:tt0371746 斯塔克军火公司是美军在全球范围内第一大军火供应商，其新任掌门人托尼•斯塔克（小罗伯特·唐尼 Robert Downey Jr. 饰）风流倜傥，天资聪颖。他与公司元老俄巴迪亚•斯坦（杰夫·布里吉斯 Jeff Bridges 饰）合作无间，共同将斯塔克公司的业务推向顶峰。现 实生活中的托尼热衷收集名贵跑车，搞点儿发明创造，当然露水姻缘更不可少。所幸他身边有维吉尼亚•波茨（格温妮斯·帕特洛 Gwyneth Paltrow 饰）这样的好助手细心打理一切，才让他能自由自在过着贵公子的生活。 在前往中东为军方展示新型武器的途中，托尼一众遭到恐怖分子袭击。他被弹片击中险些丧命，在英森博士的帮助下，托尼体内移植了一颗核动力的人工心脏。恐怖分子要求托尼制造强大的杀伤性武器，他和英森虚与委蛇，暗中制造了一套由聚变能源驱动的钢铁盔甲。穿上盔甲托尼大闹恐怖分子的基地，回到美国后又对其进行了改进。却不知，接下来有更为黑暗的阴谋等着他…… 资源地址：http://www.pianyuan.la/m_DwwfWpcc0.html 钢铁侠2 Iron Man 2 (2010) 豆瓣评分 7.0 地区:美国 类型:动作,科幻,冒险 导演:乔恩·费儒 编剧:贾斯汀·塞洛克斯 主演:小罗伯特·唐尼格温妮斯·帕特洛米基·洛克斯嘉丽·约翰逊山姆·洛克威尔唐·钱德尔塞缪尔·杰克逊乔恩·费儒保罗·贝坦尼克拉克·格雷格凯特·玛拉约翰·斯拉特里 imdb:tt1228705 钢铁侠托尼·斯塔克（小罗伯特·唐尼 Robert Downey Jr. 饰）在国会听证上拒绝交出最新技术。与此同时，他发现胸口的微型电弧反应炉正迅速造成血液的钯金属中毒。沮丧的托尼将斯塔克公司的总裁职务交予了秘书波兹（格温妮丝·帕特罗 Gwyneth Paltrow 饰），由她全权负责正在进行的纽约斯塔克博览会。波兹从法律部门调来助理娜塔莉（斯佳丽·约翰逊 Scarlett Johansson 饰）照顾托尼。托尼在媒体前的高调亮相引起了其父当年同事的儿子，伊凡（米基·洛克 Mickey Rourke 饰）的不满。为了实施报复，他子承父业，研制出了一套可与钢铁战衣相媲美的装备。伊凡的技术引起了托尼的竞争对手，军火商贾斯丁·汉默（山姆·洛克威尔 Sam Rockwell 饰）的注意，他设法将伊凡劫持出狱，秘密研究取代钢铁侠。正当托尼苦于钯金属中毒造成的失意之时，他发现娜塔莉原来身负秘密使命，而自己的任性，也造成了与好友，空军上校罗尼（唐·钱德尔 Don Cheadle 饰）的反目，眼看局势就要失控…… 资源地址：http://www.pianyuan.la/m_DwwfWzcc0.html 钢铁侠3 Iron Man 3 (2013) 豆瓣评分 7.5 又名:铁甲奇侠3(港),钢铁人3(台),铁人3 地区:美国,中国大陆 类型:动作,科幻 导演:沙恩·布莱克 编剧:沙恩·布莱克德鲁·皮尔斯斯坦·李唐·赫克拉里·利伯杰克·科比 主演:小罗伯特·唐尼盖·皮尔斯格温妮斯·帕特洛本·金斯利唐·钱德尔保罗·贝坦尼丽贝卡·豪尔乔恩·费儒威廉姆·赛德勒詹姆斯·戴尔伊芳·齐玛泰·辛普金斯阿什利·汉弥尔顿王学圻范冰冰 imdb:tt1300854 自纽约事件以来，托尼·斯塔克（小罗伯特·唐尼 Robert Downey Jr. 饰）为前所未有的焦虑症所困扰。他疯狂投入钢铁侠升级版的研发，为此废寝忘食，甚至忽略了女友佩珀·波茨（格温妮斯·帕特洛 Gwyneth Paltrow 饰）的感受。与此同时，臭名昭著的恐怖头目曼达林（本·金斯利 Ben Kingsley 饰）制造了一连串的爆炸袭击事件，托尼当年最忠诚的保镖即在最近的一次袭击中身负重伤。未过多久，托尼、佩珀以及曾与他有过一面之缘的女植物学家玛雅（丽贝卡·豪尔 Rebecca Hall 饰）在家中遭到猛烈的炮火袭击，几乎丧命，而这一切似乎都与22年前那名偶然邂逅的科学家阿尔德里奇·基连（盖·皮尔斯 Guy Pearce 饰）及其终极生物的研究有关。 即使有精密先进的铠甲护身，也无法排遣发自心底的焦虑。被击碎一切的托尼，如何穿越来自地狱的熊熊烈火…… 资源地址：http://www.pianyuan.la/m_DttX0.html","categories":[{"name":"电影","slug":"电影","permalink":"http://yoursite.com/categories/%E7%94%B5%E5%BD%B1/"}],"tags":[{"name":"电影","slug":"电影","permalink":"http://yoursite.com/tags/%E7%94%B5%E5%BD%B1/"},{"name":"科幻","slug":"科幻","permalink":"http://yoursite.com/tags/%E7%A7%91%E5%B9%BB/"}],"keywords":[{"name":"电影","slug":"电影","permalink":"http://yoursite.com/categories/%E7%94%B5%E5%BD%B1/"}]},{"title":"电影-犯罪","slug":"电影-犯罪","date":"2020-05-02T12:49:22.000Z","updated":"2020-05-02T15:17:40.528Z","comments":true,"path":"2020/05/02/电影-犯罪/","link":"","permalink":"http://yoursite.com/2020/05/02/%E7%94%B5%E5%BD%B1-%E7%8A%AF%E7%BD%AA/","excerpt":"","text":"1. 暗夜逐仇 Run All Night (2015) 豆瓣评分 6.8 地区:美国 类型:剧情,动作,悬疑,惊悚,犯罪 导演:佐米·希尔拉 编剧:布拉德·英格尔斯比 主演:连姆·尼森乔尔·金纳曼珍尼希斯·罗德里格兹艾德·哈里斯尼克·诺特波伊德·霍布鲁克文森特·多诺费奥科曼布鲁斯·麦克吉尔博·纳普霍特·麦克卡兰尼帕特丽夏·考莱姆伯马尔科姆·古德温拉蒂沃杰·布克维奇詹姆斯·马丁内斯丹尼尔·斯图尔特·谢尔曼托尼·德文约翰·塞纳迭姆博Faye Yvette McQueen imdb:tt2199571 吉米（连姆·尼森 Liam Neeson 饰）是一位经验丰富，精明强干的职业杀手，效力于黑帮老大肖恩（艾德·哈里斯 Ed Harris 饰），两人合作多年，彼此之间结下了深厚的友谊。整日生活在鲜血和阴谋之后，吉米感到十分疲倦，他产生了想要“退休”的念头。 麦克（乔尔·金纳曼 Joel Kinnaman 饰）是吉米的儿子，父亲的特殊身份让两人的父子关系十分淡漠，然而，一场意外的发生让吉米杀死了肖恩的儿子丹尼（波伊德·霍布鲁克 Boyd Holbrook 饰），麦克亦成为了黑帮追杀的对象。为了保护儿子的安全，吉米重装上阵，和昔日旧友们展开了血腥厮杀。他们只有一夜的时间，一夜过去，吉米和麦克将会面临怎样的结局？ 资源地址：http://www.pianyuan.la/m_Dwb3Wcuc0.html 2. 最后的城堡 The Last Castle (2001) 豆瓣评分 7.8 地区:美国 类型:剧情,惊悚,犯罪 导演:F·加里·格雷 编剧:科特·维莫 主演:杰米·福克斯杰拉德·巴特勒科尔姆·米尼布鲁斯·麦克吉尔莱丝莉·比伯维奥拉·戴维斯 imdb:tt1197624 一座由城堡改建而来的军事监狱中迎来了一位重量级犯人——陆军将军埃尔文（罗伯特·雷德福 Robert Redford 饰），监狱长温特（James Gandolfini 饰）笑脸迎接，但很快开始厌恶对方身上的军人傲骨。埃尔文在监狱中听闻诸多温特的劣迹，但抱着安心服刑的心态让他并未多事，很快，温特剥夺军人尊严的惩罚激怒了埃尔文，埃尔文开始用自己的方式令众犯人找回尊严，并顺理成章成为犯人的领袖，感到自己受到威胁的温特愈发不可理喻，下令射杀一名犯人导致双方矛盾升级。 埃尔文决定组织实施监狱暴动，以使上级部门介入对温特的调查。这些昔日的军人、如今的犯人们抱着重新回到战场的觉悟，在高度组织和秘密的情况下完成了作战的准备，一次双重间谍的任务成功之后，犯人军团吹响了夺取监狱的号角！ 资源地址：http://www.pianyuan.la/m_Dw8xEH2c0.html 3. 守法公民 Law Abiding Citizen (2009) 豆瓣评分 8.0 又名:重案对决,知法玩法 地区:美国 类型:剧情,惊悚,犯罪 导演:F·加里·格雷 编剧:科特·维莫 主演:杰米·福克斯杰拉德·巴特勒科尔姆·米尼布鲁斯·麦克吉尔莱丝莉·比伯维奥拉·戴维斯 imdb:tt1197624 克莱德·谢尔顿（格莱德·巴特勒 Gerard Butler 饰）是居住在费城某小镇的一名研发人员，他有着美丽的妻子和可爱的女儿，生活幸福美满。但这一切都被突如其来的灾难所摧毁。某晚，两个暴徒闯入他的家中，妻子和女儿都受到残害。然而虽然证据确凿，但由于司法程序的迂腐和尼克·瑞斯（杰米·福克斯 Jamie Foxx 饰）助理执行官的堕落，最终让首犯克拉伦斯·多比（克里斯蒂安·斯多特 Christian Stolte 饰）因证据不足只得到10年徒刑。 本以为一切归于沉寂，但10年后当年未了的风波再起。怀着巨大仇恨的克莱德开始筹划展开报复，先是干掉了当年的从犯阿米，接着他很快找到了邪恶无耻的多比，并对其进行残酷的折磨与虐杀。克莱德的仇恨得到巨大的宣泄，但是他的复仇还未就此停止。他所针对的不只是那两个暴徒，而是整个腐朽堕落的司法系统…… 资源地址：http://www.pianyuan.la/m_685xczcc0.htm 4. 惩罚者 The Punisher (2004) 豆瓣评分 6.5 又名:神鬼制裁,制裁者 地区:美国,德国 类型:剧情,动作,惊悚,犯罪 导演:Jonathan Hensleigh 编剧:Jonathan HensleighMichael France 主演:托马斯·简约翰·特拉沃尔塔威尔·帕顿丽贝卡·罗梅恩本·福斯特 imdb:tt0330793 弗兰克·卡斯特（托马斯·简 Thomas Jane 饰）的生命中，绝大部分时间都在于死神赛跑。早年在海军陆战队服役，退役后又进入FBI。在枪炮火光中生活了多年之后，弗兰克不愿再整日收到死亡的威胁，家人整日为他担惊受怕。所以，他决定提前退休与妻儿享受平静的生活。可是，在最后的一次任务中，却因意外使一名无辜青年死亡。而这名青年的父亲却是坦帕市的大富商霍华德·桑特（约翰·特拉沃塔 John Travolta 饰）。为了给儿子报仇，霍华德向黑市发出了对弗兰克一家的绞杀令。不过弗兰克却侥幸在这场浩劫中存活下来。为了报仇，弗兰克不再寄望于法制，而是全副武装向霍华德发起挑战。面对霍华德组建的私人军队，弗兰克凭一己之力将如何应对？ 资源地址：http://www.pianyuan.la/m_68wcEzcc0.html 5.鹰眼 Eagle Eye (2008) 豆瓣评分 7.0 又名:鹰眼追击 地区:美国,德国 类型:动作,悬疑,惊悚 导演:D·J·卡卢索 编剧:约翰·格里恩Travis Wright 主演:希亚·拉博夫罗莎里奥·道森米歇尔·莫娜汉比利·鲍伯·松顿伊桑·恩布里 imdb:tt1059786 中东某地，美国军方的情报系统锁定了一名目标人物，总统不顾系统电脑运算出的建议处理方式，下令定点清除，由此引发了意外的连锁反应……公司小职员杰瑞（Shia LaBeouf 饰）的生活平淡乏味，时常手头拮据，连房租也成了问题，由于供职于军方的孪生兄弟意外过世，杰瑞赶回家中参加葬礼，但此行归来后，杰瑞发现家中居然堆满了武器，随即赶到的FBI破窗而入将他逮捕。与此同时，名叫蕾切尔（Michelle Monaghan 饰）的女人从大街上的电子广告牌上得知自己的儿子被某人绑架，绑架者拥有超乎寻常的能力，能够控制电子产品并监控一切。这名绑架者引导杰瑞摆脱FBI，最终上了蕾切尔的车，两名陌生人被迫合作，在FBI的追捕中落入了神秘绑架者的计划……究竟绑架者是谁？他又有何居心呢？ 资源地址：http://www.pianyuan.la/m_S85xWFcc0.html 6.抓住外国佬 Get the Gringo (2012) 豆瓣评分 7.4 又名:狱中无人(港),我如何度过暑假,How I Spent My Summer Vacation 地区:美国 类型:剧情,动作,犯罪 导演:阿德里安·格鲁伯格 编剧:阿德里安·格鲁伯格梅尔·吉布森 主演:梅尔·吉布森彼得·斯特曼迪恩·诺里斯鲍勃·冈顿索菲亚·斯尼加斯科特·科恩凯文·赫尔南德斯德洛丽丝·赫雷迪亚帕特里克·波查斯蒂芬妮·勒梅林 imdb:tt1567609 影片讲述了一个职业罪犯（梅尔·吉布森 Mel Gibson 饰）被墨西哥警方抓捕后送往一个充满毒品和犯罪的监狱，在一个9岁男孩的帮助下，他学会了如何在这样的监狱里生存下来。 本片由梅尔·吉布森和《启示》（Apocalypto）的原班人马在墨西哥的伊格阿连德监狱拍摄完成。梅尔 ·吉布森不会亲自执导这部影片，而是让《启示》的第一助理导演Ad rian Grunberg来当导演。不过这部影片的剧本是吉布森自己创作的，而且他也将亲自主演。 资源地址：http://www.pianyuan.la/m_DmwcWQcc0.html 劫案迷云 Stolen (2012) 豆瓣评分 6.1 又名:盗数计时(台),被窃之物,勋章,Medallion 地区:美国 类型:剧情,动作,惊悚,犯罪 导演:西蒙·韦斯特 编剧:大卫·古根海姆 主演:尼古拉斯·凯奇玛琳·阿克曼乔什·卢卡斯丹尼·赫斯顿马克·瓦雷萨米·盖尔 imdb:tt1656186 威尔·蒙哥马利（尼古拉斯·凯奇 Nicolas Cage 饰）的四人盗窃团伙在一次行窃银行金库时被埋伏在现场的FBI逮个正着，同伙文森特在混乱中中枪，而威尔将赃款付之一炬后独自被捕。八年后，威尔出狱，迎接他的是怀疑他当年私藏赃款的FBI探员安德森，以及女儿艾莉森（ 萨米·盖尔 Sami Gayle 饰）的敌视，威尔心力憔悴之际突然收到了文森特绑架艾莉森的消息。原来当年行窃失败后文森特陷入潦倒，为了讨还一千万中属于自己的部分他绑架了艾莉森。威尔试图向FBI求助却不被安德森信任，无奈只得独自拯救女儿，为此他不惜找到当年的搭档蕾莉(玛琳·阿克曼 Malin Akerman 饰)，准备再次犯案…… 资源地址：http://www.pianyuan.la/m_DmbXcpcc0.html 骗局 The Hoax (2006) 豆瓣评分 6.6 又名:大亨伪传,欺世盗名 地区:美国 类型:剧情,喜剧 导演:莱塞·霍尔斯道姆 编剧:威廉·惠勒 主演:理查·基尔朱莉·德尔佩霍普·戴维斯 imdb:tt0462338 无人不知的美国大亨霍华德·休斯在晚年过起了隐居生活，在人们的心中愈加神秘，然而有关他的任何一点新闻都会牵动美国人的神经。 这次引起轰动的是一个小作家艾尔文（理查·基尔），他声称得到授权为休斯写回忆录。新闻每天追踪着关于休斯的各种消息，休斯的传记也如约出版。艾尔文因此一夜致富，闻名全美。就在这一切进行的如火如荼时，艾尔文和他的亲友却感到惴惴不安，因为一切都是假的。他们根本没见过休斯，更没有什么授权，他们只是为了一个谎又扯一个谎，最终织成了弥天大谎。或许更让艾尔文悲哀的是，他已经难分生活的真实与虚假，他编造着别人的生活，也让自己走入了谎言的陷阱。 资源地址：http://www.pianyuan.la/m_6mtNczcc0.html 焦点 Focus (2015) 豆瓣评分 6.5 又名:决胜焦点(台),千骗万化 (港) 地区:美国 类型:剧情,喜剧,犯罪 导演:格伦·费卡拉约翰·里夸 编剧:格伦·费卡拉约翰·里夸 主演:玛格特·罗比威尔·史密斯罗德里格·桑托罗黄荣亮杰拉尔德·麦克雷尼罗伯特·泰勒乔·克里斯特多米尼克·福穆萨Christopher HeskeyStephanie HonoréAdrian MartinezLaura FlanneryBrennan BrownJustin LebrunDon Yesso imdb:tt2381941 威尔史密斯所饰演的尼基是一名经验丰富的诱导术大师，他善于赢得人们的信任，并将这种技巧视为一种专门的学问，当他遇见新手洁丝(玛格罗比 饰演)，在她的央求之下，他终于引领她进入犯罪的殿堂，聪明、美丽又懂心机的杰丝很快成为个中高手。三年后，当尼基准备进行他这一生中最大，最缜密也最复杂危险的一场骗局时，洁丝突然出现，不管她究竟是敌是友，尼基知道，她将可能是行动成功与否最大的变数。 资源地址：http://www.pianyuan.la/m_DwbXWf6c0.html 窗台上的男人 Man on a Ledge (2012) 豆瓣评分 7.1 又名:惊天换日(台),天际100分钟(港),顶楼救援 地区:美国 类型:惊悚,犯罪 导演:阿斯各·莱斯 编剧:埃里希·霍贝尔乔·霍贝尔Chris GorakPablo F. Fenjves 主演:萨姆·沃辛顿伊丽莎白·班克斯杰米·贝尔艾德·哈里斯安东尼·麦凯爱德华·伯恩斯提图斯·维里沃珍尼希斯·罗德里格兹凯拉·塞吉维克 imdb:tt1568338 尼克·卡西迪（萨姆·沃辛顿 Sam Worthington 饰）曾经是一名正直负责的警察，却因涉嫌盗窃4000万美元的钻石而获刑25年监禁。他唯一一个离开监狱的机会就是参加父亲葬礼，并在葬礼上趁机逃跑。然而令人不解的是，他并没有出境，而是到曼哈顿酒店开了个24楼的房间，精心擦洗一番后，只为在最繁华的纽约的注视中坠楼。他的举动很快引来了大批警察和媒体，一名年轻的谈判专家莉迪亚（伊丽莎白·班克斯 Elizabeth Banks 饰）试图将其劝回屋内，然而在循序渐进的劝说中，莉迪亚意识到尼克是被钻石的拥有者大卫（艾德·哈里斯 Ed Harris 饰）陷害入狱的，目的则是为了高额保险金。然而更令莉迪亚想不到的是，尼克的自杀只是一个声东击西的幌子，他的弟弟和女友正在街对面的珠宝库大楼中实施复仇计划…… 资源地址：http://www.pianyuan.la/m_Dw8zEzcc0.html 银行匪帮 Takers (2010) 豆瓣评分 6.9 又名:劫匪,狭路相逢,偷天抢地,Bone Deep 地区:美国 类型:动作,惊悚,犯罪 导演:John Luessenhop 编剧:Peter Allen加布里埃尔·卡塞斯Avery DuffJohn Luessenhop 主演:马特·狄龙保罗·沃克海登·克里斯滕森克里斯·布朗佐伊·索尔达娜迈克尔·伊雷伊德里斯·艾尔巴杰伊·赫尔南德兹T.I. imdb:tt1135084 戈登（Idris Elba 饰）等五人组成的银行抢劫团伙每隔一年作案一次，其成员AJ（海登•克里斯滕森 Hayden Christensen 饰）、约翰（保罗•沃克 Paul Walker 饰）各有所长，抢劫所得和合理的投资令他们过着奢华的生活。在最近的一次劫案中，他们引起了铁腕警探杰克（马特•狄龙 Matt Dillon 饰）的注意。 戈登团伙昔日的成员里弗斯新近出狱，里弗斯在狱中结识了俄罗斯黑帮，并取得一份银行的内线情报。里弗斯邀请众人行劫，否则就拿回当年属于自己的那份抢劫所得，尽管时间仓促，不符合团伙一贯的行事风格，然而一番讨论之下，他们决定再次出手。与此同时，杰克以抢劫所用的C4炸药为突破口，发现了这次有俄罗斯黑帮参与的抢劫计划图纸。距离计划时间所剩无几，这次抢劫会导致怎样的结局？ 资源地址：http://www.pianyuan.la/m_DwoxEzcc0.html","categories":[{"name":"电影","slug":"电影","permalink":"http://yoursite.com/categories/%E7%94%B5%E5%BD%B1/"}],"tags":[{"name":"电影","slug":"电影","permalink":"http://yoursite.com/tags/%E7%94%B5%E5%BD%B1/"},{"name":"犯罪","slug":"犯罪","permalink":"http://yoursite.com/tags/%E7%8A%AF%E7%BD%AA/"}],"keywords":[{"name":"电影","slug":"电影","permalink":"http://yoursite.com/categories/%E7%94%B5%E5%BD%B1/"}]},{"title":"Kafka命令行操作","slug":"Kafka命令行操作","date":"2020-05-02T11:27:08.000Z","updated":"2020-05-02T12:47:41.338Z","comments":true,"path":"2020/05/02/Kafka命令行操作/","link":"","permalink":"http://yoursite.com/2020/05/02/Kafka%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/","excerpt":"","text":"Kafka命令行操作 查看当前服务器中的所有topic 12[root@hadoop141 kafka]# bin&#x2F;kafka-topics.sh --zookeeper hadoop141:2181 --list[root@hadoop141 kafka]# 为空 因为还没有创建topic 创建topic 12[root@hadoop141 kafka]# bin&#x2F;kafka-topics.sh --zookeeper hadoop141:2181 --create --partitions 2 --replication-factor 2 --topic firstCreated topic &quot;first&quot;. 选项说明： –create：创建命令 –partitions：定义分区数 –replication-factor：定义副本数 –topic：定义 topic 名 进入 logs 文件夹 可以看到创建得 topic 123456789[root@hadoop141 kafka]# ll logs&#x2F;drwxr-xr-x 2 root root 4096 5月 2 17:00 first-0drwxr-xr-x 2 root root 4096 5月 2 17:00 first-1[root@hadoop142 kafka]# ll logs&#x2F;drwxr-xr-x. 2 root root 4096 5月 2 17:00 first-1[root@hadoop143 kafka]# ll logs&#x2F;drwxr-xr-x. 2 root root 4096 5月 2 17:00 first-0 可以看出 first 有两个分区 -0 -1，而且每个分区有两个副本。 注意事项： 当你设置的副本数量大于你配置的服务器数量(我的是3个)时：–replication-factor 4 会报错，所以 Kafka不像Hadoop那样可以配置超过服务器的数量 1234[root@hadoop141 kafka]# bin&#x2F;kafka-topics.sh --zookeeper hadoop141:2181 --create --partitions 3 --replication-factor 4 --topic firstError while executing topic command : replication factor: 4 larger than available brokers: 3[2020-05-02 17:16:12,981] ERROR org.apache.kafka.common.errors.InvalidReplicationFactorException: replication factor: 4 larger than available brokers: 3 (kafka.admin.TopicCommand$) 删除 topic 123[root@hadoop141 kafka]# bin&#x2F;kafka-topics.sh --zookeeper hadoop141:2181 --delete --topic firstTopic first is marked for deletion.Note: This will have no impact if delete.topic.enable is not set to true 需要server.properties中设置delete.topic.enable=true否则只是标记删除 12#删除topic功能使能delete.topic.enable&#x3D;true 这个选项设置为 true 的话 topic 会被删除掉 查看 logs/ 文件夹发现 first 已经被删除。 发送消息 123[root@hadoop141 kafka]# bin&#x2F;kafka-console-producer.sh --broker-list hadoop141:9092 --topic first&gt;hello&gt;world 消费消息 123[root@hadoop142 kafka]# bin&#x2F;kafka-console-consumer.sh --bootstrap-server hadoop141:9092 --from-beginning --topic firsthelloworld –from-beginning：会把主题中以往所有的数据都读取出来 查看某个Topic的详情 12345[root@hadoop143 kafka]# bin&#x2F;kafka-topics.sh --zookeeper hadoop141:2181 --describe --topic firstTopic:first PartitionCount:2 ReplicationFactor:3 Configs: Topic: first Partition: 0 Leader: 1 Replicas: 1,2,0 Isr: 1,2,0 Topic: first Partition: 1 Leader: 2 Replicas: 2,0,1 Isr: 2,0,1You have new mail in &#x2F;var&#x2F;spool&#x2F;mail&#x2F;root PartitionCount ReplicationFactor Configs 分区 副本 配置信息 修改分区数 123[root@hadoop143 kafka]# bin&#x2F;kafka-topics.sh --zookeeper hadoop141:2181 --alter --topic first --partitions 5WARNING: If partitions are increased for a topic that has a key, the partition logic or ordering of the messages will be affectedAdding partitions succeeded! 查看 logs/ 文件夹: 12345drwxr-xr-x. 2 root root 4096 5月 2 17:33 first-0drwxr-xr-x. 2 root root 4096 5月 2 17:31 first-1drwxr-xr-x. 2 root root 4096 5月 2 17:40 first-2drwxr-xr-x. 2 root root 4096 5月 2 17:40 first-3drwxr-xr-x. 2 root root 4096 5月 2 17:40 first-4","categories":[{"name":"框架","slug":"框架","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"},{"name":"BigData","slug":"框架/BigData","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/BigData/"},{"name":"Kafka","slug":"框架/BigData/Kafka","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/BigData/Kafka/"}],"tags":[{"name":"Kafka","slug":"Kafka","permalink":"http://yoursite.com/tags/Kafka/"}],"keywords":[{"name":"框架","slug":"框架","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"},{"name":"BigData","slug":"框架/BigData","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/BigData/"},{"name":"Kafka","slug":"框架/BigData/Kafka","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/BigData/Kafka/"}]},{"title":"Kafka安装部署","slug":"Kafka安装部署","date":"2020-05-02T10:59:00.000Z","updated":"2020-05-02T11:09:57.675Z","comments":true,"path":"2020/05/02/Kafka安装部署/","link":"","permalink":"http://yoursite.com/2020/05/02/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/","excerpt":"","text":"Kafka安装部署 集群规划 主机 Hadoop141 Hadoop142 Hadoop143 集群 ZK ZK ZK 集群 Kafka Kafka Kafka jar包下载 http://kafka.apache.org/downloads.html 集群部署 1、解压安装包 1[root@hadoop141 software]# tar -zxvf kafka_2.11-0.11.0.0.tgz &#x2F;opt&#x2F;module&#x2F; 2、修改解压文件 1[root@hadoop141 module]# mv kafka_2.11-0.11.0.0&#x2F; kafka 3、在/opt/module/kafka 目录下创建 logs 文件夹 12345678910[root@hadoop141 kafka]# mkdir logs[root@hadoop141 kafka]# ll总用量 56drwxr-xr-x 3 root root 4096 6月 23 2017 bindrwxr-xr-x 2 root root 4096 6月 23 2017 configdrwxr-xr-x 2 root root 4096 5月 2 15:13 libs-rw-r--r-- 1 root root 28824 6月 23 2017 LICENSEdrwxr-xr-x 2 root root 4096 5月 2 15:41 logs-rw-r--r-- 1 root root 336 6月 23 2017 NOTICEdrwxr-xr-x 2 root root 4096 6月 23 2017 site-docs 4、修改配置文件 1[root@hadoop141 kafka]# vim config&#x2F;server.properties 5、修改一下内容 123456789101112131415161718192021222324#broker的全局唯一编号，不能重复broker.id=0#删除topic功能使能delete.topic.enable=true#处理网络请求的线程数量num.network.threads=3#用来处理磁盘IO的现成数量num.io.threads=8#发送套接字的缓冲区大小socket.send.buffer.bytes=102400#接收套接字的缓冲区大小socket.receive.buffer.bytes=102400#请求套接字的缓冲区大小socket.request.max.bytes=104857600#kafka运行日志存放的路径 log.dirs=/opt/module/kafka/logs#topic在当前broker上的分区个数num.partitions=1#用来恢复和清理data下数据的线程数量num.recovery.threads.per.data.dir=1#segment文件保留的最长时间，超时将被删除log.retention.hours=168#配置连接Zookeeper集群地址zookeeper.connect=hadoop141:2181,hadoop142:2181,hadoop143:2181 6、配置环境变量 1[root@hadoop141 kafka]# vim &#x2F;etc&#x2F;profile 添加以下内容： 123#KAFKA_HOMEexport KAFKA_HOME=/opt/module/kafkaexport PATH=$PATH:$KAFKA_HOME/bin 7、分发安装包 1[root@hadoop141 module]# xrsync.sh kafka&#x2F; 注意：分发之后记得配置其他机器的环境变量 8 、分别在hadoop142和hadoop143上修改配置文件/opt/module/kafka/config/server.properties中的broker.id=1、broker.id=2 注：broker.id不得重复 9、 启动集群 依次在hadoop141、hadoop142、hadoop143节点上启动kafka 启动之前 先启动3台节点得 zookeeper： 12345[root@hadoop141 kafka]# cd &#x2F;opt&#x2F;module&#x2F;zookeeper-3.4.10&#x2F;[root@hadoop141 zookeeper-3.4.10]# bin&#x2F;zkServer.sh startZooKeeper JMX enabled by defaultUsing config: &#x2F;opt&#x2F;module&#x2F;zookeeper-3.4.10&#x2F;bin&#x2F;..&#x2F;conf&#x2F;zoo.cfgStarting zookeeper ... STARTE 然后启动Kafka： 123[root@hadoop141 kafka]# bin&#x2F;kafka-server-start.sh -daemon config&#x2F;server.properties[root@hadoop142 kafka]# bin&#x2F;kafka-server-start.sh -daemon config&#x2F;server.properties[root@hadoop143 kafka]# bin&#x2F;kafka-server-start.sh -daemon config&#x2F;server.properties 启动成功： 12345678910111213[root@hadoop141 kafka]# xcall.sh jps&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop141 jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;3657 Kafka3338 QuorumPeerMain3759 Jps&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop142 jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;3573 Jps3526 Kafka3215 QuorumPeerMain&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop143 jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;3602 Jps3214 QuorumPeerMain3518 Kafka 10、 关闭集群 123[atguigu@hadoop141 kafka]$ bin&#x2F;kafka-server-stop.sh stop[atguigu@hadoop142 kafka]$ bin&#x2F;kafka-server-stop.sh stop[atguigu@hadoop143 kafka]$ bin&#x2F;kafka-server-stop.sh stop 11、kafka集群启动脚本 1[root@hadoop141 bin]# vim &#x2F;bin&#x2F;kk.sh 123456789101112131415161718192021222324252627#!/bin/basharg=$#if((arg==0));thenecho no args;exit;ficase $1 in\"start\")&#123; for i in 'cat /opt/module/hadoop-2.7.2/etc/hadoop/slaves' do echo \"========== $i ==========\" ssh $i 'source /etc/profile&amp;&amp;/opt/module/kafka/bin/kafka-server-start.sh -daemon /opt/module/kafka/config/server.properties' echo $? done&#125;;;\"stop\")&#123; for i in 'cat /opt/module/hadoop-2.7.2/etc/hadoop/slaves' do echo \"========== $i ==========\" ssh $i 'source /etc/profile&amp;&amp;/opt/module/kafka/bin/kafka-server-stop.sh -daemon /opt/module/kafka/config/server.properties' echo $? done&#125;;;esac 12345678910111213141516171819202122232425#!/bin/basharg=$#if((arg==0));thenecho no args;exit;ficase $1 in\"start\")&#123; for i in hadoop141 hadoop142 hadoop143 do echo \"========== $i ==========\" ssh $i \"/opt/module/kafka/bin/kafka-server-start.sh -daemon /opt/module/kafka/config/server.properties\" done&#125;;;\"stop\")&#123; for i in hadoop141 hadoop142 hadoop143 do echo \"========== $i ==========\" ssh $i \"/opt/module/kafka/bin/kafka-server-stop.sh\" done&#125;;;esac 修改权限： 1[root@hadoop141 bin]# chmod 777 kk.sh","categories":[{"name":"框架","slug":"框架","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"},{"name":"BigData","slug":"框架/BigData","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/BigData/"},{"name":"Kafka","slug":"框架/BigData/Kafka","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/BigData/Kafka/"}],"tags":[{"name":"Kafka","slug":"Kafka","permalink":"http://yoursite.com/tags/Kafka/"}],"keywords":[{"name":"框架","slug":"框架","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"},{"name":"BigData","slug":"框架/BigData","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/BigData/"},{"name":"Kafka","slug":"框架/BigData/Kafka","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/BigData/Kafka/"}]},{"title":"LeetCode| 1099. 小于 K 的两数之和","slug":"LeetCode - 1099 小于 K 的两数之和","date":"2020-05-02T10:59:00.000Z","updated":"2020-05-04T09:13:40.508Z","comments":true,"path":"2020/05/02/LeetCode - 1099 小于 K 的两数之和/","link":"","permalink":"http://yoursite.com/2020/05/02/LeetCode%20-%201099%20%E5%B0%8F%E4%BA%8E%20K%20%E7%9A%84%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/","excerpt":"","text":"LeetCode 图解 | 1099. 小于 K 的两数之和 题目描述 给你一个整数数组 A 和一个整数 K，请在该数组中找出两个元素，使它们的和小于 K 但尽可能地接近 K，返回这两个元素的和。 如不存在这样的两个元素，请返回 -1。 示例 1： 1234输入：A &#x3D; [34,23,1,24,75,33,54,8], K &#x3D; 60输出：58解释：34 和 24 相加得到 58，58 小于 60，满足题意。 示例 2： 1234输入：A &#x3D; [10,20,30], K &#x3D; 15输出：-1解释：我们无法找到和小于 15 的两个元素。 提示： 1 &lt;= A.length &lt;= 100 1 &lt;= A[i] &lt;= 1000 1 &lt;= K &lt;= 2000 题目解析 传统的 TwoSum 都是要你找到等于 target 的配对，那么如果说要找到 大于/小于 target 的配对呢？ 这个时候 Hash 表的方法就很难 work 了，因为 Hash 表比较适合处理 等于 的情况 ！ 那么就需要考虑如何使用排序加双指针的方法来解决这个问题，这里，题目是要求小于 target 的数量，我们还是按照之前的分析思路来分析。 如果说当前左右指针指向的元素的和大于或者等于 target，那么势必我们需要向左移动右指针，让两个元素的和尽可能地小，当前头尾指针指向的元素和小于 target 的时候，这时我们需要记录答案，虽然这道题目里面没提，如果说要记录配对数量的话，这时并不是记录一个答案，如果说当前左指针固定，除了当前的右指针指向的元素，在左指针和右指针之间的数都是满足要求的，我们只需要加上这个区间的数量即可，当然如果数组中存在重复元素，那么我们就需要按照之前的套路遍历去重了，当然对于这道题来说，我们选择满足条件的最大值即可。 代码实现 123456789101112131415161718192021public int twoSumLessThanK(int[] A, int K) &#123; if (A == null || A.length == 0) &#123; return -1; &#125; Arrays.sort(A); int l = 0, r = A.length - 1; int result = Integer.MIN_VALUE; while (l &lt; r) &#123; if (A[l] + A[r] &gt;= K) &#123; r--; &#125; else &#123; result = Math.max(result, A[l] + A[r]); l++; &#125; &#125; return result == Integer.MIN_VALUE ? -1 : result;&#125; 转至：https://mp.weixin.qq.com/s/rnYcJGX4WFGpESbITmok1Q","categories":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"},{"name":"LeetCode","slug":"算法/LeetCode","permalink":"http://yoursite.com/categories/%E7%AE%97%E6%B3%95/LeetCode/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://yoursite.com/tags/LeetCode/"}],"keywords":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"},{"name":"LeetCode","slug":"算法/LeetCode","permalink":"http://yoursite.com/categories/%E7%AE%97%E6%B3%95/LeetCode/"}]},{"title":"Spring - 装配Spring Bean-通过注解（自动装配-@Autowired）","slug":"Spring-装配Spring-Bean-通过注解（自动装配-Autowired）","date":"2020-05-01T15:56:58.000Z","updated":"2020-05-01T15:57:31.276Z","comments":true,"path":"2020/05/01/Spring-装配Spring-Bean-通过注解（自动装配-Autowired）/","link":"","permalink":"http://yoursite.com/2020/05/01/Spring-%E8%A3%85%E9%85%8DSpring-Bean-%E9%80%9A%E8%BF%87%E6%B3%A8%E8%A7%A3%EF%BC%88%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D-Autowired%EF%BC%89/","excerpt":"","text":"自动装配-@Autowired 在上一节中还有一个对象注入问题没有解决，关于这个问题，在大部分情况下建议使用自动装配，可以减小配置的复杂度。 通过学习Spring IOC容器，我们知道Spring是先完成Bean的定义和生成，然后当Spring生成所有的Bean后，如果发现注解@AutoWired，他就会在Bean中查找，然后找到对应的类型，将其注入。 实现自动装配 定义实体类，Role.java 1234567891011121314151617package com.ssm.annotation.pojo;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Component;@Component(value = \"role\")public class Role &#123; @Value(\"1\") private Long idLong; @Value(\"roleName1\") private String roleNameString; @Value(\"note1\") private String noteString; /*省略get和set方法*/&#125; 生成一个Service接口 12345package com.ssm.annotation.service;public interface RoleService &#123; public void printRoleInfo();&#125; 生成Service接口实现类 1234567891011121314151617181920212223package com.ssm.annotation.service.impl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import com.ssm.annotation.pojo.Role;import com.ssm.annotation.service.RoleService;@Componentpublic class RoleServiceImpl implements RoleService&#123; @Autowired private Role role = null; public Role getRole() &#123; return role; &#125; public void setRole(Role role) &#123; this.role = role; &#125; @Override public void printRoleInfo() &#123; System.out.println(\"RoleServiceImpl\"+role.toString()); &#125;&#125; 这里的注解@AutoWired，表示在Spring IOC中定位的所有Bean后，到Sring IOC容器中按照类型查找对应的实例并将其注入。 扫描组件类 12345678package com.ssm.annotation.config;import org.springframework.context.annotation.ComponentScan;import com.ssm.annotation.pojo.Role;import com.ssm.annotation.service.impl.RoleServiceImpl;@ComponentScan(basePackageClasses = &#123;Role.class,RoleServiceImpl.class&#125;,basePackages = &#123;\"com.ssm.annotation.pojo\",\"com.ssm.annotation.service\"&#125;)public class PojoConfig &#123;&#125; 测试类 1234567891011121314151617package com.ssm.annotation.test;import org.springframework.context.ApplicationContext;import org.springframework.context.annotation.AnnotationConfigApplicationContext;import com.ssm.annotation.config.PojoConfig;import com.ssm.annotation.pojo.Role;import com.ssm.annotation.service.RoleService;public class AnnotationTest &#123; public static void main(String[] args) &#123; ApplicationContext context = new AnnotationConfigApplicationContext(PojoConfig.class); Role role = context.getBean(Role.class); RoleService roleService =context.getBean(RoleService.class); roleService.printRoleInfo(); &#125;&#125; 测试结果 1RoleServiceImplRole [idLong=1, roleNameString=roleName1, noteString=note1] 注：@AutoWired注解除了可以配置在属性上之外，还可以配置到方法上 1234567891011121314151617@Componentpublic class RoleServiceImpl implements RoleService&#123; private Role role = null; public Role getRole() &#123; return role; &#125; @Autowired public void setRole(Role role) &#123; this.role = role; &#125; @Override public void printRoleInfo() &#123; System.out.println(\"RoleServiceImpl\"+role.toString()); &#125;&#125;","categories":[{"name":"框架","slug":"框架","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"},{"name":"SSM","slug":"框架/SSM","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/SSM/"},{"name":"Spring","slug":"框架/SSM/Spring","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/SSM/Spring/"}],"tags":[{"name":"SSM","slug":"SSM","permalink":"http://yoursite.com/tags/SSM/"},{"name":"Spring","slug":"Spring","permalink":"http://yoursite.com/tags/Spring/"}],"keywords":[{"name":"框架","slug":"框架","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"},{"name":"SSM","slug":"框架/SSM","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/SSM/"},{"name":"Spring","slug":"框架/SSM/Spring","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/SSM/Spring/"}]},{"title":"Spring - 装配Spring Bean-通过注解（组件扫描）","slug":"Spring-装配Spring-Bean-通过注解（组件扫描）","date":"2020-05-01T15:54:58.000Z","updated":"2020-05-01T16:01:50.916Z","comments":true,"path":"2020/05/01/Spring-装配Spring-Bean-通过注解（组件扫描）/","link":"","permalink":"http://yoursite.com/2020/05/01/Spring-%E8%A3%85%E9%85%8DSpring-Bean-%E9%80%9A%E8%BF%87%E6%B3%A8%E8%A7%A3%EF%BC%88%E7%BB%84%E4%BB%B6%E6%89%AB%E6%8F%8F%EF%BC%89/","excerpt":"","text":"Annotation 通过注解（Annotation）去装配Soring Bean，可以减少对XML文件的配置，注解功能更为强大，他既能实现XML的功能，也能提供自动装配的功能。 方式 方式 作用 组件扫描(@Component与@ComponentScan) 通过定义资源的方式，让Spring IOC容器扫描对应的包，从而把Bean装配出来 自动装配（@Autowired） 通过注解定义，使得一些依赖关系可以通过注解完成 组件扫描 使用@Component装配Bean 首先定义一个POJO类，Role.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445package com.ssm.annotation.pojo;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Component;@Component(value = \"role\")public class Role &#123; @Value(\"1\") private Long idLong; @Value(\"roleName1\") private String roleNameString; @Value(\"note1\") private String noteString; public Long getIdLong() &#123; return idLong; &#125; public void setIdLong(Long idLong) &#123; this.idLong = idLong; &#125; public String getRoleNameString() &#123; return roleNameString; &#125; public void setRoleNameString(String roleNameString) &#123; this.roleNameString = roleNameString; &#125; public String getNoteString() &#123; return noteString; &#125; public void setNoteString(String noteString) &#123; this.noteString = noteString; &#125; @Override public String toString() &#123; return \"Role [idLong=\" + idLong + \", roleNameString=\" + roleNameString + \", noteString=\" + noteString + \"]\"; &#125;&#125; 1.注解@Component代表Spring IoC会把这个类扫描生成Bean实例， 其中value代表这个类在Spring中的ID,value可以省略不写@Component（&quot;role&quot;）,也可以直接写成@Component，Spring IOC会默认为类名，但是id会变成首字母小写的类名（”role“）。 2.注解@Value代表是值的注入。 定义一个Java Config类，好让Spring IOC知道要去哪里扫描对象 123456package com.ssm.pojo;import org.springframework.context.annotation.ComponentScan;@ComponentScanpublic class PojoConfig &#123;&#125; 1.包名要和POJO保持一致（就是Java Conofig类要和POJO类在同一个包下）。 2.@ComponentScan代表进行扫描，默认是扫描当前包的路径。 测试类 123456789101112131415package com.ssm.pojo.test;import org.springframework.context.ApplicationContext;import org.springframework.context.annotation.AnnotationConfigApplicationContext;import com.ssm.pojo.PojoConfig;import com.ssm.pojo.Role;public class test &#123; public static void main(String[] args) &#123; ApplicationContext context = new AnnotationConfigApplicationContext(PojoConfig.class); Role role = context.getBean(Role.class); System.out.print(role.toString()); &#125;&#125; 这里使用AnnotationConfigApplicationContext生成IOC容器，并获取PojoConfig.java类中扫描的对象。 运行结果 1Role [idLong=1, roleNameString=roleName1, noteString=note1] 通过上面的简单编写你会发现两个弊端： 对于@ComponentScan注解，你会发现他只是扫描所在java类的包，不能扫描指定的包 上面的注入只有值的注入，但是大部分需要的是对象的注入 所以为了解决这第一个问题（包的扫描），我们可以在@ComponentScan中引用两个配置项 basePackages basePackageClasses 配置项 作用 basePackages 可以配置一个Java包的数组，Spring会根据配置去扫描对应的包和子包，把配置好的Bean装配进来 basePackageClasses 可以配置多个Java类，会根据类所在的包，为该包和子包进行扫描装配对应配置的Bean @ComponentScan的使用 实体类POJO还是上面的Role.java 然后定义一个service接口 1234567package com.ssm.annotation.service;import com.ssm.annotation.pojo.Role;public interface RoleService &#123; public void printRoleInfo(Role role);&#125; 实现RoleService接口 1234567891011121314package com.ssm.annotation.service.impl;import org.springframework.stereotype.Component;import com.ssm.annotation.pojo.Role;import com.ssm.annotation.service.RoleService;@Componentpublic class RoleServiceImpl implements RoleService&#123; @Override public void printRoleInfo(Role role) &#123; System.out.println(role.toString()); &#125;&#125; 对Java Config类配置@ComponentScan 12345678910111213141516package com.ssm.annotation.config;import org.springframework.context.annotation.ComponentScan;import com.ssm.annotation.pojo.Role;import com.ssm.annotation.service.impl.RoleServiceImpl;//通过@ComponentScan中的basePackageClasses配置项，可以获取配置的类所在的包，为包和子包进行扫描装配对应配置的Bean//@ComponentScan(basePackageClasses = &#123;Role.class,RoleServiceImpl.class&#125;)//通过@ComponentS阿产能中的basePackages配置项，可以配置一个java包的数组，Spring会根据他的配置扫描对应的包和子包//@ComponentScan(basePackages = &#123;\"com.ssm.annotation.pojo\",\"com.ssm.annotation.service\"&#125;)//组合使用@ComponentScan(basePackageClasses = &#123;Role.class,RoleServiceImpl.class&#125;,basePackages = &#123;\"com.ssm.annotation.pojo\",\"com.ssm.annotation.service\"&#125;)public class PojoConfig &#123;&#125; 上面通过三种方式进行了配置： 1.basePackageClassess采用的是对包的扫描，他会扫描该包和子包，将配置好的Bean装配进来 2.basePackages 会对java包的数组进行扫描，并扫描对应的包和子包 注意： 对于扫描包的定义，可以采用任意一个@ComponentScan去定义，但是最好只定义一个@ComponentScan， 因为每定义一个@ComponentScan，Spring就会为所定义的类去生成一个新的对象，也就是所配置的Bean将会生成多个实例。 对于同一个@ComponentScan中部的basePackageClasses和basePackages，Spring会进行专门的区分， 也就是说在同一个@ComponentScan中即使你重复定义相同的包或者子包，也不会造成因同一个Bean的多次扫描，而导致一次配置会生成多个对象的情况。 测试类 1234567891011121314151617package com.ssm.annotation.test;import org.springframework.context.ApplicationContext;import org.springframework.context.annotation.AnnotationConfigApplicationContext;import com.ssm.annotation.config.PojoConfig;import com.ssm.annotation.pojo.Role;import com.ssm.annotation.service.RoleService;public class AnnotationTest &#123; public static void main(String[] args) &#123; ApplicationContext context = new AnnotationConfigApplicationContext(PojoConfig.class); Role role = context.getBean(Role.class); RoleService roleService =context.getBean(RoleService.class); roleService.printRoleInfo(role); &#125;&#125; 运行结果 1Role [idLong=1, roleNameString=roleName1, noteString=note1] 但是还没有解决对象注入的问题，下一节使用自动装配（@AutoWired）解对象注入问题。 自动装配-@AutoWired-下一节","categories":[{"name":"框架","slug":"框架","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"},{"name":"SSM","slug":"框架/SSM","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/SSM/"},{"name":"Spring","slug":"框架/SSM/Spring","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/SSM/Spring/"}],"tags":[{"name":"SSM","slug":"SSM","permalink":"http://yoursite.com/tags/SSM/"},{"name":"Spring","slug":"Spring","permalink":"http://yoursite.com/tags/Spring/"}],"keywords":[{"name":"框架","slug":"框架","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"},{"name":"SSM","slug":"框架/SSM","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/SSM/"},{"name":"Spring","slug":"框架/SSM/Spring","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/SSM/Spring/"}]},{"title":"Mybatis中的3种级联方式","slug":"Mybatis中的3种级联方式","date":"2020-05-01T15:50:16.000Z","updated":"2020-05-01T16:09:24.789Z","comments":true,"path":"2020/05/01/Mybatis中的3种级联方式/","link":"","permalink":"http://yoursite.com/2020/05/01/Mybatis%E4%B8%AD%E7%9A%843%E7%A7%8D%E7%BA%A7%E8%81%94%E6%96%B9%E5%BC%8F/","excerpt":"","text":"Mybatis中的级联 Mybatis的3种级联 鉴别器（discriminator）： 他是一个根据某些条件决定采用具体实现类的级联的方案，比如体检要根据性别区分。 一对一（association）： 比如你的省份证和你就是一种一对一的级联。 一对多（collection）： 比如班主任和学生就是一种一对多的级联。 值得注意的是，Mybatis中没有多对多的级联，因为多对多级联比较复杂。使用困难，而且可以通过两个一对多级联进行替换，所以Mybatis不支持多对多级联。 示例 确定一个雇员级联模型 分析雇员级联模型 1. 该模型是以雇员表为中心的。 2. 雇员表和工牌表示 “一对一” 的级联关系。 3. 雇员表和员工任务表示 “ 一对多” 的级联关系。 4. 员工任务表和任务表是 “一对一” 的级联关系。 5. 每个员工都会有一个体检表，它是根据性别的不同，得到不同的关联表，所以是 “鉴别器” 的级联关系。 表的设计 SQL语句 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156DROP TABLE IF EXISTS t_female_health_form;DROP TABLE IF EXISTS t_male_health_form;DROP TABLE IF EXISTS t_task;DROP TABLE IF EXISTS t_work_card;DROP TABLE IF EXISTS t_employee_task;DROP TABLE IF EXISTS t_employee;/*==============================================================*//* Table: t_employee 雇员表 *//*==============================================================*/CREATE TABLE t_employee( id INT(12) NOT NULL AUTO_INCREMENT, real_name VARCHAR(60) NOT NULL, sex INT(2) NOT NULL COMMENT '1 - 男 0 -女', birthday DATE NOT NULL, mobile VARCHAR(20) NOT NULL, email VARCHAR(60) NOT NULL, POSITION VARCHAR(20) NOT NULL, note VARCHAR(256), PRIMARY KEY (id));/*==============================================================*//* Table: t_employee_task 员工任务表 *//*==============================================================*/CREATE TABLE t_employee_task( id INT(12) NOT NULL auto_increment, emp_id INT(12) NOT NULL, task_id INT(12) NOT NULL, task_name VARCHAR(60) NOT NULL, note VARCHAR(256), PRIMARY KEY (id));/*==============================================================*//* Table: t_female_health_form 女性体检表 *//*==============================================================*/CREATE TABLE t_female_health_form( id INT(12) NOT NULL AUTO_INCREMENT, emp_id INT(12) NOT NULL, heart VARCHAR(64) NOT NULL, liver VARCHAR(64) NOT NULL, spleen VARCHAR(64) NOT NULL, lung VARCHAR(64) NOT NULL, kidney VARCHAR(64) NOT NULL, uterus VARCHAR(64) NOT NULL, note VARCHAR(256), PRIMARY KEY (id));/*==============================================================*//* Table: t_male_health_form 男性体检表 *//*==============================================================*/CREATE TABLE t_male_health_form( id INT(12) NOT NULL AUTO_INCREMENT, emp_id INT(12) NOT NULL, heart VARCHAR(64) NOT NULL, liver VARCHAR(64) NOT NULL, spleen VARCHAR(64) NOT NULL, lung VARCHAR(64) NOT NULL, kidney VARCHAR(64) NOT NULL, prostate VARCHAR(64) NOT NULL, note VARCHAR(256), PRIMARY KEY (id));/*==============================================================*//* Table: t_task 任务表 *//*==============================================================*/CREATE TABLE t_task( id INT(12) NOT NULL auto_increment, title VARCHAR(60) NOT NULL, context VARCHAR(256) NOT NULL, note VARCHAR(256), PRIMARY KEY (id));/*==============================================================*//* Table: t_work_card 工牌表 *//*==============================================================*/CREATE TABLE t_work_card( id INT(12) NOT NULL AUTO_INCREMENT, emp_id INT(12) NOT NULL, real_name VARCHAR(60) NOT NULL, department VARCHAR(20) NOT NULL, mobile VARCHAR(20) NOT NULL, POSITION VARCHAR(30) NOT NULL, note VARCHAR(256), PRIMARY KEY (id));/*==============================================================*//* 外键约束 *//*==============================================================*/ALTER TABLE t_employee_task ADD CONSTRAINT FK_Reference_4 FOREIGN KEY (emp_id) REFERENCES t_employee (id) ON DELETE RESTRICT ON UPDATE RESTRICT;ALTER TABLE t_employee_task ADD CONSTRAINT FK_Reference_8 FOREIGN KEY (task_id) REFERENCES t_task (id) ON DELETE RESTRICT ON UPDATE RESTRICT;ALTER TABLE t_female_health_form ADD CONSTRAINT FK_Reference_5 FOREIGN KEY (emp_id) REFERENCES t_employee (id) ON DELETE RESTRICT ON UPDATE RESTRICT;ALTER TABLE t_male_health_form ADD CONSTRAINT FK_Reference_6 FOREIGN KEY (emp_id) REFERENCES t_employee (id) ON DELETE RESTRICT ON UPDATE RESTRICT;ALTER TABLE t_work_card ADD CONSTRAINT FK_Reference_7 FOREIGN KEY (emp_id) REFERENCES t_employee (id) ON DELETE RESTRICT ON UPDATE RESTRICT;/*==============================================================*//* 插入测试数据 *//*==============================================================*//*雇员表*/INSERT INTO t_employee(id,real_name,sex,birthday,mobile,email,POSITION,note) VALUES (DEFAULT,'employee_1',1,'2000-04-23','18773459883','employee_1@.com','Programmer','小刘');INSERT INTO t_employee(id,real_name,sex,birthday,mobile,email,POSITION,note) VALUES (DEFAULT,'employee_2',1,'2000-01-03','18773324883','employee_2@.com','Programmer','小王');INSERT INTO t_employee(id,real_name,sex,birthday,mobile,email,POSITION,note) VALUES (DEFAULT,'employee_3',0,'2000-02-20','18773443555','employee_3@.com','Programmer','小徐');INSERT INTO t_employee(id,real_name,sex,birthday,mobile,email,POSITION,note) VALUES (DEFAULT,'employee_4',0,'2000-04-29','18773464467','employee_4@.com','Programmer','小陆');/*男性体检表*/INSERT INTO t_male_health_form(id,emp_id,heart,liver,spleen,lung,kidney,prostate,note) VALUES(DEFAULT,1,'normal','normal','normal','normal','normal','normal','***医院');INSERT INTO t_male_health_form(id,emp_id,heart,liver,spleen,lung,kidney,prostate,note) VALUES(DEFAULT,2,'normal','normal','normal','normal','normal','normal','***医院');/*女性体检表*/INSERT INTO t_female_health_form(id,emp_id,heart,liver,spleen,lung,kidney,uterus,note) VALUES(DEFAULT,3,'normal','normal','normal','normal','normal','normal','***医院');INSERT INTO t_female_health_form(id,emp_id,heart,liver,spleen,lung,kidney,uterus,note) VALUES(DEFAULT,4,'normal','normal','normal','normal','normal','normal','***医院');/*工牌表*/INSERT INTO t_work_card(id,emp_id,real_name,department,mobile,POSITION,note) VALUES (DEFAULT,1,'employee_1','Tech-Dept','employee_1@.com','Programmer','小刘');INSERT INTO t_work_card(id,emp_id,real_name,department,mobile,POSITION,note) VALUES (DEFAULT,2,'employee_2','Tech-Dept','employee_2@.com','Programmer','小王');INSERT INTO t_work_card(id,emp_id,real_name,department,mobile,POSITION,note) VALUES (DEFAULT,3,'employee_3','Tech-Dept','employee_3@.com','Programmer','小徐');INSERT INTO t_work_card(id,emp_id,real_name,department,mobile,POSITION,note) VALUES (DEFAULT,4,'employee_4','Tech-Dept','employee_4@.com','Programmer','小陆');/*任务表*/INSERT INTO t_task(id,title,context,note) VALUE(DEFAULT,'前端','HTML+CSS+JS+JQuery+Bootstrap+Ajax','前端开发');INSERT INTO t_task(id,title,context,note) VALUE(DEFAULT,'后端','Spring+SpringMVC+Mybatis+Redis','后端开发');/*员工任务表*/INSERT INTO t_employee_task(id,emp_id,task_id,task_name,note) VALUES(DEFAULT,1,2,'后端开发','后端');INSERT INTO t_employee_task(id,emp_id,task_id,task_name,note) VALUES(DEFAULT,2,2,'后端开发','后端');INSERT INTO t_employee_task(id,emp_id,task_id,task_name,note) VALUES(DEFAULT,3,1,'前端开发','前端');INSERT INTO t_employee_task(id,emp_id,task_id,task_name,note) VALUES(DEFAULT,4,1,'前端开发','前端'); 示例项目主体结构 示例代码 建立POJO 建立POJO之前先建立一个性别枚举类和一个自定义TypeHandler类 1. SexEnum.java 1234567891011121314151617181920212223242526272829303132333435363738394041package com.ssm.enumeration;/** * 性别枚举 */public enum SexEnum &#123; MALE(1,\"男\"), FEMALE(0,\"女\"); private int id; private String name; public void setId(int id) &#123; this.id = id; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getId() &#123; return id; &#125; public String getName() &#123; return name; &#125; SexEnum(int id, String name) &#123; this.id = id; this.name = name; &#125; public static SexEnum getSexById(int id)&#123; for (SexEnum sex : SexEnum.values())&#123; if (sex.getId() == id)&#123; return sex; &#125; &#125; return null; &#125;&#125; SexTypeHandler.java 1234567891011121314151617181920212223242526272829303132333435package com.ssm.typeHandler;import com.ssm.enumeration.SexEnum;import org.apache.ibatis.type.BaseTypeHandler;import org.apache.ibatis.type.JdbcType;import java.sql.CallableStatement;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;public class SexTypeHandler extends BaseTypeHandler&lt;SexEnum&gt; &#123; @Override public SexEnum getNullableResult(ResultSet rs, String name) throws SQLException &#123; int sex = rs.getInt(name); return SexEnum.getSexById(sex); &#125; @Override public SexEnum getNullableResult(ResultSet rs, int index) throws SQLException &#123; int sex = rs.getInt(index); return SexEnum.getSexById(sex); &#125; @Override public SexEnum getNullableResult(CallableStatement cs, int index) throws SQLException &#123; int sex = cs.getInt(index); return SexEnum.getSexById(sex); &#125; @Override public void setNonNullParameter(PreparedStatement ps, int index, SexEnum sex, JdbcType jdbcType) throws SQLException &#123; ps.setInt(index, sex.getId()); &#125;&#125; 主要实体类 HealthFoem.java 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394package com.ssm.pojo;/** * 体检实体类 */public class HealthForm &#123; private Long id; private Long empId; private String heart; private String liver; private String spleen; private String lung; private String kidney; private String note; public Long getId() &#123; return id; &#125; public void setId(Long id) &#123; this.id = id; &#125; public Long getEmpId() &#123; return empId; &#125; public void setEmpId(Long empId) &#123; this.empId = empId; &#125; public String getHeart() &#123; return heart; &#125; public void setHeart(String heart) &#123; this.heart = heart; &#125; public String getLiver() &#123; return liver; &#125; public void setLiver(String liver) &#123; this.liver = liver; &#125; public String getSpleen() &#123; return spleen; &#125; public void setSpleen(String spleen) &#123; this.spleen = spleen; &#125; public String getLung() &#123; return lung; &#125; public void setLung(String lung) &#123; this.lung = lung; &#125; public String getKidney() &#123; return kidney; &#125; public void setKidney(String kidney) &#123; this.kidney = kidney; &#125; public String getNote() &#123; return note; &#125; public void setNote(String note) &#123; this.note = note; &#125; @Override public String toString() &#123; return \"HealthForm&#123;\" + \"id=\" + id + \", empId=\" + empId + \", heart='\" + heart + '\\'' + \", liver='\" + liver + '\\'' + \", spleen='\" + spleen + '\\'' + \", lung='\" + lung + '\\'' + \", kidney='\" + kidney + '\\'' + \", note='\" + note + '\\'' + '&#125;'; &#125;&#125; MaleHealthForm.java 1234567891011121314151617package com.ssm.pojo;/** * 男性体检实体类 */public class MaleHealthForm extends HealthForm &#123; private String prostate; public String getProstate() &#123; return prostate; &#125; public void setProstate(String prostate) &#123; this.prostate = prostate; &#125;&#125; FemaleHealthForm.java 1234567891011121314151617package com.ssm.pojo;/** * 女性体检实体类 */public class FemaleHealthForm extends HealthForm &#123; private String uterus; public String getUterus() &#123; return uterus; &#125; public void setUterus(String uterus) &#123; this.uterus = uterus; &#125;&#125; WorkCard.java 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283package com.ssm.pojo;/** * 工牌卡实体类 */public class WorkCard &#123; private Long id; private Long empId; private String realName; private String department; private String mobile; private String position; private String note; public Long getId() &#123; return id; &#125; public void setId(Long id) &#123; this.id = id; &#125; public Long getEmpId() &#123; return empId; &#125; public void setEmpId(Long empId) &#123; this.empId = empId; &#125; public String getRealName() &#123; return realName; &#125; public void setRealName(String realName) &#123; this.realName = realName; &#125; public String getDepartment() &#123; return department; &#125; public void setDepartment(String department) &#123; this.department = department; &#125; public String getMobile() &#123; return mobile; &#125; public void setMobile(String mobile) &#123; this.mobile = mobile; &#125; public String getPosition() &#123; return position; &#125; public void setPosition(String position) &#123; this.position = position; &#125; public String getNote() &#123; return note; &#125; public void setNote(String note) &#123; this.note = note; &#125; @Override public String toString() &#123; return \"WorkCard&#123;\" + \"id=\" + id + \", empId=\" + empId + \", realName='\" + realName + '\\'' + \", department='\" + department + '\\'' + \", mobile='\" + mobile + '\\'' + \", position='\" + position + '\\'' + \", note='\" + note + '\\'' + '&#125;'; &#125;&#125; Task.java 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253package com.ssm.pojo;/** * 任务实体类 */public class Task &#123; private Long id; private String title; private String context; private String note; public Long getId() &#123; return id; &#125; public void setId(Long id) &#123; this.id = id; &#125; public String getTitle() &#123; return title; &#125; public void setTitle(String title) &#123; this.title = title; &#125; public String getContext() &#123; return context; &#125; public void setContext(String context) &#123; this.context = context; &#125; public String getNote() &#123; return note; &#125; public void setNote(String note) &#123; this.note = note; &#125; @Override public String toString() &#123; return \"Task&#123;\" + \"id=\" + id + \", title='\" + title + '\\'' + \", context='\" + context + '\\'' + \", note='\" + note + '\\'' + '&#125;'; &#125;&#125; EmployeeTask.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263package com.ssm.pojo;/** * 雇员任务实体类 */public class EmployeeTask &#123; private Long id; private Long empId; private Task task = null; private String taskName; private String note; public Long getId() &#123; return id; &#125; public void setId(Long id) &#123; this.id = id; &#125; public Long getEmpId() &#123; return empId; &#125; public void setEmpId(Long empId) &#123; this.empId = empId; &#125; public Task getTask() &#123; return task; &#125; public void setTask(Task task) &#123; this.task = task; &#125; public String getTaskName() &#123; return taskName; &#125; public void setTaskName(String taskName) &#123; this.taskName = taskName; &#125; public String getNote() &#123; return note; &#125; public void setNote(String note) &#123; this.note = note; &#125; @Override public String toString() &#123; return \"EmployeeTask&#123;\" + \"id=\" + id + \", empId=\" + empId + \", task=\" + task + \", taskName='\" + taskName + '\\'' + \", note='\" + note + '\\'' + '&#125;'; &#125;&#125; Employee.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102package com.ssm.pojo;import java.util.Date;import java.util.List;import com.ssm.enumeration.SexEnum;/** * 雇员实体类 */public class Employee &#123; private Long id; private String realName; private SexEnum sex = null; private Date birthday; private String mobile; private String email; private String position; private String note; //工牌按一对一级联 private WorkCard workCard; //雇员任务，一对多级联 private List&lt;EmployeeTask&gt; employeeTaskList = null; public Long getId() &#123; return id; &#125; public void setId(Long id) &#123; this.id = id; &#125; public String getRealName() &#123; return realName; &#125; public void setRealName(String realName) &#123; this.realName = realName; &#125; public SexEnum getSex() &#123; return sex; &#125; public void setSex(SexEnum sex) &#123; this.sex = sex; &#125; public Date getBirthday() &#123; return birthday; &#125; public void setBirthday(Date birthday) &#123; this.birthday = birthday; &#125; public String getMobile() &#123; return mobile; &#125; public void setMobile(String mobile) &#123; this.mobile = mobile; &#125; public String getEmail() &#123; return email; &#125; public void setEmail(String email) &#123; this.email = email; &#125; public String getPosition() &#123; return position; &#125; public void setPosition(String position) &#123; this.position = position; &#125; public String getNote() &#123; return note; &#125; public void setNote(String note) &#123; this.note = note; &#125; public WorkCard getWorkCard() &#123; return workCard; &#125; public void setWorkCard(WorkCard workCard) &#123; this.workCard = workCard; &#125; public List&lt;EmployeeTask&gt; getEmployeeTaskList() &#123; return employeeTaskList; &#125; public void setEmployeeTaskList(List&lt;EmployeeTask&gt; employeeTaskList) &#123; this.employeeTaskList = employeeTaskList; &#125; @Override public String toString() &#123; return \"Employee&#123;\" + \"id=\" + id + \", realName='\" + realName + '\\'' + \", sex=\" + sex + \", birthday=\" + birthday + \", mobile='\" + mobile + '\\'' + \", email='\" + email + '\\'' + \", position='\" + position + '\\'' + \", note='\" + note + '\\'' + \", workCard=\" + workCard + \", employeeTaskList=\" + employeeTaskList + '&#125;'; &#125;&#125; MaleEmployee.java 123456789101112131415161718package com.ssm.pojo;/** * 男雇员实体类 */public class MaleEmployee extends Employee &#123; private MaleHealthForm maleHealthForm = null; public MaleHealthForm getMaleHealthForm() &#123; return maleHealthForm; &#125; public void setMaleHealthForm(MaleHealthForm maleHealthForm) &#123; this.maleHealthForm = maleHealthForm; &#125;&#125; FemaleEmployee.java 123456789101112131415161718package com.ssm.pojo;/** * 女雇员实体类 */public class FemaleEmployee extends Employee &#123; private FemaleHealthForm femaleHealthForm = null; public FemaleHealthForm getFemaleHealthForm() &#123; return femaleHealthForm; &#125; public void setFemaleHealthForm(FemaleHealthForm femaleHealthForm) &#123; this.femaleHealthForm = femaleHealthForm; &#125;&#125; 配置映射文件Mapper * 数据库文件和日志文件 jdbc.properties 1234database.driver=com.mysql.jdbc.Driverdatabase.url=jdbc:mysql://localhost:3306/employeedatabase.username=rootdatabase.password=123456 log4j.properties 12345log4j.rootLogger=DEBUG , stdoutlog4j.logger.org.mybatis=DEBUGlog4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=%5p %d %C: %m%n mybatis_config.xml 123456789101112131415161718192021222324252627&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;&lt;configuration&gt; &lt;properties resource=\"jdbc.properties\" /&gt; &lt;typeAliases&gt; &lt;package name=\"com.ssm.pojo\"/&gt; &lt;/typeAliases&gt; &lt;environments default=\"development\"&gt; &lt;environment id=\"development\"&gt; &lt;transactionManager type=\"JDBC\"&gt;&lt;/transactionManager&gt; &lt;dataSource type=\"POOLED\"&gt; &lt;property name=\"driver\" value=\"$&#123;database.driver&#125;\"/&gt; &lt;property name=\"url\" value=\"$&#123;database.url&#125;\"/&gt; &lt;property name=\"username\" value=\"$&#123;database.username&#125;\"/&gt; &lt;property name=\"password\" value=\"$&#123;database.password&#125;\"/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;package name=\"com.ssm.mapper\"/&gt; &lt;/mappers&gt;&lt;/configuration&gt; 实体类映射文件和接口 TaskMapper.java 123456789package com.ssm.mapper;import com.ssm.pojo.Task;import java.util.List;public interface TaskMapper &#123; public Task selTask(Long id);&#125; TaskMapper.xml 12345678910&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"com.ssm.mapper.TaskMapper\"&gt; &lt;select id=\"selTask\" parameterType=\"long\" resultType=\"task\"&gt; select id,title,context,note from t_task where id = #&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt; WorkCardMapper.java 123456789package com.ssm.mapper;import com.ssm.pojo.WorkCard;import java.util.List;public interface WorkCardMapper &#123; public WorkCard selWorkCardByEmpId(Long empid);&#125; WorkCardMapper.xml 12345678910&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"com.ssm.mapper.WorkCardMapper\"&gt; &lt;select id=\"selWorkCardByEmpId\" parameterType=\"long\" resultType=\"workCard\"&gt; select id,emp_id as empid,real_name as realName,department,mobile,position,note from t_work_card where emp_id = #&#123;empid&#125; &lt;/select&gt;&lt;/mapper&gt; EmployeeTaskMapper.java 123456789package com.ssm.mapper;import com.ssm.pojo.EmployeeTask;import java.util.List;public interface EmployeeTaskMapper &#123; public EmployeeTask selEmployeeTaskByEmpId(Long empId);&#125; EmployeeTaskMapper.xml 123456789101112131415161718&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"com.ssm.mapper.EmployeeTaskMapper\"&gt; &lt;resultMap id=\"EmployeeTaskMap\" type=\"com.ssm.pojo.EmployeeTask\"&gt; &lt;id property=\"empId\" column=\"emp_id\"&gt;&lt;/id&gt; &lt;result property=\"taskName\" column=\"task_name\"&gt;&lt;/result&gt; &lt;result property=\"note\" column=\"note\"&gt;&lt;/result&gt; &lt;!--雇员任务表一对一级联--&gt; &lt;association property=\"task\" column=\"task_id\" select=\"com.ssm.mapper.TaskMapper.selTask\"/&gt; &lt;/resultMap&gt; &lt;select id=\"selEmployeeTaskByEmpId\" parameterType=\"long\" resultMap=\"EmployeeTaskMap\"&gt; select id,emp_id,task_name,note,task_id from t_employee_task where emp_id = #&#123;empId&#125; &lt;/select&gt;&lt;/mapper&gt; MaleHealthFormMapper.java 123456789package com.ssm.mapper;import com.ssm.pojo.MaleHealthForm;import java.util.List;public interface MaleHealthFormMapper &#123; public MaleHealthForm selMaleHealthForm(Long id);&#125; MaleHealthFormMapper.xml 12345678910&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"com.ssm.mapper.MaleHealthFormMapper\"&gt; &lt;select id=\"selMaleHealthForm\" parameterType=\"long\" resultType=\"maleHealthForm\"&gt; select id,emp_id as empId,heart,liver,spleen,lung,kidney,prostate,note from t_male_health_form where emp_id = #&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt; FemaleHealthFormMapper.java 12345678package com.ssm.mapper;import com.ssm.pojo.FemaleHealthForm;public interface FemaleHealthFormMapper &#123; public FemaleHealthForm selFemaleHealthForm(Long id);&#125; FemaleHealthFormMapper.xml 12345678910&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"com.ssm.mapper.FemaleHealthFormMapper\"&gt; &lt;select id=\"selFemaleHealthForm\" parameterType=\"long\" resultType=\"femaleHealthForm\"&gt; select id,emp_id as empId,heart,liver,spleen,lung,kidney,uterus,note from t_female_health_form where emp_id = #&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt; EmployeeMapper.java 12345678package com.ssm.mapper;import com.ssm.pojo.Employee;public interface EmployeeMapper &#123; public Employee selEmployee(Long id);&#125; EmployeeMapper.xml 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"com.ssm.mapper.EmployeeMapper\"&gt; &lt;resultMap id=\"employee\" type=\"com.ssm.pojo.Employee\"&gt; &lt;id property=\"id\" column=\"id\"/&gt; &lt;result property=\"realName\" column=\"real_name\"/&gt; &lt;result property=\"sex\" column=\"sex\" typeHandler=\"com.ssm.typeHandler.SexTypeHandler\"/&gt; &lt;result property=\"birthday\" column=\"birthday\"/&gt; &lt;result property=\"mobile\" column=\"mobile\"/&gt; &lt;result property=\"email\" column=\"email\"/&gt; &lt;result property=\"position\" column=\"position\"/&gt; &lt;result property=\"note\" column=\"note\"/&gt; &lt;!--工牌表一对一级联--&gt; &lt;association property=\"workCard\" column=\"id\" select=\"com.ssm.mapper.WorkCardMapper.selWorkCardByEmpId\"/&gt; &lt;!--雇员任务，一对多级联--&gt; &lt;collection property=\"employeeTaskList\" column=\"id\" select=\"com.ssm.mapper.EmployeeTaskMapper.selEmployeeTaskByEmpId\"/&gt; &lt;!--鉴别器--&gt; &lt;discriminator javaType=\"long\" column=\"sex\"&gt; &lt;case value=\"1\" resultMap=\"maleHealthFormMapper\"/&gt; &lt;case value=\"0\" resultMap=\"femaleHealthFormMapper\"/&gt; &lt;/discriminator&gt; &lt;/resultMap&gt; &lt;resultMap id=\"maleHealthFormMapper\" type=\"com.ssm.pojo.MaleEmployee\" extends=\"employee\"&gt; &lt;association property=\"maleHealthForm\" column=\"id\" select=\"com.ssm.mapper.MaleHealthFormMapper.selMaleHealthForm\"/&gt; &lt;/resultMap&gt; &lt;resultMap id=\"femaleHealthFormMapper\" type=\"com.ssm.pojo.FemaleEmployee\" extends=\"employee\"&gt; &lt;association property=\"femaleHealthForm\" column=\"id\" select=\"com.ssm.mapper.FemaleHealthFormMapper.selFemaleHealthForm\"/&gt; &lt;/resultMap&gt; &lt;select id=\"selEmployee\" parameterType=\"long\" resultMap=\"employee\"&gt; select id, real_name as realName, sex, birthday, mobile, email, position,note from t_employee where id = #&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt; 测试类 EmployeeTest.java 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package com.ssm.test;import com.ssm.mapper.EmployeeMapper;import com.ssm.mapper.FemaleHealthFormMapper;import com.ssm.mapper.MaleHealthFormMapper;import com.ssm.pojo.*;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.apache.log4j.Logger;import java.io.InputStream;public class EmployeeTest &#123; public static void main(String[] args) &#123; selEmployee(); &#125; public static void selEmployee()&#123; SqlSession session = null; Logger logger = Logger.getLogger(EmployeeTask.class); try&#123; InputStream is = Resources.getResourceAsStream(\"mybatis-config.xml\"); SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(is); session = factory.openSession(); EmployeeMapper employeeMapper = session.getMapper(EmployeeMapper.class); Employee employee = employeeMapper.selEmployee(3L); System.out.println(\"员工基本信息：\"+employee.toString()); if ((employee.getSex().toString()).equals(\"MALE\"))&#123; MaleHealthFormMapper maleHealthFormMapper = session.getMapper(MaleHealthFormMapper.class); MaleHealthForm maleHealthForm = maleHealthFormMapper.selMaleHealthForm(employee.getId()); System.out.println(\"员工体检：\"+maleHealthForm.toString()); &#125;else if ((employee.getSex().toString()).equals(\"FEMALE\"))&#123; FemaleHealthFormMapper femaleHealthFormMapper = session.getMapper(FemaleHealthFormMapper.class); FemaleHealthForm femaleHealthForm = femaleHealthFormMapper.selFemaleHealthForm(employee.getId()); System.out.println(\"员工体检：\"+femaleHealthForm.toString()); &#125; session.commit(); &#125;catch (Exception e)&#123; e.printStackTrace(); &#125;finally &#123; if(session != null)&#123; session.close(); &#125; &#125; &#125;&#125; 测试结果 12员工基本信息：Employee&#123;id=3, realName='employee_3', sex=FEMALE, birthday=Sun Feb 20 00:00:00 CST 2000, mobile='18773443555', email='employee_3@.com', position='Programmer', note='小徐', workCard=WorkCard&#123;id=3, empId=3, realName='employee_3', department='Tech-Dept', mobile='employee_3@.com', position='Programmer', note='小徐'&#125;, employeeTaskList=[EmployeeTask&#123;id=3, empId=3, task=Task&#123;id=1, title='前端', context='HTML+CSS+JS+JQuery+Bootstrap+Ajax', note='前端开发'&#125;, taskName='前端开发', note='前端'&#125;]&#125;员工体检：HealthForm&#123;id=1, empId=3, heart='normal', liver='normal', spleen='normal', lung='normal', kidney='normal', note='***医院'&#125; 注意 特别注意 EmployeeMapper.xml 的映射文件 association元素：对工牌进行一对一级联，其select元素指向SQL，将通过column的id作为参数进行传递，然后将结果返回给雇员POJO的属性workCard。 collection元素：一对多级联，其select元素指向SQL，将通过column的id作为参数进行传递，然后将结果返回给雇员POJO的属性employeeTaskList。 discrimination元素：鉴别器，它的属性column的值代表使用哪个字段进行鉴别，这里的是sex，而它的子元素case，则用于进行区分，类似于java中的switch…case…语句。而resultMap属性表示采用哪个ResultMap去映射，比如sex=1，则使用maleHealthFormMap进行映射。","categories":[{"name":"框架","slug":"框架","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"},{"name":"SSM","slug":"框架/SSM","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/SSM/"},{"name":"Mybatis","slug":"框架/SSM/Mybatis","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/SSM/Mybatis/"}],"tags":[{"name":"Mybatis","slug":"Mybatis","permalink":"http://yoursite.com/tags/Mybatis/"},{"name":"SSM","slug":"SSM","permalink":"http://yoursite.com/tags/SSM/"}],"keywords":[{"name":"框架","slug":"框架","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"},{"name":"SSM","slug":"框架/SSM","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/SSM/"},{"name":"Mybatis","slug":"框架/SSM/Mybatis","permalink":"http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/SSM/Mybatis/"}]},{"title":"Linux文件与目录结构","slug":"Linux文件与目录结构","date":"2020-05-01T15:40:06.000Z","updated":"2020-05-01T15:40:49.200Z","comments":true,"path":"2020/05/01/Linux文件与目录结构/","link":"","permalink":"http://yoursite.com/2020/05/01/Linux%E6%96%87%E4%BB%B6%E4%B8%8E%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/","excerpt":"","text":"Linux文件与目录结构 Linux文件 Linux系统中一切皆文件。 Linux目录结构 1.安装tree命令 系统中默认没有tree这个命令的，需要安装 安装命令： 1yum install tree Ubuntu系统安装命令： 1sudo apt-get install tree 2.tree命令 输入命令： 1tree --help 查看命令使用方式： 3.使用命令tree查看 1.使用cd /进入&quot;/“目录 输入tree命令 将会显示”/&quot;下所有的目录和文件（文件太多了 不好截图） 2.使用 1tree -L 数字 显示你想要的目录层次结构 例如：tree -L 1 1tree -L 2 或者使用ls /命令查看： OK 进入正题 Linux的目录结构 树状结构： Linux目录结构简介 在 Linux 系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。 /etc： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。 /bin, /sbin, /usr/bin, /usr/sbin: 这是系统预设的执行文件的放置目录，比如 ls 就是在/bin/ls 目录下的。 值得提出的是，/bin, /usr/bin 是给系统用户使用的指令（除root外的通用户），而/sbin, /usr/sbin 则是给root使用的指令。 /var： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在/var/log 目录下，另外mail的预设放置也是在这里。 这里介绍的更加详细–&gt;&gt;","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}],"keywords":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}]},{"title":"vi和vim的基本介绍","slug":"vi和vim的基本介绍","date":"2020-05-01T15:27:06.000Z","updated":"2020-05-01T15:33:05.571Z","comments":true,"path":"2020/05/01/vi和vim的基本介绍/","link":"","permalink":"http://yoursite.com/2020/05/01/vi%E5%92%8Cvim%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/","excerpt":"","text":"vi和vim的基本介绍 是什么 VI 是Unix操作系统和类Unix操作系统中最通用的文本编译器。 VIM 编译器是从VI 编译器发展出来一个性能更强大的文本编译器，可以主动的以字体颜色辨别语法的正确性，方便程序设计。 Vim的安装 centos系统： 普通用户下输入命令：yum -y install vim* ubuntu系统： 普通用户下输入命令：sudo apt-get install vim-gtk 之后输入y，即可等待安装完成。 输入： 1[root@localhost ~]# vim 显示 安装成功！！ VIM Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。 vim键盘图： VI/Vim常用的三种模式 基本上 vi/vim 共分为三种模式，分别是命令模式（Command mode），编辑模式（Edit mode）和指令模式（Instruction mode）。 这三种模式的作用分别是： 命令模式： 以 VI/Vim 打开一个文件就直接进入一般模式 了（默认的模式），在该模式中可以使用『上下左右』按键来移动光标，也可以使用『删除字符（x/X)』和『删除整行（dd）』处理文本内容，同样也可以『复制（yy）』『粘贴（p）』『撤销上一步（u）』来处理你的文件数据。 在命令模式中，输入『 : / ?』3个中的任何一个按钮，就可以将光标移动到最底下那一行。 语法 功能描述 yy 复制光标当前一行 y数字y 复制一段（从第几行到第几行） p 箭头移动到目的行粘贴 u 撤销上一步 dd 删除光标当前行 d数字d 删除光标（含）后多少行 x 删除一个字母，相当于del，向后删 X 删除一个字母，相当于Backspace，向前删 yw 复制一个词 dw 删除一个词 shift+^ 移动到行头 shift+$ 移动到行尾 gg或者1+G 移动到页头 G 移动到页尾 数字+G （先输入数字，在按G） 移动到目标行 编辑模式： 在一般模式中可以进行删除、复制、粘贴等的动作，但是无法编辑文件内容！要等到你按下『i, I, o, O, a, A, r, R』等任何一个字母之后才会进入编辑模式。 注意了！通常在Linux中，按下这些按键时，在画面的左下方会出现『INSERT或 REPLACE』的字样，此时才可以进行编辑。而如果要回到一般模式时， 则必须要按下『Esc』这个按键即可退出编辑模式。 进入编辑模式： 按键 功能 i 当前光标前 a 当前光标后 o 当前光标行的下一行 I 光标所在行最前 A 光标所在行最后 O 当前光标行的上一行 退出编辑模式： 按『Esc』键 指令模式： 在这个模式当中， 可以提供你『搜寻资料』的动作，而读取、存盘、大量取代字符、离开 vi 、显示行号等动作是在此模式中达成的！ 命令 功能 :w 保存文件 :q 退出执行 :! 强制执行 / 要查找的词 n 查找下一个，N 往上查找 ? 要查找的词 n是查找上一个，N是往下查找 :set nu 显示行号 :set nonu 关闭行号 ZZ（shift+zz） 没有修改文件直接退出，如果修改了文件保存后退出 强制保存并退出： ：wq! 模式之间的转换","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"},{"name":"编辑器","slug":"Linux/编辑器","permalink":"http://yoursite.com/categories/Linux/%E7%BC%96%E8%BE%91%E5%99%A8/"},{"name":"Vim","slug":"Linux/编辑器/Vim","permalink":"http://yoursite.com/categories/Linux/%E7%BC%96%E8%BE%91%E5%99%A8/Vim/"}],"tags":[{"name":"Liunx","slug":"Liunx","permalink":"http://yoursite.com/tags/Liunx/"},{"name":"编辑器","slug":"编辑器","permalink":"http://yoursite.com/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"},{"name":"Vim","slug":"Vim","permalink":"http://yoursite.com/tags/Vim/"}],"keywords":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"},{"name":"编辑器","slug":"Linux/编辑器","permalink":"http://yoursite.com/categories/Linux/%E7%BC%96%E8%BE%91%E5%99%A8/"},{"name":"Vim","slug":"Linux/编辑器/Vim","permalink":"http://yoursite.com/categories/Linux/%E7%BC%96%E8%BE%91%E5%99%A8/Vim/"}]},{"title":"虚拟机克隆","slug":"虚拟机克隆","date":"2020-05-01T15:20:24.000Z","updated":"2020-05-01T15:24:37.062Z","comments":true,"path":"2020/05/01/虚拟机克隆/","link":"","permalink":"http://yoursite.com/2020/05/01/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%85%8B%E9%9A%86/","excerpt":"","text":"虚拟机克隆 1.关闭要被克隆的虚拟机 12[root@localhost ~]# sync[root@localhost ~]# shutdown -h now 2.右击找到克隆选项 3.欢迎界面 4.选择当前状态 5.注意选择创建完整克隆(F) 6.命名虚拟机名称/自定义目录 7.正在克隆 8.创建成功/点击关闭 9.修改克隆后虚拟机的IP 1[root@localhost ~]# vim /etc/udev/rules.d/70-persistent-net.rules 进入如下界面，删除eth0行（删除整行命令：d）； 将eth1修改为eth0.同时复制物理IP地址，如下图所示： 查看是否修改成功： 1[root@localhost ~]# cat /etc/udev/rules.d/70-persistent-net.rules 修改成功！ 10.修改 IP 地址 1[root@localhost ~]# vim /etc/sysconfig/network-scripts/ifcfg-eth0 （1）把复制的物理ip地址更新 HWADDR=00:0c:29:4e:cf:72 #MAC地址 （2）修改成你想要的ip IPADDR=192.168.26.131 #IP地址 11.修改主机名称（可不修改） （1）查看当前服务器主机名称： 1[root@localhost ~]# hostname （2）如果感觉此主机名不合适，我们可以进行修改。通过编辑/etc/sysconfig/network文件 1[root@localhost ~]# vim /etc/sysconfig/network 注意：主机名称不要有“_”下划线 （3）打开此文件后，可以看到主机名。 （4）保存退出。 12.重新启动服务器 1[root@localhost etc]# service network restart 重启成功 重启失败 错误：激活连接失败：The connection is not for this device. 如果报错，reboot，重启虚拟机","categories":[{"name":"虚拟机","slug":"虚拟机","permalink":"http://yoursite.com/categories/%E8%99%9A%E6%8B%9F%E6%9C%BA/"}],"tags":[{"name":"虚拟机","slug":"虚拟机","permalink":"http://yoursite.com/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"}],"keywords":[{"name":"虚拟机","slug":"虚拟机","permalink":"http://yoursite.com/categories/%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"Ubuntu--配置静态IP","slug":"Ubuntu-配置静态IP","date":"2020-05-01T15:16:52.000Z","updated":"2020-05-01T15:18:28.060Z","comments":true,"path":"2020/05/01/Ubuntu-配置静态IP/","link":"","permalink":"http://yoursite.com/2020/05/01/Ubuntu-%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81IP/","excerpt":"","text":"Ubuntu–配置静态IP 1.进入root 1coffeecode@hadoop135:~$ su - 输入密码–进入root用户 2.先停止Network-manager的服务 1sudo service network-manager stop 3.修改/etc/network/interfaces配置文件 1sudo vi &#x2F;etc&#x2F;network&#x2F;interfaces 在文件中加入下面内容： 12345678910auto ens33iface ens33 inet static# IP地址--根据你自己定义address 192.168.26.135# 子网掩码netmask 255.255.255.0# 网关gateway 192.168.26.2# DNS--和网关一样dns-nameservers 192.168.26.2 怎么查看该虚拟机的网关 1.编辑–虚拟网络编辑器（N） 2.打开NAT设置 3.查看网关 4.修改完成 5. 重启网络： 1&#x2F;etc&#x2F;init.d&#x2F;networking restart 重启网络失败： 重启系统： 1reboot 6.测试配置是否成功 查看cat /etc/resolv.conf文件中是否已经添加DNS 7.测试网络连接情况 1ifconfig 1ping www.baidu.com 配置成功！","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"},{"name":"网络配置","slug":"Linux/网络配置","permalink":"http://yoursite.com/categories/Linux/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"},{"name":"网络配置","slug":"网络配置","permalink":"http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"}],"keywords":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"},{"name":"网络配置","slug":"Linux/网络配置","permalink":"http://yoursite.com/categories/Linux/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"}]},{"title":"Rational Rose Enterprise","slug":"Rational-Rose-Enterprise","date":"2020-05-01T15:09:44.000Z","updated":"2020-05-01T15:11:39.236Z","comments":true,"path":"2020/05/01/Rational-Rose-Enterprise/","link":"","permalink":"http://yoursite.com/2020/05/01/Rational-Rose-Enterprise/","excerpt":"","text":"下载Rational Rose Enterprise 下载链接: https://pan.baidu.com/s/152l2OMioSsh7QqcIXVI7Lg 提取码: pkj1 复制这段内容后打开百度网盘手机App，操作更方便哦 安装 1. 解压压缩包 2. 找到解压文件 双击EXE文件进行安装 3. 选择安装程序对应的系统 我这里是windows系统 4. 点击 next 进行安装 5. 点击 下一步 6. 选择安装类型 RationalRoseEnterpriseEdition 是ROSE编辑器 7. 选择第二个 8. 点击 next -&gt; next 9. 选择 I accept 10. next - &gt; next 默认第一个： 11. Install 12. 点击第二个 Import a Rational License File 14. 选择目录 找到： Rational Rose Enterprise 8.5.0506\\Crack\\license.upd文件 import： import： 15. 激活成功 发现激活有点问题：激活截止日期为 06-jan-2020 16. 确认是否激活 双击 激活失败： 解决办法 ---- 修改系统时间 右击任务栏时间部位 修改日期 激活成功 双击 激活成功","categories":[{"name":"项目工具","slug":"项目工具","permalink":"http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"}],"keywords":[{"name":"项目工具","slug":"项目工具","permalink":"http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/"}]},{"title":"Shell编程","slug":"Shell编程","date":"2020-05-01T10:20:37.000Z","updated":"2020-05-01T10:23:11.270Z","comments":true,"path":"2020/05/01/Shell编程/","link":"","permalink":"http://yoursite.com/2020/05/01/Shell%E7%BC%96%E7%A8%8B/","excerpt":"","text":"1. 统计根分区使用率使用if 12345678910111213#!/bin/bash#统计根分区使用率rate=$(df -h | grep sda1 | awk '&#123;print $5&#125;' | cut -d \"%\" -f1)if [ $rate -ge 80 ] #判断rate的值，如果大于等于80,则执行then程序 then echo \"使用率达到80%！！！\" #打印警告信息 else echo \"使用率：$rate.\"fi 2.使用多分支把输出内容分别输出1号文件和2号文件 12345678910111213#!/bin/bash#统计根分区使用率rate=$(df -h | grep sda1 | awk '&#123;print $5&#125;' | cut -d \"%\" -f1)if [ $rate -ge 80 ] #判断rate的值，如果大于等于80,则执行then程序 then echo \"使用率达到80%！！！\" &gt;&gt; caveat.txt #打印警告信息 else echo \"使用率：$rate.\" &gt;&gt; normal.txtfi 4.判断用户输入的是什么文件？ 123456789101112131415161718192021222324#!/bin/bash#判断文件类型read -p \"请你输入文件名：\" file#判断file变量是否为空if [ -z \"file\" ] then echo \"错误，请重新输入。\" exit 1#判断文件是否存在elif [ ! -e \"$file\" ] then echo \"没有找到该文件！\" exit 2elif [ -f \"$file\" ] then echo \"$file 是文件。\"elif [ -d \"$file\" ] then echo \"$file 是目录。\"else echo \"$file 是其他类型的文件。\"fi 5.全局命令 地址：/usr/local/bin/xcall.sh 12345678#!/bin/bashparams=$@i=141for (( i=141; i &lt;= 143 ; i = $i + 1 )) ; do echo ============= hadoop$i $params ============= ssh hadoop$i \"$params\"done 实例： 12345678[root@hadoop142 bin]# xcall.sh jps============= hadoop141 jps =============5388 Jps============= hadoop142 jps =============12996 Jps============= hadoop143 jps =============14881 JpsYou have new mail in /var/spool/mail/root 6.全局分发 地址：/opt/module/xrsync.sh 12345678910111213141516171819202122232425#!/bin/bash#1 获取输入参数个数，如果没有参数，直接退出pcount=$#if ((pcount==0)); thenecho no args;exit;fi#2 获取文件名称p1=$1fname=`basename $p1`echo fname=$fname#3 获取上级目录的对路径pdir=`cd -P $(dirname $p1); pwd`echo pdir=$pdir#4 获取当前用户名称user=`whoami`#5 循环for((host=141; host&lt;143; host++)); do echo ------------------- hadoop$host -------------- rsync -av $pdir/$fname $user@hadoop$host:$pdirdone 7.启动zookeeper 12345678910111213141516171819202122232425262728#!/bin/basharg=$#if((arg==0));thenecho no args;exit;ficase $1 in\"start\")&#123; for i in hadoop141 hadoop142 hadoop143 do ssh $i \"$ZOOKEEPER_HOME/bin/zkServer.sh start\" done&#125;;;\"stop\")&#123; for i in hadoop141 hadoop142 hadoop143 do ssh $i \"$ZOOKEEPER_HOME/bin/zkServer.sh stop\" done&#125;;;\"status\")&#123; for i in hadoop141 hadoop142 hadoop143 do ssh $i \"$ZOOKEEPER_HOME/bin/zkServer.sh status\" done&#125;;; esac","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}],"keywords":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}]},{"title":"Python3 标准数据类型","slug":"Python3 标准数据类型","date":"2020-05-01T07:58:31.774Z","updated":"2020-05-01T08:40:49.393Z","comments":true,"path":"2020/05/01/Python3 标准数据类型/","link":"","permalink":"http://yoursite.com/2020/05/01/Python3%20%E6%A0%87%E5%87%86%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","excerpt":"","text":"Python3 标准数据类型 五种标准数据类型： 数字 – Numbers 字符串 – String 列表 – List 元组 – Tuple 集合 – Sets 字典 – Dictionary 数字–Numbers 数字包括：整数、长整数、浮点数、复数外加Boolean（true、false）型。 整数（int）：1、2、3、4 … 长整数（ 2.2以前）：能够表示很长的整数，根据整数的长度分配大小。 — 长整型也可以使用小写 l，但是还是建议您使用大写 L，避免与数字 1 混淆。Python使用 L 来显示长整型。 浮点数（float）：1.23、3E-2 复数（complex）：1 + 2j、1.1 + 2.2j 123&gt;&gt;&gt; a, b, c, d = 20, 5.5, True, 4+3j&gt;&gt;&gt; print(type(a), type(b), type(c), type(d))&lt;class 'int'&gt; &lt;class 'float'&gt; &lt;class 'bool'&gt; &lt;class 'complex'&gt; 数值运算： 1234567891011121314&gt;&gt;&gt; 5 + 4 # 加法9&gt;&gt;&gt; 4.3 - 2 # 减法2.3&gt;&gt;&gt; 3 * 7 # 乘法21&gt;&gt;&gt; 2 / 4 # 除法，得到一个浮点数0.5&gt;&gt;&gt; 2 // 4 # 除法，得到一个整数0&gt;&gt;&gt; 17 % 3 # 取余 2&gt;&gt;&gt; 2 ** 5 # 乘方32 注意： 1、Python 可以同时为多过变量赋值： a, b, c, d = 20, 5.5, True, 4+3j； 2、一个变量可以赋值指向不同的数据类型的对象； 3、数值的除法（/）总是返回一个浮点数，要获取整数的话需使用（//）操作符： 12&gt;&gt;&gt; 7//23 4、在混合计算时，Pyhton会把整型转换成为浮点数。 5、long 类型只存在于 Python2.X 版本中，在 2.2 以后的版本中，int 类型数据溢出后会自动转为long类型。在 Python3.X 版本中 long 类型被移除，使用 int 替代。 字符串–String python中单引号和双引号使用完全相同。 使用三引号(’’'或&quot;&quot;&quot;)可以指定一个多行字符串。 转义符 ‘’ 自然字符串， 通过在字符串前加r或R。 如 r&quot;this is a line with \\n&quot; 则\\n会显示，并不是换行。 python允许处理unicode字符串，加前缀u或U， 如 u&quot;this is an unicode string&quot;。 字符串是不可变的。 按字面意义级联字符串，如&quot;this &quot; &quot;is &quot; &quot;string&quot;会被自动转换为this is string。 Python中的字符串str用单引号(’ ')或双引号(&quot; &quot;)括起来，同时使用反斜杠()转义特殊字符。 123&gt;&gt;&gt; s = 'Yes,he doesn\\'t'&gt;&gt;&gt; print(s, type(s), len(s))Yes,he doesn't 14 如果你不想让反斜杠发生转义，可以在字符串前面添加一个r，表示原始字符串： 12345&gt;&gt;&gt; print('C:\\some\\name')C:\\someame&gt;&gt;&gt; print(r'C:\\some\\name')C:\\some\\name 另外，反斜杠可以作为续行符，表示下一行是上一行的延续。还可以使用&quot;&quot;&quot;…&quot;&quot;&quot;或者’’’…’’'跨越多行。 字符串可以使用 + 运算符串连接在一起，或者用 * 运算符重复： 12&gt;&gt;&gt; print('str'+'ing', 'my'*3)string mymymy Python中的字符串有两种索引方式，第一种是从左往右，从0开始依次增加；第二种是从右往左，从-1开始依次减少。 注意，没有单独的字符类型，一个字符就是长度为1的字符串。 12345&gt;&gt;&gt; word = 'Python'&gt;&gt;&gt; print(word[0], word[5])P n&gt;&gt;&gt; print(word[-1], word[-6])n P 还可以对字符串进行切片，获取一段子串。用冒号分隔两个索引，形式为变量**[头下标:尾下标]**。 截取的范围是左闭右开的，并且两个索引都可以省略： 123456789&gt;&gt;&gt; word = 'ilovepython'&gt;&gt;&gt; word[1:5]'love'&gt;&gt;&gt; word[:]'ilovepython'&gt;&gt;&gt; word[5:]'python'&gt;&gt;&gt; word[-10:-6]'love' 与C字符串不同的是，Python字符串不能被改变。向一个索引位置赋值，比如word[0] = 'm’会导致错误。 注意： 1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。 2、字符串可以用+运算符连接在一起，用*运算符重复。 3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。 4、Python中的字符串不能改变。 列表 – List List（列表） 是 Python 中使用最频繁的数据类型 列表是写在方括号之间、用逗号分隔开的元素列表。列表中元素的类型可以不相同： 123&gt;&gt;&gt; a = [\"hello\",2,5980,\"world\"]&gt;&gt;&gt; print(a)['hello', 2, 5980, 'world'] 和字符串一样，列表同样可以被索引和切片，列表被切片后返回一个包含所需元素的新列表。 12345678&gt;&gt;&gt; a = [\"hello\",2,5980,\"world\"]&gt;&gt;&gt; print(a)['hello', 2, 5980, 'world']&gt;&gt;&gt; print(a[3])world&gt;&gt;&gt; print(a[1:3])[2, 5980]&gt;&gt;&gt; 列表还支持串联操作，使用+操作符： 123&gt;&gt;&gt; a = [\"hello\",2,5980,\"world\"]&gt;&gt;&gt; a + [3,5,6,6,34,'fdsf']['hello', 2, 5980, 'world', 3, 5, 6, 6, 34, 'fdsf'] 与Python字符串不一样的是，列表中的元素是可以改变的： 12345678&gt;&gt;&gt; a = [1, 2, 3, 4, 5, 6]&gt;&gt;&gt; a[0] = 9&gt;&gt;&gt; a[2:5] = [13, 14, 15]&gt;&gt;&gt; a[9, 2, 13, 14, 15, 6]&gt;&gt;&gt; a[2:5] = [] # 删除&gt;&gt;&gt; a[9, 2, 6] List内置了有很多方法，例如append()、pop()等等，这在后面会讲到。 注意： 1、List写在方括号之间，元素用逗号隔开。 2、和字符串一样，list可以被索引和切片。 3、List可以使用+操作符进行拼接。 4、List中的元素是可以改变的。 元组 – Tuple 元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号里，元素之间用逗号隔开。 元组中的元素类型也可以不相同： 123&gt;&gt;&gt; tu = (2020,2030,'python')&gt;&gt;&gt; print(tu,type(tu),len(tu))(2020, 2030, 'python') &lt;class 'tuple'&gt; 3 元组与字符串类似，可以被索引且下标索引从0开始，也可以进行截取/切片。 12345&gt;&gt;&gt; tu = (2020,2030,'python')&gt;&gt;&gt; tu[2]'python'&gt;&gt;&gt; tu[0:2](2020, 2030) 其实，可以把字符串看作一种特殊的元组。 1234567&gt;&gt;&gt; tup = (1, 2, 3, 4, 5, 6)&gt;&gt;&gt; print(tup[0], tup[1:5])1 (2, 3, 4, 5)&gt;&gt;&gt; tup[0] = 11 # 修改元组元素的操作是非法的Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;TypeError: 'tuple' object does not support item assignment 虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。 构造包含0个或1个元素的tuple是个特殊的问题，所以有一些额外的语法规则： 123456&gt;&gt;&gt; tu_null = () # 空元组&gt;&gt;&gt; print(tu_null)()&gt;&gt;&gt; tu_one = (20,) # 一个元素，需要在元素后添加逗号&gt;&gt;&gt; tu_one(20,) 另外，元组也支持用+操作符： 123&gt;&gt;&gt; tup1, tup2 = (1, 2, 3), (4, 5, 6)&gt;&gt;&gt; print(tup1+tup2)(1, 2, 3, 4, 5, 6) string、list和tuple都属于sequence（序列）。 注意： 1、与字符串一样，元组的元素不能修改。 2、元组也可以被索引和切片，方法一样。 3、注意构造包含0或1个元素的元组的特殊语法规则。 4、元组也可以使用+操作符进行拼接。 集合 – Sets 集合（set）是一个无序不重复元素的集。 基本功能是进行成员关系测试和消除重复元素。 可以使用大括号 或者 set()函数创建set集合，注意： 创建一个空集合必须用 set() 而不是 { }，因为{ }是用来创建一个空字典。 123456789101112131415161718192021&gt;&gt;&gt; student = &#123;'Tom', 'Jim', 'Mary', 'Tom', 'Jack', 'Rose'&#125;&gt;&gt;&gt; print(student) # 重复的元素被自动去掉&#123;'Mary', 'Rose', 'Jim', 'Tom', 'Jack'&#125;&gt;&gt;&gt; 'Rose' in student # membership testing（成员测试）True&gt;&gt;&gt; # set可以进行集合运算...&gt;&gt;&gt; a = set('abracadabra')&gt;&gt;&gt; a&#123;'r', 'a', 'c', 'd', 'b'&#125;&gt;&gt;&gt; b = set('alacazam')&gt;&gt;&gt; b&#123;'a', 'l', 'm', 'c', 'z'&#125;&gt;&gt;&gt; a - b # a和b的差集&#123;'d', 'r', 'b'&#125;&gt;&gt;&gt; a | b # a和b的并集&#123;'r', 'a', 'l', 'm', 'c', 'd', 'b', 'z'&#125;&gt;&gt;&gt; a &amp; b # a和b的交集&#123;'c', 'a'&#125;&gt;&gt;&gt; a ^ b # a和b的补集-- a和b中不同时存在的元素&#123;'d', 'r', 'b', 'z', 'l', 'm'&#125; 字典 --Dictionary 字典（dictionary）是Python中另一个非常有用的内置数据类型。 字典是一种映射类型（mapping type），它是一个无序的键 : 值对集合。 关键字必须使用不可变类型，也就是说list和包含可变类型的tuple不能做关键字。 在同一个字典中，关键字还必须互不相同 – ** 不重复**。 123456789101112131415161718&gt;&gt;&gt; dic = &#123;&#125; # 创建空字典&gt;&gt;&gt; tel = &#123;'Jack':1557, 'Tom':1320, 'Rose':1886&#125;&gt;&gt;&gt; tel&#123;'Tom': 1320, 'Jack': 1557, 'Rose': 1886&#125;&gt;&gt;&gt; tel['Jack'] # 主要的操作：通过key查询1557&gt;&gt;&gt; del tel['Rose'] # 删除一个键值对&gt;&gt;&gt; tel['Mary'] = 4127 # 添加一个键值对&gt;&gt;&gt; tel&#123;'Tom': 1320, 'Jack': 1557, 'Mary': 4127&#125;&gt;&gt;&gt; list(tel.keys()) # 返回所有key组成的list['Tom', 'Jack', 'Mary']&gt;&gt;&gt; sorted(tel.keys()) # 按key排序['Jack', 'Mary', 'Tom']&gt;&gt;&gt; 'Tom' in tel # 成员测试True&gt;&gt;&gt; 'Mary' not in tel # 成员测试False 构造函数 dict() 直接从键值对sequence中构建字典，当然也可以进行推导，如下： 12345678&gt;&gt;&gt; dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])&#123;'jack': 4098, 'sape': 4139, 'guido': 4127&#125;&gt;&gt;&gt; &#123;x: x**2 for x in (2, 4, 6)&#125;&#123;2: 4, 4: 16, 6: 36&#125;&gt;&gt;&gt; dict(sape=4139, guido=4127, jack=4098)&#123;'jack': 4098, 'sape': 4139, 'guido': 4127&#125; 另外，字典类型也有一些内置的函数，例如clear()、keys()、values()等。 注意： 1、字典是一种映射类型，它的元素是键值对。 2、字典的关键字必须为不可变类型，且不能重复。 3、创建空字典使用{ }。","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}]},{"title":"Python3 基础语法","slug":"Python3 基础语法","date":"2020-05-01T07:57:38.464Z","updated":"2020-05-01T08:40:49.412Z","comments":true,"path":"2020/05/01/Python3 基础语法/","link":"","permalink":"http://yoursite.com/2020/05/01/Python3%20%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/","excerpt":"","text":"Python3 基础语法 Python3 基础语法 编码 默认情况下，Python 3 源码文件以 UTF-8 编码，所有字符串但是 nuicode 字符串。 你也可以为源码文件指定不同的编码： 1# -*- coding: cp-1252 -*- 标识符 标识符由字母、数字、下划线 ’_‘ 组成； 不能以数字开头，第一个字符必须是字母或者下划线 ‘_’； 标识符区分大小写。 在Python3中，非-ASCII （* [^\\x00-\\x7f] *）标识符也是允许的。 Python 可以同一行显示多条语句，方法是用分号* ;* 分开，如： 123&gt;&gt;&gt; print ('hello');print ('runoob');hellorunoob Python保留字 保留字即关键字，不能用于标识符名称。 Python 的标止库提供了一个 keyword module，可以输出当前版本所有的关键字。 123&gt;&gt;&gt; import keyword&gt;&gt;&gt; keyword.kwlist['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'] 注释 单行注释： 12#单行注释print(\"hello world\") 多行注释-三个单引号（’’’）： 123456'''多行注释多行注释多行注释'''print(\"hello world\") 多行注释-三个双引号（”“”）： 123456\"\"\"多行注释多行注释多行注释\"\"\"print(\"hello world\") 行与缩进 python最具特色的就是使用缩进来表示代码块。缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。 实例: 1234if True: print (\"True\")else: print (\"False\")","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}]},{"title":"Python安装","slug":"Python3 安装","date":"2020-05-01T06:59:32.256Z","updated":"2020-05-01T08:40:49.419Z","comments":true,"path":"2020/05/01/Python3 安装/","link":"","permalink":"http://yoursite.com/2020/05/01/Python3%20%E5%AE%89%E8%A3%85/","excerpt":"","text":"Python安装 Python下载 Python最新源码，二进制文档，新闻资讯等可以在Python的官网查看到： Python官网：https://www.python.org/ 你可以在以下链接中下载 Python 的文档，你可以下载 HTML、PDF 和 PostScript 等格式的文档。 Python文档下载地址：https://www.python.org/doc/ Python安装 ython已经被移植在许多平台上（经过改动使它能够工作在不同平台上）。 您需要下载适用于您使用平台的二进制代码，然后安装Python。 如果您平台的二进制代码是不可用的，你需要使用C编译器手动编译源代码。 编译的源代码，功能上有更多的选择性， 为python安装提供了更多的灵活性。 以下是使用Window访问官网的下载地址：https://www.python.org/downloads/ 以下为不同平台上安装 Python 的方法： Unix &amp; Linux 平台安装 Python: 以下为在 Unix &amp; Linux 平台上安装 Python 的简单步骤： 打开 WEB 浏览器访问https://www.python.org/downloads/source/ 选择适用 于Unix/Linux 的源码压缩包。(例如: 下载 Python 3.7.7版源码包) Python-3.7.7.tgz 下载及解压压缩包。(tar -xzvf 包名 解压地址) 如果你需要自定义一些选项修改Modules/Setup 执行 ./configure 脚本 make make install 执行以上操作后，Python 会安装在 /usr/local/bin 目录中，Python 库安装在 /usr/local/lib/pythonXX，XX 为你使用的 Python 的版本号。 Window 平台安装 Python: 以下为在 Window 平台上安装 Python 的简单步骤： 打开 WEB 浏览器访问https://www.python.org/downloads/windows/ 在下载列表中选择Window平台安装包，包格式为：python-XYZ.exe 文件 ， XYZ 为你要安装的版本号。 下载后，双击下载包，进入 Python 安装向导，安装非常简单，你只需要使用默认的设置一直点击&quot;下一步&quot;直到安装完成即可。 MAC 平台安装 Python: MAC 系统一般都自带有 Python2.x版本 的环境，你也可以在链接 https://www.python.org/downloads/mac-osx/ 上下载最新版安装。","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}]},{"title":"python3教程","slug":"Python3 教程","date":"2020-05-01T03:16:02.765Z","updated":"2020-05-01T08:40:49.415Z","comments":true,"path":"2020/05/01/Python3 教程/","link":"","permalink":"http://yoursite.com/2020/05/01/Python3%20%E6%95%99%E7%A8%8B/","excerpt":"","text":"python3教程 Python的3.0版本，常被称为Python 3000，或简称Py3k。相对于Python的早期版本，这是一个较大的升级。为了不带入过多的累赘，Python 3.0在设计的时候没有考虑向下兼容。 查看python3版本 1python --version 显示版本： 1Python 3.7.5 第一个python程序 1print(\"Hlello,World!\") 输出： 1Hlello,World! 脚本式编程 通过脚本参数调用解释器开始执行脚本，直到脚本执行完毕。当脚本执行完成后，解释器不再有效。 让我们写一个简单的 Python 脚本程序。所有 Python 文件将以 .py 为扩展名。将以下的源代码拷贝至 test.py 文件中。 1print(\"Hlello,World!\") 这里，假设你已经设置了 Python 解释器 PATH 变量。使用以下命令运行程序： 1$ python test.py 输出结果： 1Hlello,World! Linux系统下 让我们尝试另一种方式来执行 Python 脚本。修改 test.py 文件，如下所示： 123#!/usr/bin/pythonprint (\"Hlello,World!\") 这里，假定您的Python解释器在/usr/bin目录中，使用以下命令执行脚本： 12chmod +x test.py # 脚本文件添加可执行权限./test.py #运行脚本 输出结果： 1Hello,World!","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}]}]}